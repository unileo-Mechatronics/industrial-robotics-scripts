(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[    851778,      17322]
NotebookOptionsPosition[    830948,      16972]
NotebookOutlinePosition[    831336,      16988]
CellTagsIndexPosition[    831293,      16985]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.9689895944658613`*^9, 3.968989594930502*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"544a8c10-3271-4427-bfb0-b2696f4edf6a"],

Cell[CellGroupData[{

Cell[BoxData[GridBox[{
   {
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Rx", "[", "\[Alpha]_", "]"}], " ", ":=", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", " ", "0", ",", " ", "0"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"0", ",", " ", 
           RowBox[{"Cos", "[", "\[Alpha]", "]"}], ",", " ", 
           RowBox[{"-", 
            RowBox[{"Sin", "[", "\[Alpha]", "]"}]}]}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"0", ",", " ", 
           RowBox[{"Sin", "[", "\[Alpha]", "]"}], ",", " ", 
           RowBox[{"Cos", "[", "\[Alpha]", "]"}]}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"Ry", "[", "\[Alpha]_", "]"}], " ", ":=", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cos", "[", "\[Alpha]", "]"}], ",", " ", "0", ",", " ", 
           RowBox[{"Sin", "[", "\[Alpha]", "]"}]}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"0", ",", " ", "1", ",", " ", "0"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", 
            RowBox[{"Sin", "[", "\[Alpha]", "]"}]}], ",", " ", "0", ",", " ", 
           
           RowBox[{"Cos", "[", "\[Alpha]", "]"}]}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"Rz", "[", "\[Alpha]_", "]"}], " ", ":=", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cos", "[", "\[Alpha]", "]"}], ",", " ", 
           RowBox[{"-", 
            RowBox[{"Sin", "[", "\[Alpha]", "]"}]}], ",", " ", "0"}], "}"}], ",",
          " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Sin", "[", "\[Alpha]", "]"}], ",", " ", 
           RowBox[{"Cos", "[", "\[Alpha]", "]"}], ",", " ", "0"}], "}"}], ",",
          " ", 
         RowBox[{"{", 
          RowBox[{"0", ",", " ", "0", " ", ",", " ", "1"}], "}"}]}], "}"}]}], 
      ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Minv", " ", "=", " ", 
       RowBox[{"Inverse", "[", 
        RowBox[{"Rz", "[", "\[Beta]", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Mzinv", " ", "=", " ", 
       RowBox[{"Simplify", "[", "Minv", "]"}]}], ";"}], "\[IndentingNewLine]", 
     RowBox[{"Mzinv", " ", "//", " ", "MatrixForm"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Rz", "[", 
       RowBox[{"\[Pi]", "/", "4"}], "]"}], " ", "//", " ", "MatrixForm"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"N", "[", 
       RowBox[{"Rz", "[", 
        RowBox[{"\[Pi]", "/", "4"}], "]"}], "]"}], " ", "//", " ", 
      "MatrixForm"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"R1", " ", "=", " ", 
       RowBox[{"Simplify", "[", 
        RowBox[{
         RowBox[{"Rx", "[", "\[Alpha]", "]"}], ".", 
         RowBox[{"Ry", "[", "\[Beta]", "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
     RowBox[{"R1", " ", "//", " ", "MatrixForm"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"EulZXZ", "[", 
        RowBox[{
        "\[Theta]1_", ",", " ", "\[Theta]2_", ",", " ", "\[Theta]3_"}], "]"}],
        " ", ":=", " ", 
       RowBox[{
        RowBox[{"Rz", "[", "\[Theta]1", "]"}], ".", 
        RowBox[{"Rx", "[", "\[Theta]2", "]"}], ".", 
        RowBox[{"Rz", "[", "\[Theta]3", "]"}]}]}], ";"}], 
     "\[IndentingNewLine]"}]},
   {"\[Placeholder]"}
  }]], "Input",
 CellChangeTimes->{{3.968987948977023*^9, 3.968988473167588*^9}, {
  3.968988514243889*^9, 3.968988522483493*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"f0bd5b76-7c15-4d0d-806c-8c904a769ef9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     SuperscriptBox["Null", "7"], " ", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0.7071067811865475`", 
          RowBox[{"-", "0.7071067811865475`"}], "0.`"},
         {"0.7071067811865475`", "0.7071067811865475`", "0.`"},
         {"0.`", "0.`", "1.`"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], " ", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          FractionBox["1", 
           SqrtBox["2"]], 
          RowBox[{"-", 
           FractionBox["1", 
            SqrtBox["2"]]}], "0"},
         {
          FractionBox["1", 
           SqrtBox["2"]], 
          FractionBox["1", 
           SqrtBox["2"]], "0"},
         {"0", "0", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], " ", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          RowBox[{"Cos", "[", "\[Beta]", "]"}], "0", 
          RowBox[{"Sin", "[", "\[Beta]", "]"}]},
         {
          RowBox[{
           RowBox[{"Sin", "[", "\[Alpha]", "]"}], " ", 
           RowBox[{"Sin", "[", "\[Beta]", "]"}]}], 
          RowBox[{"Cos", "[", "\[Alpha]", "]"}], 
          RowBox[{
           RowBox[{"-", 
            RowBox[{"Cos", "[", "\[Beta]", "]"}]}], " ", 
           RowBox[{"Sin", "[", "\[Alpha]", "]"}]}]},
         {
          RowBox[{
           RowBox[{"-", 
            RowBox[{"Cos", "[", "\[Alpha]", "]"}]}], " ", 
           RowBox[{"Sin", "[", "\[Beta]", "]"}]}], 
          RowBox[{"Sin", "[", "\[Alpha]", "]"}], 
          RowBox[{
           RowBox[{"Cos", "[", "\[Alpha]", "]"}], " ", 
           RowBox[{"Cos", "[", "\[Beta]", "]"}]}]}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], " ", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          RowBox[{"Cos", "[", "\[Beta]", "]"}], 
          RowBox[{"Sin", "[", "\[Beta]", "]"}], "0"},
         {
          RowBox[{"-", 
           RowBox[{"Sin", "[", "\[Beta]", "]"}]}], 
          RowBox[{"Cos", "[", "\[Beta]", "]"}], "0"},
         {"0", "0", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
   RowBox[{"{", "\[Placeholder]", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.968988459680444*^9, 3.968988525105967*^9, 3.969001441849662*^9, {
   3.969593128952585*^9, 3.9695931476095667`*^9}, 3.9695952685904303`*^9, 
   3.970111573734728*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"154516aa-39c1-4a7f-840f-dade04c4fd45"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Simplify", "[", 
   RowBox[{"EulZXZ", "[", 
    RowBox[{"\[Alpha]", ",", " ", "\[Beta]", ",", " ", "\[Gamma]"}], "]"}], 
   "]"}], " ", "//", " ", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.968988480566824*^9, 3.968988505628883*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"402a845e-158c-4485-a93f-f0c9095e84b1"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       RowBox[{
        RowBox[{"Cos", "[", "\[Alpha]", "]"}], " ", 
        RowBox[{"Cos", "[", "\[Gamma]", "]"}]}], "-", 
       RowBox[{
        RowBox[{"Cos", "[", "\[Beta]", "]"}], " ", 
        RowBox[{"Sin", "[", "\[Alpha]", "]"}], " ", 
        RowBox[{"Sin", "[", "\[Gamma]", "]"}]}]}], 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         RowBox[{"Cos", "[", "\[Beta]", "]"}]}], " ", 
        RowBox[{"Cos", "[", "\[Gamma]", "]"}], " ", 
        RowBox[{"Sin", "[", "\[Alpha]", "]"}]}], "-", 
       RowBox[{
        RowBox[{"Cos", "[", "\[Alpha]", "]"}], " ", 
        RowBox[{"Sin", "[", "\[Gamma]", "]"}]}]}], 
      RowBox[{
       RowBox[{"Sin", "[", "\[Alpha]", "]"}], " ", 
       RowBox[{"Sin", "[", "\[Beta]", "]"}]}]},
     {
      RowBox[{
       RowBox[{
        RowBox[{"Cos", "[", "\[Gamma]", "]"}], " ", 
        RowBox[{"Sin", "[", "\[Alpha]", "]"}]}], "+", 
       RowBox[{
        RowBox[{"Cos", "[", "\[Alpha]", "]"}], " ", 
        RowBox[{"Cos", "[", "\[Beta]", "]"}], " ", 
        RowBox[{"Sin", "[", "\[Gamma]", "]"}]}]}], 
      RowBox[{
       RowBox[{
        RowBox[{"Cos", "[", "\[Alpha]", "]"}], " ", 
        RowBox[{"Cos", "[", "\[Beta]", "]"}], " ", 
        RowBox[{"Cos", "[", "\[Gamma]", "]"}]}], "-", 
       RowBox[{
        RowBox[{"Sin", "[", "\[Alpha]", "]"}], " ", 
        RowBox[{"Sin", "[", "\[Gamma]", "]"}]}]}], 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"Cos", "[", "\[Alpha]", "]"}]}], " ", 
       RowBox[{"Sin", "[", "\[Beta]", "]"}]}]},
     {
      RowBox[{
       RowBox[{"Sin", "[", "\[Beta]", "]"}], " ", 
       RowBox[{"Sin", "[", "\[Gamma]", "]"}]}], 
      RowBox[{
       RowBox[{"Cos", "[", "\[Gamma]", "]"}], " ", 
       RowBox[{"Sin", "[", "\[Beta]", "]"}]}], 
      RowBox[{"Cos", "[", "\[Beta]", "]"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.9689885307543364`*^9, 3.9690014418729267`*^9, {3.969593128974011*^9, 
   3.96959314762432*^9}, 3.969595268609372*^9, 3.97011157375574*^9},
 CellLabel->
  "Out[5]//MatrixForm=",ExpressionUUID->"0bb76dab-8450-4d91-acf6-\
32f85237a4bb"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Homogeneous transformation matrix", "Subsection",
 CellChangeTimes->{{3.968988545116323*^9, 
  3.968988570418396*^9}},ExpressionUUID->"5e6713ca-24e9-4a9c-9483-\
f7d3b4158568"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Mrotztrasl", "[", 
    RowBox[{"\[Alpha]_", ",", " ", "point_"}], "]"}], " ", ":=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cos", "[", "\[Alpha]", "]"}], ",", " ", 
       RowBox[{"-", 
        RowBox[{"Sin", "[", "\[Alpha]", "]"}]}], ",", " ", "0", ",", " ", 
       RowBox[{"point", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Sin", "[", "\[Alpha]", "]"}], ",", " ", 
       RowBox[{"Cos", "[", "\[Alpha]", "]"}], ",", " ", "0", ",", " ", 
       RowBox[{"point", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"0", ",", " ", "0", ",", " ", "1", ",", " ", 
       RowBox[{"point", "[", 
        RowBox[{"[", "3", "]"}], "]"}]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"0", ",", " ", "0", ",", " ", "0", ",", " ", "1"}], "}"}]}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Mrotztrasl", "[", 
   RowBox[{"\[Alpha]", ",", " ", 
    RowBox[{"{", 
     RowBox[{"p1", ",", " ", "p2", ",", " ", "p3"}], "}"}]}], "]"}], " ", "//",
   " ", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.96898857664676*^9, 3.9689886895344048`*^9}, {
  3.9689887459605083`*^9, 3.968988799285516*^9}, {3.968988845270543*^9, 
  3.968988868470304*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"9c70b724-7481-4008-9512-40910fa23253"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"Cos", "[", "\[Alpha]", "]"}], 
      RowBox[{"-", 
       RowBox[{"Sin", "[", "\[Alpha]", "]"}]}], "0", "p1"},
     {
      RowBox[{"Sin", "[", "\[Alpha]", "]"}], 
      RowBox[{"Cos", "[", "\[Alpha]", "]"}], "0", "p2"},
     {"0", "0", "1", "p3"},
     {"0", "0", "0", "1"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.968988870826667*^9, 3.9690014419020557`*^9, {3.969593129001768*^9, 
   3.9695931476506166`*^9}, 3.9695952686411123`*^9, 3.97011157376884*^9},
 CellLabel->
  "Out[7]//MatrixForm=",ExpressionUUID->"048c5b22-2537-4656-8b2e-\
8e586ce0a243"]
}, Open  ]],

Cell["Let\[CloseCurlyQuote]s use parameters depending on time instead of \
alpha ecc.", "Text",
 CellChangeTimes->{{3.968988941049409*^9, 
  3.9689889566464767`*^9}},ExpressionUUID->"259a6bfe-b4d7-4536-9595-\
89d068f2ce5b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"M01t", " ", "=", " ", 
   RowBox[{"Mrotztrasl", "[", 
    RowBox[{
     RowBox[{"\[Alpha]", "[", "t", "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"p1", "[", "t", "]"}], ",", " ", 
       RowBox[{"p2", "[", "t", "]"}], ",", " ", 
       RowBox[{"p3", "[", "t", "]"}]}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"M01t", " ", "//", " ", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.9689889611822147`*^9, 3.968989009028927*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"4498d027-f247-4e72-ac19-a240134908e4"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"Cos", "[", 
       RowBox[{"\[Alpha]", "[", "t", "]"}], "]"}], 
      RowBox[{"-", 
       RowBox[{"Sin", "[", 
        RowBox[{"\[Alpha]", "[", "t", "]"}], "]"}]}], "0", 
      RowBox[{"p1", "[", "t", "]"}]},
     {
      RowBox[{"Sin", "[", 
       RowBox[{"\[Alpha]", "[", "t", "]"}], "]"}], 
      RowBox[{"Cos", "[", 
       RowBox[{"\[Alpha]", "[", "t", "]"}], "]"}], "0", 
      RowBox[{"p2", "[", "t", "]"}]},
     {"0", "0", "1", 
      RowBox[{"p3", "[", "t", "]"}]},
     {"0", "0", "0", "1"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.968989011626498*^9, 3.969001441918395*^9, {3.96959312901715*^9, 
   3.969593147664526*^9}, 3.9695952686568527`*^9, 3.970111573782539*^9},
 CellLabel->
  "Out[9]//MatrixForm=",ExpressionUUID->"6f01841b-f370-4432-9221-\
4575fdec936a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"M01tdot", " ", "=", " ", 
   RowBox[{"D", "[", 
    RowBox[{"M01t", ",", " ", "t"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"M01tdot", " ", "//", " ", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.968989034532819*^9, 3.968989066919683*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"a19ce582-f1c8-4f8d-ae77-3ba5600fc9eb"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       RowBox[{"-", 
        RowBox[{"Sin", "[", 
         RowBox[{"\[Alpha]", "[", "t", "]"}], "]"}]}], " ", 
       RowBox[{
        SuperscriptBox["\[Alpha]", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}], 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"Cos", "[", 
         RowBox[{"\[Alpha]", "[", "t", "]"}], "]"}]}], " ", 
       RowBox[{
        SuperscriptBox["\[Alpha]", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}], "0", 
      RowBox[{
       SuperscriptBox["p1", "\[Prime]",
        MultilineFunction->None], "[", "t", "]"}]},
     {
      RowBox[{
       RowBox[{"Cos", "[", 
        RowBox[{"\[Alpha]", "[", "t", "]"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["\[Alpha]", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}], 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"Sin", "[", 
         RowBox[{"\[Alpha]", "[", "t", "]"}], "]"}]}], " ", 
       RowBox[{
        SuperscriptBox["\[Alpha]", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}], "0", 
      RowBox[{
       SuperscriptBox["p2", "\[Prime]",
        MultilineFunction->None], "[", "t", "]"}]},
     {"0", "0", "0", 
      RowBox[{
       SuperscriptBox["p3", "\[Prime]",
        MultilineFunction->None], "[", "t", "]"}]},
     {"0", "0", "0", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.9689890683683968`*^9, 3.969001441933552*^9, {3.9695931290325212`*^9, 
   3.969593147678578*^9}, 3.969595268673533*^9, 3.9701115737967777`*^9},
 CellLabel->
  "Out[11]//MatrixForm=",ExpressionUUID->"983b228a-7aa8-4586-89d4-\
e6b0c7ad78e9"]
}, Open  ]],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{3.968989203923284*^9},
 CellLabel->"In[12]:=",ExpressionUUID->"200056b6-67b2-4ffb-9198-4b1951fbf661"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Exercise with SCARA manipulator\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzsvdd3FcnW4PmtmZd5nH9h/ot57cdZ09PdX/e6fe8tgxdCwskiCxKmoKii
iqLw3gkQRhghgSSQQHgnQOZ4m8d7m97F7Ig4J3XkMFUI6X5dsTZJnlSePJmR
EbF/sWPHjv9rxcb/vvp/+7d/+7fa/wM2/315w3+qqVne9D/+T/jwtw21FeUb
ylb9PxvqysrLav7vFf87HNwI5/bCP7yP5ki6rsNW0zRJkui+LMuJRCKbzcKR
0jPpOXNdZ96TjhQZyZIOW46VEvFMJpOTZVVVdSLTkzJHQuSR4VngHHhSeCJR
FAVBkOdILEkcSTxJcDIr6OE0Otn5om1X7y8Hn+w7+nzCjViE8gjFJcSk9PPX
3/x+4uHeI8OnL7/xJlBGRqIsJRPhPJvOsflIMs+qyJfSL/S8btlz5efTT344
8az54JO63180HRltO21v2Pvgev+I1x+TNSTIKM9rWVZJZcVMXob9WJJNZgQ4
YncF7g09ffT0DROES6azYpZThAzPJ/ISp6I0h8yOVHf/m/adJ46e7XszEXeH
FBvD3xkaP3Sqd/+h3p27O1vbj9/sfRlNo5yEsrwcTSdZicuLuSyfS7OZLNwr
y3O8zAsSxwncbInmCexALuXz+RxJUHhycyS+mOhX6LdIggMCy/LZbD6dhgvA
Z8hpCY7nciy8azgIAjtwBE7LpNlshgPJ5wQ2L0KR4DkZBD7C3cNH+FMqmYMd
+Ohw5Zp3DjTvflW7bbB1z+DVAcYaRSEe+bJiWtPjQj4t5jkksDIfzyZTuSyn
o5CK3DwaYdQD5x9tbD5ysetlLIvSAkryWpgTQyIaiypnBjxNh1/XHrC0nrA1
HRy4MGh67uADeTTuQifOv/t53+O9h95s/vHhvlNjQ++UiQCKQ9FFKJhKwg9l
slwmy8+UbE6YTXgWMgceiwhkABaWB4FXk8tzcEKeFVlOIltZlHSaG/D4cCSX
F1N5KZmVYzn8CMEsSokoq6JXJvTrEVPDtie79r37+eCLfccf9D40+9JCDqlp
xKU0OaGgvI5sIXT2enDPCeum3Y/LWm+eGwj5FfwgSSGR5tO8Kgoi/kVVQZKA
RRQQz+usqLCiBCUxp/BQLDkB3rlIXzEIvFkQOCKKMt0BgR34CJVaVjRWUPOi
ykoaJ+sgvIIEtSCwD8epwL4ELQNCWUHIiXxegpco8qosaIqoqxLSZKTDX2cK
fEtGSNRQXlQynJjlpZwoggiaBjLrd+EjHIcrw/WNn4CDhsz8lVn/BFemXzeO
499SNFWDRq4gGjyUqsNBUVKgGoJI0NZpCD6CaHqxUSw2ZRpJtAGfNcF3DYGv
Gz9UelxRp4hxploikOcyvmHEKiiWFcIpNgNPAkc0HZ5A1TUQeA4Q4yfw4yDd
+FPhyNQ0swGf9jiaOilQ0gzBmajhK9KPsA9bUVATyXQmm4faAXkIOQlSfEZ9
VpmZA/RI6VOUvh1JRdA4KzrOEziEH1ghJUbCgssWFQUfh+ukZJkj+QZ1NpfM
IhZUAmSihqCt4XX8BxVfGf6H0wT4pGtwT3DrGr05452VqkQjFQpb6c9+RKY9
0Ud0r65DtYQ3AvtQjUOhUDweh/Z6WnmDt/bp+vzLJigGUHXhvQu8As1+MBCN
x5PQmMAtE5meZpa3UnIoBQOqrcQ5UlF55Us5Icep7pC078T9b1ftLVt/orL2
1I1+pz+DIjwK5tW3jvjOfV3rG46XVx1u2n7x6Wg4lJFB08aigUw2kcqkmVAs
kpVNTPZU16OlG35eWn1wRePZ7+vP/636/H+vuvjvVZe/qznb1fvC6vBC+xuO
pYMRkKQvmPCH4sAGTCDKBOJwxGJnHj97/ezle7sbjgV9UZ8/GvSGQk4m7PQn
X75zXbx2f33Nzm+W1/126NqL90GTK/feGr/V/+bwydu7fu7c+sO5lrYj1249
9YbYaEYEXQp44I8EfGHGG2Q8AS/jC/j8wUAwGgzFAoFQYLYUJAl2/H6/jySG
pNAcyV+SfFMSXCPEMH673Wk2W202h9vt9Xrhan7YejwMCOzAacFgOBSK4Fv0
Bn1MyO8LgwT8ESgSIOFQHLaRcAK2cALshIKx9+Oh6s23VlR3/6P83HfrTjfu
unnu9uhTc8wUzI17I2bG745Eg+lUMJn2hKMuX9ARTJliWverwG/nh1fXH/r7
im37jvS+NydsnqTJHZxgwu+Z+I2n9qb9fX+vv/zvVbf/68Zr637sOn9vfNiU
eefWHr1JHz3zqmXrrRUVJ5evP/ttxbH2vQNXBpxvXayJSb4cHfeGIHODXiY0
UxjI/VkkFAxF4LkDoSC8EF/Az/h9XsgZIi631+3xwzlUglB3E1maLT58zaDH
G3QyQYcnYvXGrd78e3v+6bvcrcHw3qNvK2qvLynvrKi9uWT14R17bt68927E
7rNHA/aY1xoOWINJJoHuv8xv2j6wvLprSfXVf19zou3w04GxlD2acga9nogf
nsXFBELhRDLJhYOZSCgbCafhI5QZfzjij4YDsRAIFPtUKpNIpKLReCQSAwmH
o/AqQfz+ILxWeNEgtBjAw/rDMV84TsUfSRgSiqeDsRTsQCUCgb8GoslgLBlO
gsRDiVgwHg3EIiDw0yC+SAiE7tPjRGKheIpcCgo8/EQMtnAQJJbJgMSz6UQu
A5LMZ1NsDgTYIytwGZ5Nc3kqsA9H4AQq9HxD4ArTJJZJgcCl6AmwA18HnsFX
BugDXsKUpQAGgMA+x4ugSqAOOl0eeMvJVAYjIifAOdAol/ZWoJmC1gyaNWjc
pNmTQlWerGAp1f7TkMAQ0KpUQDtJGmh/JOtYgNmA1gAJAvGs1RMEgR3MabIC
PSAJWlZoXzWVokIpJExjhj+SZlPVQAvTjgAeABh7vL5INA55OI24ZlX3pecY
Qo9MIyVDDDYoPA6hKF0pSIGltILoROnzQNQ85/B4HTZnOppEgoYVuaAjEees
pkA+6zzSWaRzqKh39Rlbukuw0GBCjdzJrBjAK7rB1QDDVKQZTPjRZAAb9Nyg
XYY2H/rnUOQ+QKRfM0kisIEGW+gQgQpwgQoMR6E4wt0RmZ5mAoORmcZfP4AQ
s1ohjIOAjlkRXe0Z/XblTysrD1VWH7/Wa86TMgDijPB7j/asrT28bM0vTdvO
vzbHRFqQFSgguGrnBJnXUCSn33vhqN16/B9rdq9qPLmyuWPJpo6/V5/79/Wn
W3+/N2aLQ78P86Ss0xotiJogqvQIL6gidKyAlNL5VJrN8fBHCfcUobPGC+mc
EEsJI6Ous5d6K6va65t/6R8ai6RRkgXgRxOO+KOXjr77poEhS+/AW7MzIZLC
A+AKvSFqPcgJ+Syfg9YJmiNiPVA+aj0wDAg0pedI+amJnUxwESGdzoJ2ADAA
lRGLgcZJw1s2BDQLMCFoGTgN/jqrwDlwJuyAAoJL0SMma/ynQ8/K6m9/U3Hu
+/Vnlm043rb3du8TvymgWIOiMwLCu8J5JsqGUlI4LXsT6mNL5tDVV9Vbz3+z
es/S8j2HTw6OWTO+sGz3JZmUYIuKV4bMNbu7v2u49j9r7/6/FZdaDg48mEjb
48gRRVYGPR/Jdlw11bZcLtt45r98t3t51dFfTzwYHgk6Ank7E46msgQPZhFD
y08T0JgGGwA0ub0eoAIQaAbJjg8IweH02h0egIEwwCQTAgFA8ngDIA4QT8Ti
ibnDvNUv3X8ePHj2efMPt1fXXFxWeWH1xou1zZ09A04bw9oCMXc84En4HeGg
O54PZdHgK7am7c4/Ky4sren627pzjb89vDOSfO9NWv1BdyRmYwLjVrfLC8yW
crmCAX/c74v4/BG4Z48/4An6QZhgANpqgDp4I/BmYQsYQKkPkAC2TqcbsBAE
dtzkody+oCGAH4Z4/CHYOjw+m8trdXpgCwJ47Pb5XYzX6fXY3S6by2lx2M12
m8lmhS0IfKRidTqIuJxev9MTwFuvn14ZruANwM/5iTAeADDI6gC+eUPoEXoQ
3okfHjoWDUYjIIFIGASOwHEQuBMQuCW4FGwdHjfcGPw0fKQXh3PgW/Tr+Fv+
oB8IPBimAh8BDCAfbHbn+ITZbLHBx3AkBsUgFI5C15iSeTgcjkBBJylOUnT2
BMSYicXT0VgqEk0aAh+pwJ9A4ByQRDILAjQCvxIHnIslwvFUJAEKLYMllYtn
2Egy6/KF3pmdIE5/FI7E0xlMgBlq4ctm8zkq1NgFnSNDiPGPM6yIFG8o4UAy
mlyjB0c7cdTcBP1BsUghVOCgQlgEtlSgGYF2w2pzQI6l0llgLaruqTWm1Foy
U2baEyiwKbgzPwUPoM2Upn2dmDIKRgxi5YCtTqhIIwYuASGo+KNm27txM8Cz
LE1ekZpoiqYkvC1QCrVgkH00G8ZMWoFKrgAUB6RBRZ1q/DHkE60HhvbHZnqi
N6ENd7lcQAjJZBJe0IdtVl8tycR6CVkt8Ap0Fe02N2gBYu1YgATZm5PQg2fe
srV711YdqWk43dUzKpACAOJPCic7htbXHlyxZs+uX6+OO5MiNhYpqgakiPGA
l7E5LieDHsntO3n7m8odqzcdXt14YnnDqWUNZ1c0Xbgy6I5kNMP6Nyvl0gJc
co4m6TKUYoV8FGTk9aXuPXh96Up/b9/zYEQCVuUUUkTTiieYB00Xz6BgXGFl
XKI4WSMmU7HYe9CwSUz/ePkx0jQqmzPrphoPjaJF/4fKDq0dqAxo0KARgaag
tOKTEmr8XEGo+ag4xqTDV3gemhoFdugVYD8SVy/cdK1r6flu7bkVNRf+Xnao
vP7c0Utvex+H3jo0Wxh548gTR4EUivPIn0Lv3eK+jiebfupaWXP0m9W/rqs7
fuHyG6dXSeaQ3ZuJZJE7rl68O7p+R9eK1hvLWgf/2/pL248Pv/YqMRlFBYxh
oQQaGRdOXRypau34vvLAP1b/Utl07NSVJ6B/MzzCRvkMl86wM4UMOsyUPB5B
IO0ttL3QAkM7DA04CLZVksEFaNL9gQhwgh+606l8HgiPjLPk8JgFl8pxiawQ
yyrRrO4OSXceOn492t/6w/XK+vMr1p1e39DZ2WViQijNI9D4/lTEnw66Y5Eo
rzNJdO9FrmHHvX+s6fhu45X/tvr02h/udL/KYBACoIpzvhjnCWUiCS6VFaMx
uKt8KpmDm8GaJZmKpdKgOEAAD6itAIANAA8E2nAQUCSwD9RHTQrw3hOJFNFN
WaqPQDGBegrFksFoAsQXijLBiDcQBk4AcoAtSFGtM4byNcQ4OPV4AF/BF4Yt
XI0iBxz0hyMuxkfEW/oV4AHQ71RK9T6IwQYUDAyEABiAk+E0A1oATgBXgBCA
Xuif6O3Rv46NmwADJkwWk9kKMAACO/DR6fLQI25AKV/AARzlcMG+z+crtcJB
cw1cBXTlmCsRdLTZ3Vaby2J1mi0OENgBgSMg8Cc4AU5zuhgoRfC78FugZOHX
xy12EJPNaba7THa3Ezg2GAXgBDZ4a3JYPcFgLMUEQ5RdqTB+HxVAWRAPPGxR
6BF6/xRyQqFQmCRAHUCZSDHRg9TqSAsPECY0+7ScgEBZgpIDpQjKDOzAFsoS
HAf4BGb2Mn4ALWCqGPQp0lmoJhwvpjO5WQWqGMjMI/BFup/NsXAFOqIHO3PU
Uy6HxwdxpcvlBRDo4oFkOREqYI6XIsmMxemZsDkZALY8F2O5FC9SSQtSlscC
p+UFOZ3nU7m8Iek8m2G5LId/nW6LfTeR2p3ygggdQxD4K5wJ58O3ktlcIpOF
Lb0I/QhVEiomUF+pzNVcU/sAJIoHkDKZDOCBx+OBfAeEo20+bZcXkBPU4niJ
KKh+X9hidkBR+QO3U6qepthn5kizXgR+NsWhN+OhmobDazceqKo72nV7hNNQ
RlZTouyLs53Xn1XV76/cuPfk+UFXMJeTNeBcReVVHdsOOQmTI7BCgkV3H47W
bT1Q035sw+Zj61tP1m6/sHXf7fduKSMUMICHByYYgG19qgKFAVvt4OsSLhhY
Z2rYsQF2YItNIhqgFDwmYlnd5YmHIiyIKCNWRHkBj3fFUoI7mGTCeQADOEKB
E4+6wgWQpCAZtgWCpiOVhIFnHcGZazSH+njMmkrtMAYhQALtD28TNDt0LaH0
QR0HVFDVyRds8MAsr6OEE8hPaMXf0uj5OQ49ec+37Xm4sqpjde2l/7ny8Ldr
TjT/2P/TkecXbjEPRyRrEDFpFMghVwI9fJc5c+N9edPp5bXHvynft6T89x27
bz16Fk1kUJZHVlcmmEL2sHy2+03l5gvf11/4tv7mfy47ueVA/yNzOsxhFxRR
R8k8cvvR41fh344NVred+9vKnX9bsa35h7MPnrvhZrJ5JEnYCjRTqPl3huAx
aOgzTRFihTb4jePlUDjuBlUXTuRZCeqLVhycxV8nBiJWwaOdFm/61OXBll1n
69vPrNx4sKz6+O7f+99NsAA/8azmjyezSj4tZSK5LGFddGswWNPW87eys/9Y
e/G/lp3+tu7KwS7bcyt/75Xn4Yj3vSPpDOWiOQUbMGWE3VR4EYRawqGhA2FF
BbqitFWH3iM1QNMtvDLYAsUR85RAvRHgYQVRhW/Bd6G1hNY1wwrQYIIU+rBE
Yilo67LxdKHRi6dTCaAmYCcgKOAoNp/loFebmk0IeMQL7AGE4PBgZogkklSi
yYQhsVQSxNinV4AfokKPRxLxcDxGTQHUjAAf4SD9CmzhT8APhs3BsBvAR2AJ
4ARQx2SQiAGlVmpJoAYE+GsoDOSUAmVHdzLFBL25RCIBWhV0KGhb7xwJHs7n
D5ORJlCdvmkCxQaOU+MVnAbi8TCgBQBFLFZ7AVdsTovDDZwAeeX2h+0e/5jF
MWq225lwOJEBsqLWLbh9eAg3QJTbBWJz2O1OxzSBg1aSbDab3W7H8AKPSBLd
p4kecZOEr+KAv7qccFGXB5uYiqONILAPR6BbAQgBH+E0Y+gNspTmKmQmMCog
1qwC+YxtVuRkKvQI5Dx9NYbQI7Oa/oBXIQOBOXFWE/KkAkxLbXqBcMLi9I47
3PZg2B6JjjKMyR+Y8PnNjN/C+G1un93lczgZgDTgVScTcHj9ILDj8gVB3ASJ
nUVLGsVj+kN4IC8MPwT7mJahMFM7mNPLAO7CDj0CH+1uj83lhkJVKnM11xQA
DDyAI9lsFtgA3gjgAW3nS83yH9W/85QMFxSBVxhvcGLc6vcHDUXw6WnmMMSn
nD9ND2I7FbScUWHf7zfXV+2rqv6t776J2oV4RY+kucEHEz/vvQJ/ffLSk+Op
Kwi1+ii4p1s0BMH58bzeN/y+q/dFx43H57ueXb07OvjSzxH3EmpSAiWgF/dh
Cxgwc7/kdvHGQCl4e1RvYs0rYcsF/AUaRsz/gSQe9dKKQ1SqbIw6qvg+teKv
/MHBwpn5/OHcppodVAZQH1R26AXQc6eZCKgZAU4rtR4YpgNaHuCv9JpU+yBs
rkGBNDp3y964q3ttU+f3a098V3GysuFa1eaelh8f/H7afKkn0jWY6hqKddxx
/3zycfX2y6tqTyyvOvrdmt83Np69fH0iEsdZk+cQE+AiacQk9NvDjuZfri/f
dPab6gv/ZdXBqh2XOvvG3tozGRG7vYGuzIsonEZPR+O/nbq3bP0v31Xu2th4
sOPq03SWQJc2ZaBzprVwmhjjudOHdItf4QUlGIpBOw9deJmwAcUDtWgsleiw
I0LjjtDeI5eqWvZuaj9aWb+vZefFvmFvGogFGFLQRRV4EAqOwgJwIuzEeO76
xNqGq/9cc3553Y2l9Tf+UX259ud7v555tv33WzsP3Dh2cah3eNTmT3IqLeIa
eQ/4bsnvFkyvmTRL8QAYgL414+3Qt1x0IioQoD7FUoptuYKigwAzcJIKwssa
fITjxMwLOwqIpKnThB4XFJkKL0tEyEVEDbbAHoFI3O5moF2FnhegOxFxmsC3
4OvGrxiXZUWBSl7gczz0EKGLx4IYX6E/Ch+NE+Bk+AhbOA1IBngGMIP2VYvO
wKLhhwA932AoAv07YC34SLlLxNZ1mZrfqQW+1D149oT7vNjHNZ1hyYhkQZKp
HN0pNV7hnjJxMIa+Mx1iADFgLJll4xmWCcVA01ldTDCR42Qdd2+JXSsJ+ATI
FI9BLx/6+lRojx/EOEg9lAwbiOHIRP2QjIPUtkB8loJUsGtK0ZJAhSIBZYMo
MVK5ChrcT8diAAwoAJRq/2kCIARa0mpzGAIf6UG6Y5wAvATidHgddo/dBnoW
C4CTMdRlJVubm6Fi9/gAqHwMPHoqGIiZbe5xq9PhD7nC0QkPYyFgYPH4ICct
do8VLmh2WcxOk901ZncaMu5wmR1ui9NjiJn8Iv1RKL2g9KmA6rc6XSAWB+Cc
0+HxAhLQgTNKCHAETqOQY8DP3M2yRhtzAw+gYABtAsUBlFJfxIUFA5pK8cDH
hAAPoDxAB3Mu34N5uo0CLZAmK5VTLl4cqqjcuXr1tgfDZk7EY/fQFPgjiVev
Pbd73w4PQymQQC9LuGHHDj6SwkM/SUa4YckL0GHHDWAkLbj8abs35WCy7qAQ
zRDMkDXsF6NCK8ESBxdoEKDlFhUF+1zj1wU9QlXG40ugMOGgqimSSv1hJEHV
yQ4dC4Mcw9M94IoEDwClzQDsXj8na6xMPaiVvJiTdFHUeNIGC1SlFJRyUct8
um+GOrcL61xfhz4jwm6xIvQIrFY7tCbUsWS2VzC7DcFIhu2CGigQcfhICGj4
ffLA+ScNP1xbXXtmSSUQwpnvKy58t/biqtrrFY23yjZdWVHXsbzu9PdVx/5e
sW9F9ZHVNUeqms4cOPEQetZ5AfEiSqSRzRn3BPOBpP7KnDjYMbxx64Xldae+
WX+wrP7Qjt+vHT5358EzazACLT8ZstFQOIeu3Rvb0Hr4+7U7l1fuOnyiP50m
g5Jzk8BniaxoBh4EglHoCcYTWXyEDH0W3iARrGd1xKpowhU4dq5r528njpzt
/vVo18nOIVdQxv4txFJB9DO2IEHZyAjI4Ze3/3JryZqj/1x98rt1l5bWdf2P
yjPfVJ9fXnt2ee3RFVX7V9X8snPfheejLk6l/te0lFGvrMkbTafy1DIMeIDQ
dDyY5S3P4Tb2KXlCveAoSs1+Qsl1JFkPhePQwoMeUQ1mK7mCIaXOddhRnSDQ
J74mrTAKrRu3BPuyit35RGwHUqaNeht3mMtzyVQGyIG61VE7EhmPnu5AVdqJ
m5nowDp8nRqdPiql3SL6xYIQLzjS+nHUOzSVF4yZC/SJsGFTxHNVQIhLUWFW
inEcOyTM7oA0C96wH0xZkqghhbqOg9rC+ssJmjAIbEPt8OlMDggngn0wUrMK
5RaADkNKqYaOYxiC4SccpWTiD4RAoNtOHHGjvkjEG8U7VKi/azAKAAjUKMYj
aafNCxINJbOJfCycioeSsE2EU3g/kgZJRDPxWMYbjLjCEXeoIJ5w1BuJgfjj
SV8s4Y/EDZdaELj+tMEdQ6g5inj7hukDlg79EF9gfNpHFd8010SbzRaLxT5g
Jf7KyfBQlUQt4I+YTXbAAyh2n4sH06wBRuX6aG932reggooKuj/4rrp6d2Xl
tjcjHk4qKFJ/OGZzxFzufCaDVAISMq6aWK1D5dZw9xxP0AGQwD4MvAQn5HkF
rqaiQgcfOnHQPyCfZEUVaEcKeIDuABLAQb04fwV2oF5Cg4ItyNRRtphXMtAE
7mvLhQfHf1SJRxgeQgUw4BRJ1LHdQCYzddSCe7JSaCMLTz5f1oMpTVCx4w8d
BLvdCRWSGgGUEh/oUvlAos+LiiiCiK2GQ4jJonuvmAPnHrTv6a7afGXlxvPL
119atq5zRfW1lTVXl2w8/826E39fd/ifGw8tqTpQ0XCs5YfOo+eGX4+loPmD
HAG1JkjIag+5fckkh8IZ1PfE/tOx280/X2rcfaHhhzNbf+5o2Xbw8Mmrr0bM
0UReJV7J8PLeOhK7D3YtX79rSdnW851PVUNxf471YBZdoxdcp/Ti4ALjC4Ga
i8bSBh4YVUMrTL3C1q14nn/6Zmzw2YjZHX014X094RdJMdII08Gr4IUsFFeq
BZ6+Zqqajq1Ye2hF1dl/Vpz8vvri3zecW1J38W+VR1fWnV6y4ff//E1Dxabd
D16aRDyqQp8MlyK4jlZUinB/qWQO+n3QokKdLb59ZLzfaS9UL8mQaT5jMxU9
/es0VT5Tmxvqnpo1DL8dUdIg38YnrNDIGxAyEw9mvgI4CNrQ0PszZ/OVUkHp
kVI8gGpeenHjeY0ZiLF4ko4m0BdtzLabK8019jeNsuYqaZNFsQQ2tOIrwBNO
RYUSAuzgMYVIIp5hoedhZNq0fKMTGYzXQfNfVqeolZntg9EyzNrdKD1fJpPb
jb6tTgbHfT5sKIB8A6yiNIXx+INoRKmGAowBM3CQ4g3dp/MyZNKnETgAHZEl
fgjY+Yfj6cTYtChQoR+hD8iKEnyf52SFV3PxfNDui1j9UjCDooIWzHGuOO+O
C/60EM6KCV7KSTKngo7L8lKKFzNcQbBPgiBnJQV24GOaFVJ5PpnjqKRYNpXO
UtdQ6h1qCLVF0WJGMx/24XEosxlP+oHmVNd1I4dhm06nGYYxmUyAB8ZBI/M/
1C7PZ6KNDLUeAB5YLU4gN8OM/NWTJkgs3I7fl7l86f6ZU7dH37uxxU/Fk1WA
UR32SCggSQKpEtgvETPCVClUdKOpnybUYvDJouHTS6bSlNZ5DA8I9K9Ear/s
w8NxTpfPzeLoCBoBAzqmIBbZoNj7K2045jtD6SgAsR4AHgCs0xGEL5IgY0RC
CMGs9vg9c+bq85377zRsu7G+6eqaus6VVR2r6i6tae4sazz3ffWhFZsOV20/
+9OR3su33447cok89tCg40F5VgT9Gwgn0ryekRCTlF7bQnefm7sGR24Njp++
dL9956Hm1h87L3WFQ3GdTKuH3/WntT1Hry1bt6Oi6qeLVzAe4IIxD9aDYAig
1BeJpiR5+oujxYpofBWUONwYryOezLrmyI5GoQva74I5n9iadPRixNu+6/y3
K39cVX28svHS6sbOlQ2X/7nh5Dfrji2vObl04/7/79vGFRu39T9+JxWHqDRU
MHAVfpjQJ2gR6nEKjSzVFh9OXyRzPiBUydJK6A9ETGY7qJJPxLP5k9IbAHUM
TQroOOqBbxykp31u+uw7AYWvKVifYNGoU5NhXcG8LanUOzTDCtIc8QE+IF8w
GUYo2pmFbTgcpqYDQZQNyPyCr2kyQ43iVBwsBskpMlQxOi42yXI6/qxnZTWc
UZ1xddwvvnTlH457rg6bL/W7e59n3ru0cJ4a4HhWUtSClUZQCrMP5OL4tFQU
EgNEpwPEX+CJ5io5RU77Cw8+OUGJxNMQBAHZrJHxsUAsxlOrLJAA1Gi7LRz0
A16SfhD02nRhBh4UCAFyt0R0Y/s5bDADDwqvvMAKBA8UaoWAO2TwTDiH2+/i
ZLZoNyB4gO0bSgkezFt9niND0bzhAbwETsc6GXrF3hj7ciJ0e9B6rOP5j/sG
2vdgTqhpu1yztbNm2/naXee2HbpxpPPBi4mY3cflFVxf8Rxn3NeT4snYuGkC
mussL0t0IrOoB7ICk+I9cWXUGuu//7qnZ2j03YTI4wBiULtZBSUFtP/UzX+u
al5Vua2jc1iSyEjZF2qp5sCDqXqOFIMCIUCHjohEQgMJqNDUEHO1SqP4UOVO
51X5Q9yFK0N1LUcqag+V1x8rqzu5su40yNINhze2na/fcWFD66GfDl56a2ao
4wEpPyV4gAp4EI+lFzMeTJhsixYPvIz/6+MBZYMiIRTctEvxgBWVEjz4SDyB
mfIF06x44A+EkqkMNblQPPiCL7c0QwvvpQQPODyWSxQ6sZvgP0PFYCUczyst
iRaf7/bTtwc7H287Ntyy//6m325V7bxR//PjAx3MgxHeE8Zz5hWkCtDkIGi5
cUtCVYukl0aponGQKOrLf/rRPlRyigZeROyxgAder/cvPPhgUkisKxyXgLZ+
skziXMH/Gh8Mh6zWQMDP8RwZ+dUVWWNLLAbqFDAglthicDV1cvsH8ECbiQeT
oxJkPAK7jXkYt8vj9AS8nMwT64FSnBas6KWBPOavPs+W/hAeaJ8oGOR0XkCi
RMwIWQn5Y+qrsWjvfVv/I+ZGn+1S9/sLt99eujPSdf/dg3eeCSabFvE8UDoH
WaIaEwmpdNRiMUHLw3Ky0V8QiwLnxxJiNJLis1yhrIoqUCPgwc+HL/23b9fX
Nv8y+HCc2Fi/WEtl2Ns5Xg4Eo04XA3gg0u7cLPlgeCKoNIJLsZzpRfeEouDC
SYxNGjJZw+evDP50oGv3gZs//N697bfbuw8PHLnw/Mag/e5j151h0ztzKMVh
04Sq08JjFGZ8ZxrxgYEXCm+WupR8Ch7Md6KDlTQEn98XNk3Ystn8AjpY6XPg
QTAUoTGRSl/3V8aDUhuCMTDBCxINSZHO839APX1+mrN2a1rB2kkNpLAFPAgE
wzToAf25T8ODWYf7ZpHSFnIaHigkegx9QEWSsVFW0fUcz/ujGYuLGXz5+uSV
3ta9V8tbry9r7l3Remdl280Vzae+qT5f2XL/l5MvOq7bHrxQIinsTk3DK9FR
Zw0VIIByvIaM8Eu4CVIV/YNZNGtTMPWJPlh4CCEgggepVMrj8Sw2PKDT6yB/
eE6G6gx4EAiEFhQPWFnLyWRqgE5mIxA/JYwHgVDQwAP4K/TKFZ0r4oE+HQ8I
IZREZi2Kofc/ZavPyQYGHpAZEHjsyeX2Yr/bgJ/Hc9EQwQNE+5XT/Q3+A+GB
igmOztwkFVlDiRxiQlIsg2MUBOMolAbR/WklwZPwVgriJDw6IKiiIEPfjYe7
y+Xjdrs1FIxxbMHPE4fY1XhBk+g1cbeB/ia0plBpSRV3BtIN7fv+tmTjsTM3
vf6cTgK7fXE8YDkJesEOpzccSc6FBzNaBiNAikbKp1QEA2rCKkR0gfbJ5ok/
feN8NRZ8Nhoeehl8NpZwBPW0jDISSvHUIIoH8ckYsTZJuaRkEscSBcDA42Eo
HkxOT1hAdUxqCp34SV2dFyce0LmNXxkPyBfUaWI4B9Cb5HiRTq9blHgQpHhg
2NY+zbHnD+LBNFOvrBdNr9AqQE3kZCkQZx6+fHXmyrXWn86uabiwqvFmecvd
8vZ7Fe19q7Y8rN51o6z17PKai+u3nNrQ3P3jgdDTtyiaxt+VCB7gQMl46g5x
AcGDPjg0nyJi4wThXFGT9I+1gX8MDwy9T3fgd5PJpNvtXpx4AELxwGJ2AB5I
0kJ5ToJKzas4ALnOS1jrFA0+kqgJ/nDEYgv6AzxXGLMG3cQTHtBneFFOHVwo
6b4hoxB+ynaW6qcZjouKJkIBAGWFneUU1ebymu0uqD4yYU7D+3pKh+4/Fh4U
CAE4jcS2V7VCTFQF17bCoF5hgqeGaHh/hYwpkJE+UVKzCMcz4NOpqHnCFGAi
XE6jJKYTxxKgDjhZNBz21WKl1nELMTLOtOzYv6l9z/DzcVbQqTL+UnhgDKrm
WdHnD9sdnlA4gfGghA9LUHOWVgIVrAqyQl0OigWV9FNwoCqdfDlFFvIAzE1y
uOhnxILNRFALjMGxUoFOqZuDphqtN+3QuVyexYYHdBkXxhscH7MAHizY3cyN
B/5AyO1hEsm0VrTxfT080OSClOABQgUnZ5YT6JTAbI79AyP7n58+Dw/o4MLX
xwMysbfYXxOJP1c8F38z8XT/6bvNuy+sbri4etPN9W231m25tqrx4tLqy8vq
+mt23KjcfHFl3eWK5lPLNl5Zv3niTBc/akPJHA68nBfwAg2ChKemYyM1cTEG
RJB5WaXjwhoxb84jHhgJSCCRSDidzsWPB35/cKHwAA8EaQkVN5P4pcGro3jA
K6yg8r5Q2GwNAB7wYgEPQOFQa22JzAEJRdPuH1cYxQxDBQVIwinhoqqRu9Ut
ds+42REKx2lTMxkv9MN4MM9v/vPx4POqA54EqimoqJXIzPzJRzPaEILnKvUL
wpqS6BANswEIF4+FJsYsfm+cyxY9PUhhIBxBrk2bBYlAhoj3AR0truT13qe9
gy980SyOSqkYYVO/AB4YjV4uL9CZC4AHgigXByc/ggcGOxUjMKnUUZbiAfxF
FGkkcDwVl3IUHWClCyHRSf14GELR8bxag44KjpB0oo2oqEIwGHQ63TQQ+qLC
AwB6ryewaPHA5w+63N54IvV18YBqQGMJAQ2VaBCKB3mWp2GCFiceeBhvLJ40
5vV8gnfip7LBFDxAU/CAjq9hO7xGxgJ4HIksb/ONX71zt+6H/nVbeiu33F7X
enVN07kVVRfWNFyva3+88+CrX48Nb93X3/DD4KYfu9c0dS2ru1O9PX7/GfIE
cQDWSBJFU3hOdSqDWBYLXgdM0TWRzl+DFgX6pB+u4P/h8QBHgSOEAJ0UHxNa
cDwQ1biMslB5oFGExhhbZjUV8IBXOCYYMlkCjI9leVpygPn4ydllRjyfkqlA
pYMOdNzhz7EBLe0UD1QcbJngAZ4yKaEJKzM64QhHkopKW6FCU2l4d8wQw44x
j+kP4cFn+GboJE40Kj6jiieDFk38qDDjStcmW0JJQqJIm2tokkFxwBvkY5Go
fcId9uaEdEH3qtjPUCQhKYybwt7GGPt5JHG49kbTKBBXolmVK/AGdVj4Mnhg
tH6AB14mCHgQDMWLeCBOXcCNPFpJq2BAqYaLKBUSudzAA+IiixeKIR0hTmAp
ZIoatYlB1wj/hArNMm1jFGMxGgMPZPg6HnELBCgeGCGtjJe+IImWdkAbUVA9
bv/YqHmR40FxBaUFxINC1aBaIJ/P04g6XxEPZq/dmk55u+B9DVvAA6fbFYnG
eUEyMvZj1gPNcMz+qHwADzRU9N2EDkJOQgnO9+TtnZ0H+la3PlzZeG91y83V
9WeWbTizpnrg5/2OW73ci3fiy3e5gafu01febNv/oHJz3zc1V/+xbuzYhdCD
J+lXo8zQI1v/kPXeoHnwofXJ46jNJiQiSBaQyqkK9n9TcSkWPtNXbeYTzVFs
ZsMDh8OxOPEAhOKB2WQHPKCxdBYiEd8DxOLJpDjTcK8cz2tECi9yHn/AZGK8
vizHklW9cBA50RjMnYIHcxDCn8SD0tJO8UAn7TuejiQik5V5P+4EPKCV+lPx
YJ7TH8WDT9ySWgtFSNRp9xbYAMcvRthHD3vx49nMAnEdwOVMI+RUnHsInwUc
TUHiQoGwzcwEmQyfQhppk/SCGUATRbHgBKBoxlCTwOIA1zREUrEBgbMlXsh+
cTzI5njAA6vNBXhA6oU21XpQbN5nxwOVQKyslOABKa/4MRS8FC0eSZAUnviv
Iijqii6wQoISiCTytChjd2vDeqAbeCDKquAPBuwOVygcleYHD6bUgNlrxJRT
Z+JBLjMdD0ovoxbeHSp2tYpbfXK/UFr+oPqbBQ94WWF8IdDC0BEuxYM/0A5/
ZiuiFeqOPtPuVJgpkMvlFgIPZtkSPMD71C4H21AkaHG5/NFojhcKWVoscrPc
Q+HDlD61OlUmjQazdcNLZzXSVgFXKQ5qvoBCacvtB+fXb+5Z1jCwpLZ3VcP1
yobzGxqvtO94c+0Ga7WgUASlMyiS5oeej+w89HB925PVWwZWNN7c0Pp877E3
B07fbfvpct2WjpqWc/WtHZvbzX0DMdOEmoojPqtLeVox9YJT5Ke3h0pRQRS2
c2Z6sYrSsEiwzWQyHg8OqpxKpT4Q/u4rJ6X4kmgvCZrBQDBcul7nny5+n5Vo
DmPo0sk/+os6icnjZfxOB+NyBbMZkRxR/3gzqH/Odspjl9jVcR1H1FaQzysT
E26TyRWLpuhdGUFpaPiSOe9hnhNdvyyfExx2j9XijMfSNCb/B7+kffK2mGbP
vZkeHeSbhdeGByYQeY9kLTAP443weZVqAnJO4YTC1WbIHG3vl0k0i+BO0qm8
2+WD3ItGUpJoPLv2iT9nOCvOeNvaHNcpQS80+XhaIaQW7VMQUNBVQRJxrDCX
NxhNSIUFRL5kbdXpJC9yQ7pe7M6phR4jOaAVwkursg5FjUSHpEu84SJnc1vN
jnQsoxenBlN6L4wmI11E0D2DrqksYsMucc9AxRlG2KYpFy0wqkj6dSKatSJ9
KBlhDwszLolxOifIkGd2NxNLFSc2FpfI+dN59uGkTX2/k6/e0BepVIYuuJnL
8vN8M6V3NcuWDC7gLYmHpkmS5A343zvt7kQiq5A+AL19Wj5prCf6XXxEo6vh
4vIg42jtWnFxZBGvrazw8DZ1HJ0b+2iRrhtVp9CbkMkKvAhPb+d4RYBOQFLn
M0jNIo2jpVrUFFd49ELP1apt11Zuur6q/tyKmuNrqi/v+Pld752cz4fNi1Cg
Ugm8Ig4Ttpy+dq9h5+CG7beXbupb3dqzorH3+/qBJfUPVzQPlTX1rqjrXLbu
ZuNWy/Vu3ccgNof4PP46iCKVvKM/tp0jx6figUZWbHST9Bce/IEkCBL0f11O
xusJZDN4glthjHu+09x4QKsPnYHL5iXTuNsMeBBLGHNVaHVRPhzldp4TzSWO
lSDr7DZ3MpE1llhaiKSV9EoK1ARahS4VyniDxcjANG/p3JCFSQYepJK5GXiw
AMkIQKoV13GDHUGUAQ+sLiYQiUtaId7LF6ytNOwVNbAWzBc05igeMsINu4wN
QzROuIIUEWvyogGBhyLn8DrMTsCDSY/gIh7I0/FAJnhA5hZpJaLLdICG4IH8
B/AA36NOOmgkiKJKvDtyguLwBiDfAA/UYvZ+Wbyc63Y+igfJZNqDF44MfEU8
mD0Z6wLQuAcYD0KBEZfTmU7mVKWAB+pkUSNnSjhonSQRZyPF8ELGnoUKDs4p
aBqna/BgrE5Mh8VuYKF04deryBKrSXxx/AWuorFITiMFJAOFTMdrgcje6Fjn
nc6abR1lm86V1Z1e23h1+89vbhE2kEmZUgQcJU2UkSc0ceba3YZd2D9h6aaB
FS1Dy1oeL215uWzLuxVt78vaXq5pfVjRfKOi7sneg9FHT1E0hidqiyIWSZwn
FVOKB7RSAxXQZdeTyeTiwQMjjIlhRAU8MIaWFg8egOIAogYN4mNCiwQPaN/W
wAPzhMdidkej8cJ6BKQ/ghYaD6hNluKBzer6Cw8+MdF7o3gAWUfxAJtiFux+
itGQSvAA6qkvFLU4vYAHRtD++cUDpYAHWOUSL3zVqBF4kEkzKibggRuI1OpK
JdIzrQdykRBIJ01VJsf+ppqfJ8doCqd97kNhv5cZeJDlZZvbB/kWTWbUYq4u
BjyA/FlseICKZU+WZV8o+M7l8iQLeFB0pJnEA2pEQryAF3NNZlA8BSiGjfTU
gUBR8UJXeF6yzmoyT3wBVYMQ8GJnKsUD3G1XFDWVEqJRNZfXJBzXntMlVhZx
4Gj4EMuY+x7d+vFQx8a2a40/9O4+9ObyzYTJQQBVUUUOgZAVcYS3E++PnL9T
s/X2qoY7yxsHy7Y8KGt7XNb2tKz9edmWZ+Wbn1a2Dm/Ycm1VVVd107PDJ1Ov
32F/xXweVA4qOl3PU94aDgYUD+x2u8vlMvBgAV0OjFSKBx4g6sWKB3RJYtAj
wUCU4oEiLwo80DSqf2WLyWu14BWT6cs18MBYwGhBEs2lfE4A/Ws22eOx9JyD
HV8j/YvhATRFAFTU8BKLphcQD4wiNA0PvIGw2eGZJzzQi5GpNH06HhQHd3A8
KNzGq2pRyRcafS4velw+p92TTmbIyMikX9DUWR96ccqnWvCsmLo14p1qhUjq
n/kIBA/IVabggdXFQL4tNjyAUpdIpAAP/P7g4sEDugN4wAQD4y63L5VicWSA
EjxAZB43/QwvKp3LWt3BJ6899x9nx6yyJ4CSWby2Cg5sKmmqLCl4mXtBw6YA
EmuUrO6BnckU7KqE+/6KHI6O9t0fvnjV+3wEJTI05Bh2e6beCpwUMjne9gw+
ONQxfvmub+hV9K0l4/UDS2B/J2ADGfr+kmh3Wq7cGt7+W+/a5t5l9UNlLY8q
tw+Wt/evbO1b2dy3srGvrKmvrKFndV1PZcOlsuprdW1vTl9Mvh1H8QS+W22+
XMeNKkwtM/ARqMBisQAeJBIJ4+CCEwL1MMErw2Y5t8dvsTqDoYggyosND0RR
xouNBmMguOLgNaT0xYMHPKdYzdA990YiMQMP6BeMUYYFSbQrBzlG8SAWTf2F
B590o6RppHjgdHgpHigL5bE7ta02Rq84XvT4QxM2lz8cM/Cg1A3vT6bZ8UCl
7pc6WYZGlCTc0uNRZmhO6dqmxFYgsSLj8bkcbugOU2/YWSezFd3QCtuSGCaT
28JfqWfmZz8D9dOYxAMR2jpOWpx4ABkVjycBD6ArBEi/sMrBaLXovUHHn/H7
TC5PMJkWFBLUpcQvsYAHGl4GL2VyjHbdHfrt+J1d+x4dODXaeT388ClvtqFY
Elvs4SEFFgdT1xVJl0VsGsDQQFZjJ9M6BE4ORcb7Bs9u+eFkY/vEzQEUyWCP
dZEs4UZLtqazuXzKH06OuxVHRPUls65QzOPPJ5PYfKFja5McCI3f7Olu3921
tqF7Vc39ZfWPyzYDG/SUtVxf2XirsnWgdvvAph/ubGi9UVbXtxbPfbhcVte7
+Ud79wAKx0Ep6vNmPZiJB0AFJpOpFA+MjsACJgMP0hl2keOBYT2geAD0qX2F
IZpPxgObxWe34fh1RojywhcWNtAtuX82LzrsHovZkYhnFrTE/evhAeQYXYB+
YfGgtK0uxQMXExi3OucPD+gowCQeqAU8oOZ6POFCI0tWSwoe5xXVonkBKZwU
8PjdTg/ggVhcwWeaFNwdi0Shz7QtGFNBjdM+e3RhdjxYnIMLkqTQKNnQFVo8
eED7OzzPuzxum8sbSRbDIukzCpsosUxwvOf+zR37zq5turCm4cyqDTeb2p7t
O2q/eiv7agSFothoLwg0yAAZ95lce4J6LLBu72hPf+cPe/ZV1Fzf8Wv88VuU
FlFGIPGLcPkuTg0lCdqSjJrxxr0ml9/tA2Yg8ICvw7x43fvr/lMV1R1LKrqX
bnywon54VVP3soYb5ZvvbNr1bM/xiROXx49ffLJz392qLT2rN/Wvaeoua7hZ
1T7WcQMFY3Az+Xx2XvMWMtZQE/F4fHx83Ol0Ah7IslzqZbSAib5ZRcV44IIq
Q/DAiHqxePAAFAfUGo/b72NCoOwQnjyFpq5fOj/p0/BA4FWKB+Fw9C88mDv9
y+ABzaVpePA1ytuc9zMdD6CAsZzg9PoBD3yh6NfDA62AB+T6WsGezIl4rDma
QOm8kkirGZaPp31Ot9fpSidT0NxNowJ9ht4vLEVRstaGWPzpKRTx2U9VUMEG
HgjQ1rHiInRNhFcMHBWNxg08WOCWo1jkqPdULpdzQHJ644kMMR4UyhgxKRXX
CRPElM398vz1CzVbTy2turpqU8d3lTcr6/rq2u637Xpz+GT8/iPkcKNYAmVZ
AA7ixKhg9SPJmiChPCfYPeZbfdd2/HJwbX1H8w579z0USCEcV5TEbifrikgI
2gVdLLrEiBnFaw+MvTO7nAzUCFJqZcSyr2/1XNqyo2Nd/aWla3uWbRxeWd/3
/cauZXV3G38eO3U1PfxGHrUlHjwbOXKmb9O22ytq75c3969qurO+ffT0VZ0J
wSvJCfMVsuMT8cBwUZin2/j4ff6L4EE+zzmdbmiovZ4ADjOrFyI2zHv6GB7Q
WfmAB3ar32H3LTY8oK6JuSxvtTgnxq2xaGpBxzr+9fAgHksvBjww0jQ8cHh8
YxbHNDwwCOFPJr3Yi9en4gFWZLKk0PDOOOKqqIYTnNWVfG9ibd6UxcV6Alkm
4DXZGIcrl8nitm4GHkyxCRDTgVKkAqEo8sxf/0J44GSCNrfPwANcW6lj5Pym
OfGADkEKgkTxIBSKLDgeGAm0FeRPJpOxWq1OF5NIZo3RSb0wnUXHqxfhV6hy
7sC7S92dNdsurKjrqdh8d3X9/XVNveV1F5dUXK2ofbH3UKL/oTpmRqEYimdQ
lkeCjCMd5QU9lUXBhOVyz4Pdh86ubz66dtO9fcfZcTuJhEamQugqjckqFdaR
x3MfcMwZDvmCCZMVr4eXYXEDQsIMJQfPX7y4efvNxq3X19T2rqx+sKr++t/X
XF3d9GjPicTDEZTII1bix20jxztuVrf2rsKeCf3Lm+6sbXt77BJQCnFb+QOj
WZ+Upg3cwBaowGw2u1wuyGd6wsL6tNNUIEANx5b3MkGzxREIho31aBYVHphM
lvExi9vlg4qzUL4HRsQbVDJzgcSclAEPXM6AMXOh1NV8/u9yzmTggcXsgNyj
YRkWEA+o3qdhWulYJdwe4AHcno8J5XJsMd+04hoZC5bonJRoJAn3Bh2TSDi5
kBVgthKVyebtbsZkd4diSYksTy9Pjs3OcrOfy4U6KiycUWgOtAIe4LdIlhQR
eBbPApO18NuJwRPnH5+6+L6r59mFa++67wbfjSVd3qDDGQ8GNVUm0xymqne9
GEC7aIEwYuAY1gP8UcNeiZO/rhe0lXEZg5fmSGQEudgJoq6JwVjK7vEDHsTT
uRLio0u0z2v6yOCCKMoABm43dmESeGUhg2OT3mtp4D7o3gIeQPNLPcPJPRfe
oWR01EQp7/ZPXO/vbf/t6trW7vKW+2sa+1fU3FlR3bemvntN/fXK+oHWXa9/
P85cv6uPWlEwiXwxFMshVlHsjLXrbl/9zltrWs6uqO1q2WXvHUTpHJQMScJx
wQTCA8Jk8SgssJdkVTsTfm9xuYIRXib5KUmAB6N3B861tB8r39C1oeHWmtob
36+9uar64c6D8lsHSnA4onKeF6yux4dOXlxTf2NZ7YuqnU/W7ejfsG3i3HWV
ieBOn6Z8TTywWCxOp7MUDxbJ4AI0JosfD8xm61948LlpJh4s6LK/c+LBxLiV
8Qaz2XxxUo+6SPAgEk6YTXgpznAosQjxwOHxmR0ewAOqx78sHiBUXLHXwAO6
7q2uCQpxT4K3KUpaJPms8+bx2tbzjdv6fjp4tf2n7l8OjvcMRMfNKTfDxiHf
NAMPJvvnRN2rdL084oIoSgonweX0AidoqqhqoizhoDp4aVCdRt2EfABCoIZZ
SZJKUWG2NDseABtQPFBRMZTlX3gwNU0LskHxwOP2F/BAL9haSKQpTTJcEzNs
asQ8cvJqT8Oua2UNQ+u39K2q611R01e+qbdi042yutvrmu837+xt2GE5eVmE
Xjwoa7MPjbrc1/r6mnc/qNza+3397coto8cvC2YXlC4obhmFy+LQB3IWqYAL
HAmpRKc8QDlJ8orNF35nczgDYVYi9ySriBNdT15c2fXL4crqsxU1l9ZU317f
OLztl9TQGxRlgUZQTkS8lBgZG9hz6PJ67HUwUN7SvaT+7sbt7uv3URx7HfCf
P5H2E9O0WSEGHjgcjnQ6Tf9k4MGCDy5AC8BykoEHxoJciwcPWJYHPAAl8hce
fFaiMxegRtusLtOEDfrCCxuGYS48GH1vgpYnk8mV4gGaO2j5V0gUD8KhOOSb
3eYOBmKLEA+cXj/gQTiemic8KCz4rhktBQYEaJlZUSj4Hohyxubp2X/it7KN
5za03GjYcWpN/dma1sfHzweevso43Vw0rvI8XRqlgAfGoLVaDD5OUEOXFRUu
S0NQY2uCjPcVspqeppa2QXTOF8WDjz3Uh/Agkcn/hQcfSKXeibFYDFsPPFPx
QKcmJo3GP8SvEvrvsWzy6fuR45fut/063PxT34bNt8o33a5o7KlsulneeGtN
U++GLR3LNvbVbX+965Bp3xnH4YuW/eceNO+5+l31u3U/Dn3b8Kh2d6rnMYrn
oKkQNYlDWoaERcojjSfRsuht0cEvwAM7E35nsbt8IVYkLQZZMhbK3strN3v3
Hbzz8+9Dv+wfP96RvPcExVlsgOAVvK5ThnUNPrrR/tPldS13N2y9sWLTxW+r
HrTvyzwbQzwuCfy82VlL4x7QHcADyF673Z5KpYw8n/YWvn4qxQPGFwI88AdC
OH77IsMDjhMsFhvgASgR6pr4Fx58SqIRbqFGU9dEwAO6tN8CpTnx4O3ImMvJ
UDwg3RZjRZgFSwYeQKkDuPL7Il/D1+VD9zM7HlicXooH6vzjAZlliPFAgBeE
SIREUU5POO7uO3F8bcON+u29tVsvldVeWNswvPeYZ2A4a7FL0ZjO8cUwSlPx
AE+TVHEMHLx2N5kXCVtORLk8HpJmOZTnyVQ4vDwOPofMfP/MCjU7HlhdjN3j
T2ZZigd05gI9cz7TvxgeGAlqLOABKC+MBzkSkEEvPgcqLF6Pg7Xj8JYK1q2B
ROb1eLB32H7uxuiB8092Hhxs+/Vuw65bG/Cay3c2tg1Ub7u7fkvvmube1U33
Kjc/WLdlaG3bw1Ut78u2P/2uebTlgDb0DmUluBo0sxIJnAiCIykVlm4slG+4
hbQgAxiMmm0uJsARtU69cJREOm6xBV+/jb56l3g5okzYUJrFyzlBuwJskBU0
b3D8as/15p1X17ferdp2Y03zreptlvM3kTcKpQSUoDRvKs+gAmMnmUwCHths
NgMPjHK+4HgAAhkLeGAy233+4CJ0TeR5EdgK+nF/4cFnJQMP3C4f8a9LLU48
GHkzCniQzeapPROvE/0XHky/n1nwAJpE0HSRRFpB84IHRsDDwnAztlHAi6Fr
cJLlMUSFNbsfHek4u765Y1XdzdUN15ZuvLamfmjHb9YrPel3EyiZJtYAvMK5
UsQDXSt6PfICDl0rSiidkT2BvNnOjtsls1OxetgJm2B1o3AMsTyeCscDKvCq
IqnFVCwqOBbf3E8wOx4AUwEepHKcSsbQCzMXFs41cfHjQTwed7icUN7SeYIH
xnPgBUEwHuA5BZKgCDx+m7yEUjkUSuhWv/TOlRx+67k19PZE54OdB+82/9RX
v/N+/a57G9rvr90yvK7t5fptr9a3v1q79W3ltkd/q3n2fYtt6zH57kvkT+Kg
i6ygwqtXSABvAEUJz6LVJFkWJZFMwM/xEo7+YXV4vAGOzlzA82oFneXkVAYv
zATlJ5PDbgzwRVbA9wwX80X8Q8+eHjzb3bjzZlV7V2XLncZdbw51ZF+O4XEH
QeF4cf7i8hox0kvxANgACAF2po0pLAY84AXF5w8DHjC+wCKMeyAIks3mMJvs
Xk/gLzz49ERXrMznBMYbBP0bj6UBDxahayLgAQAMXqubJMhbMm1hUeDBYh5c
cPuwBz6dv/+V8UCm6ClrKJh0dz/oa/u1Y2l199La20uqu8vq7zZuf3bgpGdg
WPGFcGAEVSEWIeLoqBXxQEZkdpsATXdmbOL91e4HB44/PXRm9HTn+1OXX5/o
mLjcnXr1FkWSGA/w0kyyJomUCqAM4fmSH5/5NTsemB0ewAPQdBQPiAPDAk9s
RIsbD0Btub0ely84BQ8oVckKDfCHV2JXxIINAbIUFGwOREUpGflT7FuH/+4T
6/nbpiOd/XU772/c+qCy7WnFlhcVm1+ubnm9snlkRevL75perWx/U/eL+ddz
gZuDuRGT6g7p4SRKc3ihRqA5ycg/7AMD2QbqABoQAHiG8fOsUHSSwRVAE4oL
QEiymmehEMp09pGkhV5PPDxw9mbDzhsb27BNo3rr6/1nIoPPkT8OP6GLMuDB
H5ko88n5WYoHCC/FlQI8sFgsiURikePBIgyqDBXHbnf+hQefnUhPjdYgyLpE
PCPLC9gH/tDgAtwezxdmMsIJiwQPFrlrIvSbSvFAQfODB+p0PMBz2WSpsOxO
RkImn6/z7uPWXweW199fXntnZf2tysb+rXvGr3RnTHbEsgircoVOT9A1Y7Fe
XY3Fcnarc+jh4xOnb7T/eLm6+VpV6+26tjubdnRVt9zZstt08Vr+zajsdObs
9ojVyhDfrc8JV/5xPIAXTRcl/AsPJm90asZCjYVsZ/w+jAcscTvRjYXNdcAD
PJ0EhyrSeFXkFQFXcw2vvyBzim5MNsiqKJRFZj96afGcvuHYd+59y29P1mx+
+H3No2+rXnxX+/L7+tHV256var9XtuXuhm39bb8+3n96orPX1/ck9vBN+vmY
OOZBTBylWCRg31TsnSirXJ6P+MNumyvEBMW8QF64Sosr9V+llg1OwtYAnpbl
HO8Zfn17+77zqzd1rWm+XbV15LfTiYGnyBPCHIKxRwOgmGc8wCGhyOxg/Cup
ZM4K/V+LLZ5MaIW5vAYezM9NfEKaFQ8W4YqNFA8sZocR9wAvn/e1b0ibigf4
zU7igY1xOX2LEA8QWZIpFIz5mBCNcLuAt1OCB6gUD969HYfbE4XCvWE8UOX5
b64/lAp4EMUTG50uJhxJLmxnbnY88IUdbn8smZtfPJhiPcCuaCodcQadIMjY
GBvJ5Z9PmI929i6rvbes5vaymmsr63pbdo123sxZnNjUTALaTE6TLJgO1PDI
+1cXOy82bTlZtuH6usahTTuGa7f3r20ZrGq/tqrmWuWmp7v32y9dt16+8ezE
mdv7Dw133XCNjussR4YENAUacei6qtOXmtBLiWY2PDDZ3YAHGVb4uniApoLB
LHgQJHgQjsSgQZ6vWffFpBdHeAp5VZKHqjrpfoY/ygqbygT9IcCDJCdO4gGe
XYQXbib2f1FVBInLyVwODxhBtx30iKRJgiqxss6qhaBXeahULLKG0HNL/uKA
dfuhl+u2Pl/V9HJ547NlmwaXbLqzZFPv6pb+mh3dddsvrG/u2NB6bdOO/va9
wz8fHTt9nel9lHo1wToYPhTlYwnESlqKyzCRgMUd94aUnIBX8CC4AjcINwRC
6wVeP5p4G4qSIqfzgVfjfb8dP7thc2dNe3frT8G7j5A7hK0TuKwSywNeK/TP
NpVFfaFPCSoOHFVYaAKUGO6JK3gpLsFiZ8bszlA6IZGslTSdzhDQtc/Wwfoc
6XPvny7oTPHAH4hYrE5/ILQIfQ8EQXI63ePjJuBqGTvBaHTJ3Y+mP72wxZS6
XHzXerH/otMIITwnM96gzeoy1lxYDH6nqOhaxuZFvz8IzU4slsADdiW3ZNDO
12keQelTNkBoMuCkxx2YGLf5fWHIRuOuNE1ZEDyg5ZxO3gG1E4wmJky2Casj
msjO31jkpySDCgyjOscJLrffbvdFY2m5MEGQtPkaHRwsLGvwZ+qvrhVGffUS
QsAxKUgoXPwy8WoL2FFcTaTZUeubHb93/c/ymytqblU2X65qe3Pues7KIEEn
y/DqhTjo5Bah7Q6+GBnaf+xa3eYrq2v7KpsfV255XdH+urzt0bIG6FTeWV53
t7L5QcMPQw0/3Kvbdquy8fi3FRfr2kYvd2veIMrk5EyWzL3X8Hi3WgydQFSd
Wuyw6sX5CPRt0rBIvnD8vcnmCUSynEhxBWvDBS1vVPIsXkTD4fRCqeNEbf56
rzTBA+fxVEFspyu+F524/eNPgqKy2CZAckXUWH/cb4XOWSzJkz/jrCRwmGe1
eBwl43zA63//xv5w2DX40DfwiHv2HvniOLtF7CpAQI6s7wxwAVo4LaOkgl67
vEevvmze+3Bt+/2VDfdWNfSUNww2/XhzQ+uNjZu767Ze3dhyvWbLlQ3NsH+j
esvNmra+1h+f/3LUdLLTebnbdb3P1fvQcmfYPvDU9/x92s4oiSx2jCSRu4qx
l3WlMJyFhZKkzokTT1+d23twX/O2K/uPvu4ZwAGa8gKe0UBXRi+drfMnEp2d
TdWFrpXigYgDeAAPahhQIdfjSdlsD446nMFMgppbaCSThcUDVfvXwAOeF10u
z8SEmSxqoH0tPJhuDJwTD3gR44HNsUjxgOVL8EAsuSWtBA+Ur2DMJ4uQFPGA
NH88p7hdftOEPeCPYrtQ4TSteFdfO5XiAdRtaKjHzDaTzRlJLjAeGCWKxlxF
ZLavyxV0OPyxWK4UD/BSCFMXPvoz9Vclkwvp24DOoAq9WhylBqt4HVATh7rV
oKvIpdOS22/af7p3WW33yk031jR3btj86lRXetyDOB1UNLSDRN3oOHwuKL9w
7P3V7ltNO66X1/eWNzxau+Xp6tbnK1telm1+urL54aqmO0tr+soaBtdt7itv
7F/VMFTW1LO89ta6LS9+P5149AaHtcHr9ym4laXjy4pWDPJIdBeRufBg1Gxf
VHhAG2G4H7cvaHV6oNRBt/gr4EG2iAf4hzRqDcB4gHu2REmRCLBIzQqcJx6a
8PqYKA4lBUc5HaU4HPnQH5HtjsDTx2+uXL7x4+7zTZs767dcr2sf+/2c+mwc
JXPYb4RUZ2o7wgkeLAeEoKgv7ebDnY9b9t5f396/unlg/eZ3+07YOq69O3xu
5OCpNwdOP9i59/62X3tadtyobbu8vuHimvpLFXVADncbt99r2T2wec/dHfuv
bfvt+o8Hn1/qTow58MpNpACU4kEBDEgHHpc9eExB9jndT+4N9XX3vH36IuD2
Il7CJVlScSkyBtS0P/0CIBexqAUs0OgsWqjJgAeiBoClidTuR/FgzO4KplNF
PCisKzE9CBE9+MFb++J4wPGyzx+mExsXJx6AdjObrdFonK45+BcefNIDqFjy
ec7nC0AGxuPJqVPFvzYeFN0PcKIxGThWdjl9FrOT4gGNuLvgeEAjgwHAByJx
igfRVG6R4IHh15TLsYAHTmcgHs9jyzkJSvBl8UAlJla6IjNRrhqeGpYVUF7C
XuV57OONV2ISyGzEaMp+6MJAWWPvqobrZY2da1ueHb6UeGNDHFbcOv42WchJ
lJAgcYx/6OiZjlU1XUs3DlQ0P1i35c7K+rurNg1vaH9Su+NR9TagApCB8qbe
JdX939c8K9/8bP3WO2vb7jT9+PTg2fRbE3ZilzGWkI7ZdOsBDcColwwuGHjA
hGKAB9BFz/HSIsED2g5nWMHFBCwON5S6vKjOd3kjEKWKNHSwXvRtJXjAy1Ih
djFoVE6Us7wYSMbtgYQvLmckDF5xAVn9uccj7qs9bw6fHtq990p9y7Gy9Wcr
ai5U1J9cuu5u3Q/ezl4c2iiRwo+HACpVgVZ++ARFIiVlH4293nfmYcuv9za0
D1S0DjfsFAD8rB5lxCKPTAgvx8N9D5nu+9bLt14dOf9437GBnb/fbt99q+XH
G807rm3afqm+/dym7b+U1/1YXnNpz0HHsxFcIEH18sJM0wHFA1z2CEnyuXwi
FImFwlw6SxZ9IEs/KOQ1kEXHCts/iweEUjWC14YOgSzWi3igCxQPEqkpeDA5
uDANDwpul0U7xFw/+4XwwPilUjxYhHEPQP96vT6r1U7xgDgbf9Ko/l94AAJ6
BPDA42ESiZTR96R/X1g8IAMfktPBWC2uYCDG5kVNK5lottB4ALXXH44BHpjt
rlg6P9+9uQ+naXgA+ZjJ5AAPQBIJlhrX6coCWqFp+wJ4gJ0NlKLazYpZpz/y
1hJ9NZZ9b0OeKErwuAuZ4fGKORkOeaPvdh6+u6Khd2XT9ZUNl1Y3P9hzPDg8
glgNEZ/TQgYSlOGCkf4Dx6+srO1ZWtO/pql3bfPV8rr+hu3vfjtuPdoxvvcE
KIt7lS0P1rQMLd/0ZEXT6NrtIxt2Dq3b1lXZ0rGhdeTCdRRPI5bNJ5MIFY3H
xR6fPlmap+MBr2A8GLM4KB6oxbxdcDzAy+bmeRzIwuGGUpcTlK+Ao4Us04ue
K7iHj31IBU0RiSNfXpJkEQhQ12P5pJXJOSOiO8qbvLGh145zt97sPnavdmvX
ypprq6ouLV93aWXVnZq2gU0/dK6q7Vxe29/6s/fOw4zFgeNX4GFFDfBA1Emb
Kegoyfv7nw/9eGiweU/fhrZ7lZtfbd+PrD6MnYk8tvYDiIYSKJhA7oBscuXf
mqJP3jD9w47b901dvaOXbkEZ6Dtw6nTbT7/Vb7nw66GJxy+lVA7uXxTFufDA
WI8Ej16S2ZE69V1Rp65WgvGAhvP+c0nnsGgk7HTh+vDwkk5iM2l4lEUkLTRK
pEWLI0DwIDMND4qUYigjPAJEZa4S+wXxgGZGaVikRRg1URAkvz9otzup7wHF
A/UTYl7+L44HuMlUEOgRhvEDX6VSmb/w4MPJaK5hy8saE4wAHkCLveB4YEQP
NgoYvE1gA7c7lErxWI+rhQA1XxAPdFqAocJl86FR67NLN3r2HO7esffNkQuZ
gRfovRu9sWpvrcjCSIANtx8+qN95e0ltf/nmnvKWzlVNva2/mK72o1AaN/XE
tIEdFHEPTs2FIveOnO6p2Ny3tP7myvpL5fVXGtpfnexIDL+QXo0xl24/a9vb
v7p5uKz1xeq2d2u2v1+z/dmqzQ/K226tbj6+ZEPvrt9zeE4EJ+Xzk54zJc9Z
/H+6ayLgAYDBuNUJkJAX5P+l8YBYmgpgoBTxQMULaog6jl3M4siVJFclLePw
WQeeuAee2boGXh/uuNf6S2/lFnhBD8tbHlW0PKxoHlrb0lfe2LumcWB9263y
xq5lddcrWh7vO2nq7s9a3SjPIVRYVgO/D9CQibzpxv2e9l/utRTwYOzXk6rN
i8MUZDnEi7h7zQl4K8o4kBEwRiKHwnEtEJOZoOgK8A6f5f7T5113Bi5ce9oz
wJhsCol7QOBQl2fFA73w4Doe7cBRN6E0YsdUrVhoin/F/PDnvcr1fAEP1Ek8
QDo8POQGq+On4ikeJDMCxYNQKiPRZc1VkvW4fJS2z7Je8AcFUeYyIHwpPDBY
qXTNhUWIB5KkBINhh8MVCkUAFYgG0f/Cg48m6lqWTmeBDUBgZ+pKH38NLkxP
Ro2ALSsq3kAY8MDq9MQz7ILjQbHUqf8/e+/hHEWy9Iv+iS/ei/vd7ztuDyze
yCGHvAPhYWER3jsJScgjj0AI75Edb3u8n7bT9mVV9bRGI4mFXdyNezoyOnp6
erprqqsyf5mVRtMz1cQAGzidgWRSIOKPwIOV2ODPwwMsFmRJQYv7fDCyNDbd
ve/Yha2lVzaWdG6renPgvOviPVPbnbm2W0uXu17/fm2kqhX4/MDGMtDxx3Y3
dm2t6ixqmj51I/neoiUELSvtMrwAKhsbjb3s7Bsv2Te6paprW8Wd0tqhk22u
maea1wfqva29/1HVIUAajzZWvdzS8Hpb08ttjVMb9k7+WgPY4/avZX21h7yP
nqN0N0JGkjIrbK0r/qqe7MiAB6yoAjyYN9s9gQi8358HHnz/xQV0d+IQYBBi
BihDMq9IrLqMDVI297u+8cFj5+63nBitOTxU0jy4o3pk896pLVVPt9e9KGiY
3FT+aHft2Paqgc1loztqQdaPbKkB/NC1u26w5cSH7mG4AzxLzkZDIvkdSb1u
H+yq2g/wYKSgfmJ7rbntlmB1oTgIBA94pD8zLG4hVrIBJCBnyAxOiZxBq0Sc
zHqCMYvLt2gN2FypSEzKiPoiyUp4YJgOUDAsEf4qCj2TcKkIgoGz0CD7UrCB
7i/3MC4sCTNIWRMeAEsBkgg8MNl8s2anP55aAQ9wXolsqA+K/cDOncIPhAc/
YUkmmL4geQEeUJSfZXmiY/5nceEPNwIPQM0EbOB2o6IGK+uE/sc1MX/LHe2g
XTq9foAHZrsrmmJ/ODwwCrhoep7bKIEHqVSGiD9Rlr4uPGAlULB5Tc6IgdDC
0ER37cEbW8p7t1d3/qsExPTj4tapouaRwob7JY39RXVdOyonQHBsrZ4sahkr
bB7A0uF+80nP+FMtTCN+ji3/wMNRZLoke16+n/391tzhy89+uzxz5fbs5BRD
UVo8KS7Z37bdgDsM/7N8ZkPtzKb6mW2Nz0oOvig7Mr2t8cH2hp4tVT3l+963
9/FuShMlQUAqmKTl+PIt/+E14IGTCi5YHN5g1IAHaLz93+eauAIeyHo7ZBXA
lggALiOhnZKiQ7Omp3e6u1qO3y5t6Nhe0b+9anxX/eOS5qfFLdO7G5BzyOby
zg1Fw4W1DysOPKk+8nzvsfGtdQN/3zO8cW/nxnIYMMMH26hn7zQapCQKiEBJ
FiVNDiWeXr/XXto4VXMMbvhgS439fEfG5Uf2HkH3pBEBJMi4VTwKfyDGDQJj
dGcYURUTdIwKhCl/Mp7gMwKgKhZG2FrwADbAA6Q8hJgtE6ZmcztJxG8ne+br
yLtl18QcGYL+Br8KHrBmm2/e7AzGaFHR4QHmgTjRyCpsIP0IeLCwaPk54QG8
y1AoYrM5vF4fTbOkKvF/4MEfbqvhwcpkMt8bHqwIbMSTMCewMZgT2Kj+2MDG
nx8eiKIIMwLggcsV/GbwgMhcxGWlYHi+fxR0vTtbK0BwzxS1Tm2tn9xcPbWr
AXh7/7a9w0V103VHJyoO9u2oGS5oHC1qHi3e11vUOFh3zNb3QHOG0YIyLy3D
A1VLO73M43f8wzfJFx+ic4tMKKDJopZKx19+eLz/9MjO+skNVU+3NE5trhvb
2TDTeHL+xPXnew493NbQs2nv3d21kycvRt7NgSIJzF7G67uZbOYHonVhNPIp
eMBm5J8EHhACeIDyXNld3w8eEDmLH6/qogjBA2SdFXg1kaYtjnddAzf3Nl/c
VtZdWDe5p2mqoH5yV+2D3XXjBXUACXqLa3r21D4/deHjpTuOO/3hzlHvue4n
xQfG/lXxYvf+qZ3NHRvKhmqO+h+9Ri4oMloURhxR1ORAfOZy5+2S+ofVxyZ3
1U9uqnJf6KRtVG7CAeOAjP2saVHDxh6VSPdkNGZeMi0uLvoCfpL7SFppPdDZ
dTbaEWVnkETYS3hkQDdzYgaVA80pKmrQX9/w0NIXeVH1CEXTI4NVGnQjJOvV
DJxLpfkFk3PB4gondD6DS+uiRRJZ4iSRVVUuZ2VB4pUMnWFJViV4hCDoCeVI
vvGv0XB8N2UZHni8AasNZeT4CV0TYXiA5CXwACXWzp78xo/Nhwe5DCRr40Vn
MhnJYnYsLppisUTut9qPhgcaDpvFi9ROQAhG12W33P/1vRcXCPtjGdFmdc/N
mvy+CEp1pRG7kIFbvvdmAGaUilXRgtHE3JLF4nAn2cwPhwe5iwvQRfBaAR4Y
vgfYIxvNXEkRV7ofLP+pL9py4YEaibmnnj44crZrV829Xyv6/1UGWvxMYQuB
Bw/K9k9U7hsqa+4va+krbRmrOjzTeGqy8nDXrtp7pc0Th9qizz6iAnzIG17C
95V5Fi83xDl0PkmjzIpyBvHQQIQaf9JX3DS5s+nhr3XD/6zo2VAxWnX4/fXu
+OSLhYOX4Llju5rggqF9v4VevEfqKMeJmiQgJ3z0BB0N6ONaNgIbCTxIcSIp
1+gJRJIMn1nulO9Qc2HNTiZtQ682zWVsLu8CqJGhKCuq32G8Yb8SXCs7G+uB
gkUVUeYZLZWKflx8fPlWR0VTR2HtUNm+ibJ9gA0eFzU8LGka3F3dsbuit671
xa0O18xTzuEQXV6NCmv2AD/0dK7p7Mym+qe/1k9tru/7de94zfHo1GtkUBc1
PSpW0DKe8NNLne2FdWMl+0e3VE1vqQV4wLuCpCgMAAPCOIn+RYCBQcryscow
jN3pWFhaDETCvCJhVLBsEVl+o6q+W40BiIq+Jn15f67Y4M40p6QYBfguy+uO
HjBgEUpSed0UkIUHJpMLEEI4xhBTkpy1HigyjxCCjAgle5Z4AwlnJF2fyk2K
8hUlzmp4EAxFfkLfAxgtBB6QxQW98d+qHLexfQV48GOzJiLmLmrRaNxqtTsc
rnSaUXMSff8HHqze/s+CByRywYAHJHJBVqWvBA80kjcZcUpekGweW//E1L7f
722vvr+z/kFhy6OS1vGChqGCuqE9jSNVrcP1hx4eOz93szc89Nh/d+zp/jN3
d1R3go7ZeNw78kSjonq2FySHFZgyWExIaJUZSe4MqdykesPU2MzY3qMTBS3D
v9YObq6G47dXO/2vZzVPiOmdfl114v7OBgQPGo/ZRh5qMRr+OfxlAg+WM3Gr
68IDi9ML8MAbjAI8EJf75MfDgxQrGPCAk7RvPd6IrETRi5pMaxLgMx4nRkZd
IUnx+aXHF27cKK65ubV8sKThQUXr5J6mkR1VQ9sqBwprxhuPvrh8y/7oSdzl
FOgExyYlLo0SUERS7MTL941tMxtqX21qnNna1Luh4lHD7/TMR43G+EPA0RK0
KHsir6/3dhTVDxQ0Dm2qeLS93nWpK21yZ3gRm5hkvWA0fier4YGRYohmGavT
MW9a8kfXgAdq7r/97vAA+vaj2T808bp3+MXEozmXH94qWmTDCcUFYgog/JBO
CwAP5pdcoShtwAPCllUFUACHS9Qp2MKDU4hgEjKS8VAN84RPlif74i0PHtjs
7p8THgiCGAiEAB74fAEjM/+3F7xfDA9AEOd+q/1oeEBS3mE10+VyeQAeKHj5
P/v9f+BB/mZIUiAQZaFYEuCB2e5KMN+wgtvnbGvCA5uNAorFWAIPstna5a8F
D7CdVsKpkRSNlVSrx9o1Mtly6mHjyUeNvwFNNZ4Yqz0y0nD04ZGzLy7cck89
lSxeLURr763zFzoGylq6C+sGqg+8v9olzFk1BoXIkZAsKUNWf/GLxpYKBa+O
aL549NHbJ60Xp6qOjxYfnKz77f3V3uDLj5lYCmVdeGP9sP9816bKnsKG/ppD
r67e5c1uFEeuSIBkeBxnnjHWFzDLzItcSPOS1UUBQgB4AOJ4BTz40YG00B6r
07NosftRbsLvAQ94hA2Q3E6DAqtJLIn+hB3DO8en++oPXd9S0rO7emxP43Bh
bc/WssGi2om6w2/P3fBNPsk4vBrLwvWsJmLvfCxRU1x8/NnT6uNT/658va1l
ZkdL57/Lnh++pH6wawkJWdMJm6FFyR1+ea3nZlFt9+66ge1VD3Y3zJ66Fnpv
yjACGsG8hIQndjDQ026Q2JQ8kADNzsKDYDRiLBnI6/gPfGd4sOTNXGx/UFTz
+5aigxWN5wcnZsMpmEYYJaHkSDhJJRYQAA/MJtfCgjMYSZN4ShxWqehBGDjc
lOBXCSM6BkdFEtcZEW8a5gnk4GttufDASwUBHoTC0Z/Q94DnMwAPQMb5/UED
Hnx7s/0Xw4NwOPpT1VwgIphhOIryA7Iihpdc34P/wIO8LVeYAn/6yeGB1eoF
IvCAcEtd1H49eIAoI6osh6Rzkufn7LaBSVPn/aX2QUvHkO3eiKlzaL5r0DX6
KPZmTkswKAcCKDb2gH9gaubQ2aGK/f2V+ycOnPZPPtPCafQtqruHdHohgwLh
OWQ4wCya+J4lBHHRY+oYnbvSN3u519LzIPpmSQ4lcCVfWZt3Lf5+q2N7VW9x
0/3aIzNt15LvTeieiC3q8GDZgICTQOTBA1qQ7R4/wAMqFKN5MZuYTtV+qCus
hO0+CZqzONwADwKROC9/D3jAKDKXzTCJ6hHApBMzKMlVJOkZmhpvPHqvsKpn
Z2X3ltKubWW9xTXPT12y9Y+LC3YtTmsCyhgAd4ipQlKTOA27AQYirp6xsT3N
Y/8qe7mrZWJHQ8eWyo8Xu5DzSUJE+FDGUY2CJnojL2/33yxt6Cisu7eramBX
zeS+E943syLDwXtA6Q2xoQkdZ0Ti+aURL0NV3yNxqSppjrW5nAtmUygWRW6H
WYfD1TJLzcKD1Xsl68SYu//TRX0MeHDw/Mjuuov/Kjz6P9sO/mP7wdaT917M
hdISGqLYhkCCtNBz2LRkNXkXFuzhcJoUjl8JD5BOx/EZLqMCbgKAQWpXkhlN
fA/05Yyv53igZeEBGidsBuCB3eEJR2J5FU5+BngAkCAYDIP+i2qZ8br95CeE
B6FQJM818YcXdIbXRsBVLrLKbv+BB/lb7mjPgwfid6kRut72A+EBQkocj7gS
IIQEl3H5BYuHM7kkG6V5g7LbL9g9IBdQ6JmCEiyjuHV/lH76/v3ZWyM1BwYr
W/qqDyx2DGpWH6rfhFgbWoUVM0iaMzhnM3ImR6sMWPmP0LTJnVp0AvGuICqi
RxRJXtScoVD/1P2aw/2VraMNx1+cuSHM2tE9kb8UggdM1oCg+6uvggdMRnF4
AwAP/JFErmvizwAP4mkW4MGS1QGjjtjgvzU8QNbtrNeBSHoMugkkUDjt638w
VnOwfUvJjQ27b24tHG1ofXf1duDZW87pQzEInCSleQHnlYLfMsRJm2bTC5YP
V+4OFNYNb6yYKWzp3YkKKtkHH2oxVqMlEr2CAhPgnSRY9/Sb0d/Ot5c3XdhS
dHNH+WDrMf/svILqbQFSEZApCfECFSEWklAIC0DsYSgT8Q3dxnCs0+0yWczR
eExWiQPjGj2cJ8Xy9sRrMW//Vxbxyc//321H/17ctqXqyqbyi/+1+cgvBcdv
3HsJKIlTUdpIkcxKwqJTks1MLS06ItGUiochMqbpiwvIdEB0dtRtaW3Jlnjx
3vP8rT0QjJHHAXMw2MJXlDik9CWBB5Qv5HB6I9G4kTvq54EHIOBAMfd4KNjD
seHC+o23L4YHIIWJ6T4XHvxA70Q9eJATfL4ACfpQV8Tz/gce5G9rwgOTzRmn
+cz3rxGas/2QxQVOlo01XN1oi+KrsAThMkidF3GxA55HtQ8UhZNFNiMg9TOR
Fj6YTbf6HracuF+5r2/v/hdnridfzwG6QIZRERuNsZTgNBRlBv8OR7Eh2KCy
SDSogihzAhBOnkyq+ciAHMTXCw8OtPWU7+urbH109HzmvVVL8LjCrwhqJ8AD
DiEEVdS1v3x4QPIeADwIRJOcqPwk8ICkRYqlGACiKAdXPPUd4IH+eJI6W0J2
aQXeY5LRwkn1g2XxUkf/nrregqqxuv1PTrSZu3rCr16zoP4Q30KSc9mIeSID
I5TyTj2bPna+v6huePveicLGe+XNU2euxj+YUKUkHmXnVkk8AsElgaTjwZOh
o23nCso6appf3OpIutwKrtGAQCaut4UzM0latlQuGduS3mGyAQ/MVkssEV+T
2X6O/FLX2f58vxJ4sPP3f5Zf+aX86obya/8oPPf//LK/5mDHgptHWQ+kHHig
6PDAtOSMRdPL8ACPSQDOKBM+VofZjPb2g/vitaGmA1cb9p0dGBj3+/1azrIC
PDRn7fivbqvhQTSWWA8b/EDeKAhiJBKjKD/sSVokEt7yjR/7xfAANHRjGUi/
xQ+FB3rqIZYHbOByeVYHNv4HHuRtuaMdGvqTw4Nv7Zoo4tTwhhM44ci4SIF+
L5WsAWMpzEl8VOJAOiNpHwzz89b45PP5C3dGaw8O7N03sv8358gjLZDQaBnl
1MWzSsXVrxTsjaAKMplejChiq4KW0pS0jGr9ITszaFyAK8IpadYyevB0V3lL
d2nzQO3h5OP3KKkCDm/kMTwgCEEAhKAqBjxAFuNs1kS3P0zgAS/pIwx16U8A
D6JJGuABysGVSJPcON92vGEoqScqAonLCSlfwP92zjE2/e7CnfH6wwOl9S8O
t7m6+iNT04m3rxN2cywF6EHL4i0MElhNDfAo/zKjKebA7K3+wZqDA8X1IwW1
vbv2DrX+Zp6chj+moRSFEmExGZLCSkJZA2VvwDIxPXXx6qv2rtCbd3IqgWJQ
kJ9phvgYyhKPL0UAUcHx/rgKFzlA8IBlWbfbbbVaE4nEisTI6vK/NNYR1u2J
bwMPfq2+tLHq8n/tPrO5qqPi4PjfdlzYUHSuY3gurWlplGgcJUQgawhCWrOZ
/CaTKxZPk6cSRq2i8tR6XEkyo703BX6/MrBxV+t/bajfXHiouvHo8zcfZDxP
eUHGAR0YHqwS2J+Q6Z8gKbvCleYyPn/Y7qYAHqy5OvPn7v+1CP47NAwATCQa
53hkaUF+TN88sJFsaz+FcEgED1QN5BqCBwsWUNJ/KnhALFccJxjwYFV7lOz+
O7lm5fSMjkutNtfsnAmGn5DJhQd/aXp+UYty9qvhQZzAgwTN/Wl4oK70g8pH
2mr+ZarxOWeaS3ioqXmBjU7K5qSiCUbSlgMbQY/OKdKd8xx15f9VP7nPNoET
JYZFAYDIy11WULEeRcY+YFj3R0VuSPyjkhJZYtvnM4LfYksuWDSLNzz8eKLp
xFBla2/lvoXbg5o9qMU4LS0iDzhcmJrneWRtVnRxiIILZIHWtIQmp7Cgl0k7
sAlbo8Ls24WRA78P1h0Zqj7UU74vPP5CC6SQWiXp8IBgA6R55qSJwEmnyV/Q
PIGw1eFFBvysciQT0PMnN+Wz92tvBB5A8wAewEjLhQffdlNwl/LZYcdmAvOm
Z+33evcd6y5rurujcnhP03zbtejIQ+bVO3ZpifZ6w/FEWtOXzlnyW4wQtJiq
RSThhenp0cudu2v6CmuHi+pu7igfOXM5sGQhf08QM8tJleEmDCsmaI0V5GDY
/2E2NLeACkPLKGOBJApkwR1QQSaD4IFCLBw4eYCELiLH+fAgC1ZXS0aii6z7
doxli5X7PzckcC5kXKWxY+JlS1vXf2079vedV/Y0P9pQ1Pc/O642nBz5SNFp
1G1CTAwhB0NJ87tZys0sWBxhOimRicai+qYydgtJI6iseUXtdNfEpqqT22ou
bSq7urH47D93t1zuGkXOpZIWS6EkETRNkkJlXScw5fGfPIdMQNGEDK9OchJX
Z9WNh0mOo4IhO0iRUDjOMNA83V8oCxJJeq2cO+s5GnTDkroi/9aqZiDEKOCa
77m/yiURO4rreR/wAak5QfYZGS3Mef0RXwjmEFoFJj8x1KI1KZe/5ieIMboO
dyQpfLz6W70QXs498UjPgtfsG+AFxUuFZueW/IFQbtYIVBcVf8xrmG4ay/6c
LKIZC2d5ZKyyEd1wzW/Xu56sWHF8xuX2Wm0OgFjkzOr+Mfikgpe6ctIlYRUs
a9z7TFppl1jGHnjo4imUrQOT5ninlwIR7Pb5aV4gExIhBEnNlkRZ81YKzoou
GbTeo0meRuOavG8RzFQzWN0WleXXor9BUQYlOAT95nR54okUvEq8iXlPXP//
KqIokOwBHHILV7I+YDJZ0DdeGBmHEsqkhq6RcA/opZOxlg3PhJfIIkUa/wKk
KisAK7C4XDYfFUokUDFEZDfQPZ30gZtba0afAIY1bLUrFt5rWNQj9iDpDAOr
OFruYMCtk5CCJ2WQFRgUPORWKKImE3yiBikfZbJxzkDy1cL7C50P6k8OFu2b
bjwdHX6mUQnkICjwGVXUXdJzYAkeFQp2XSSsCbN7UhIX/j0tRGbePDx8YaDy
UNfO+tGaY4nxNxqVQgERCoojI66J6DcidoHDqICs7JORL2QkbyDocvvghZIQ
reV5rVtlFfKvSQ+glV8UGrn2+13Rn3+8X+XUld1I22hGsFidZruLpHNEoAnn
a1pN+nvJo0+sCq/ZcLIiwGUNCCnO8fztyOmL14uqu3bV9G2rHt5R96jy8Ozp
m/6hR8z7JcHpE2McQ6PYOejnoCAkiTcOdH5C0gKcp33s/p59wyX77m2vvr2l
fPTQ785X7+lYQsMlkFBIPlFFGVo1ohPRchJ2wUcjNhfTKliyk1mSv5ezswc6
NJmiLVb7kgktLqA6PFhtM5YhskRmt/jl72utfl5/vi/PLLy3hOITry0tJ4d+
Lbq5ec/gxuL7/9zdvrXqZu+TpYAiMZoQ5Hy0gsqKB32i055esDvdUX+CZZMM
n0rzLKvQvBbjtbCieWXtGZWov9z/t7JTv9bc2lTZubnizv/a3nLo0j13SouL
qKoJgnik6oQgACnALkQU6gnSEwiVsJBQSklOBq4Ek1fJDQJF8ZIK+pYRBbgA
Y34dy0m4MlcwHveGQrAHqJDJ+ZWk6e4r4vqUUZcp97y0DuV9S+4gKGtcQ76C
j7E05/aHUTgSJxo4JE/65wnf1SfVdWjNOWXgr9WQQ1/qzX4EeED5wqSgFY+D
pYjoJ4t6uXfIG7W5otxACGuK+9wrV1+z3vWkNjfsff6g20Mlkmm0yPgHgauf
GPl/kVA4M3mMnIUHMPA8weCizQZjj4i/FaAfbdJq+lpNwu9EL3+m6AZMOWuc
R1lHAB7YHHboujTNfk7/rIkWJAQMZCbrOLcqNj+LRfFXJDmazqKQSZHnwymZ
FkDFFgUJUAHqQ7RALybCcafX4wz6gqk4hzIHLsMDVIcuS8B4FUwoihAJlwxO
MrCSULy7qJOcwaqDAKRbeomxV+coGL8jTJVBxRiQD5mAQQJ8lFDQOs5pQ1F+
m8VO+2O82evqn37ccm60+OBUxVHT+e7EzActnIQn8jKnaMsQK/f9rjSAZHtV
RHFzkenXU4fOD1Yc7NxRN1Z9LDnxVvPTiPFJEody3GMZoOCuFFCvIttsDjyA
6UnmAsCDvBAtvHSC8iQQyhXExsk8Iv1pEHZ5EInutRZJeXqC7oGv6lwikWTm
TdZFiz0FOjUuGPpl83G9Wf0JzCBlOwpZgqTIvOXJ1fb28sbuHdU9myoHN1eN
7EZJj1+fuukamk59sKp+Wkmj4ckj8w5SaZGvc0YCXCu8Wnraer4bQEVhc8+u
up6Spumz1+NOT25CP3JAasqvZ83/sn+gagQemMzWeDKBy/QREJyHDXRaXyKt
R1/IUpAVTTSmlS8tWPxM1/B8SW3nP7ff2FrWv7Xy3v/sams+0/Pa6Q+I3AJl
twK8jzNeT3rJHDS5PBaf2xMI+4KxYDAdDDKeIGMLMl5We+lK3nw4v731xv9X
2LappmtTRd+Wyrv/LDp24FzHPEWHWC3GqDQnwbxLJ1OpSARRLJ6IJRNxOppg
Ykk+mmKjyVQslYynU0mGTnMsI/CcmAHiJeQyRPNcimXgK9jDMXybZFhQ30Br
i6fpYDTmD0fCcRikbCyVTtBwJZtiOdjDMRzgK0VAtmxGBuJEhRzAGULwbS6l
OXi0AsKcEGgWAmBIVbc8rEACKjEvKMR6kFEQcib3J3dGTkmJtNPrd/uCCZoj
P4fpI2QUoIyoEnVeB6GKfrCacOaVNWwFqxFCrnnGEOu58JycJAcsJ/oDEavN
BfCA5QRiKsy7Zm2bxjrmgtWAgZCEE4bnfrueVYGQoTEFgmFoG0wlokzl/QvS
YGl9X451p/MXbki04f+MVpyxCSgtCFQ4bHI4AB7AOJSy1gMiNNe7D3HQNQyA
uSfl7Ja7jJJ3vWEGJFowTg6BcsmibPMyDDYJpCOxpcOksLncHn8IBqGavc96
ax8qDixatlSjH8hwMxln/QURS8s8o4gkkEoj/z8rA9UsNoano0guOGJl0RWi
Xs4uTT5dfPjc+WbW/WHR9XEx7qRI7LSUoP3+IPRbKJEAZKW/ymWtV11Wd7Ip
5taXLOucNyYMmTPqGlcup6jJwj9AeTDYbDYHF0trUSbzwfH61O2JyuPDew48
bD49d3tAdvhBV+e5dG6W8txt7VEIfy/Jhh6+nGg901O6v2NH7WjNsfRDABsc
dAh0O7bMaHpcE+nN7EgzBjx8hLngcntzrQfGXPjC4SyvtrP9EXpcOYw1dVlr
0JCBFLCByeZMcZnv4QlEADpxMsSSUw5ETSNTwwdPDZQ1DeyqQfU0C5oGi5sG
qw6+OnfLM/5UdoSRIVtCXgOsRvIg4txWrObsn4KX0rm1pntXQ1dh4/SRi67x
pxqbyZ2D+mM/sX0hPABKpRmb3Wm22ED3yQne0dWLXPyv/glx/2Vb/s/NnpDZ
m3j2IXL2+tPCvXe3l9/dWd31S9GFrVVnOx+8m/VG3lhd7y0OiztgdYbNdr/V
67NSXjcVoqioxxWz28KLtuisPWEOq10z1ubL4/+ovPS/S65sqR34Z/G9X4pu
btt75uSNgXlPwhvjXYGExxdeWjI77Q7K5QTyOl1up8vp8IJcsjlRrg+3DwQo
tZrsbpeL8lLBQCASDkYj/nDI4/eB6gGsz+mFC/wuCj5SsAeEEEkkHR4vEGhN
cAHs4StfKByKxcPxVCiWDEYTgUjcH47BPo/gpC8UBaKCESD4lUFwZ6BAJAoE
eIMQwBIgQCNAgG2iSRoIkIDxIPIsOOMNhOFv2t0U3JZ8C8+KRJNAsXgaME0q
zaVpnmEzIKxpRoDjPIKTqSSbTnF0mmdogWUyPCcJvAyUTDDwFZzPPZkRFF6Q
OV6Ce5I7wAF8hJPwCDgmBLeFBkAH2R0eombyKPelAEwS5DIcgNglOjshIoh1
wrLeGNIEGCBrpiwBGWDAgAfLmo4KYkYSAPhlBCBy/eqfkIsZlgd27XR5orEE
tA3akIutc9uTXfdfEV+MZ/SKM392r8ckq2QhGAtEgAeBWMzm8fgA7mJoRSpZ
fDqlLP6HSq4YyX3WGoxw1T8i3BGvvslZMtKhaGT1CiArDDMYdQBK0ziGS17Z
P+vdX/8WOBMyvSMbsYo1YqwXy0if0vkWbkFW9mKrPS6SwUtaJBl5vfjmTv/o
8UsDB0/3HjozeOri6IVbj253A1rgTC4tSGsxNugNUMEQvFYCSjGA0RPU65RF
pDk+D4rOytRP7vE1usFBVrK2a4KYCVCW9dUKdEYvSKfiWHUYY8AxFsyWWCSu
MaJGJRxdk4/3nR8sO3C/+ujM79djbxY0PiPTDO4PmbxNMvbwZFCNXl2xAYOP
c8GpF2Otbd2l+9p31o7WnaBn5lBAPY/uwmGBJeDXhCMsUOtgGirZsvWwh4/B
UATgQSyeRKtFObDfwAmkFxTsywFtQ5Us9Jj7/D1uL6n6p+AR9em9lrtfnstZ
W2gsxSxY7Es2Z5LVawco6zx37X1OwuHP2RMTOHm8IpCEv2Jq3jzfNThz5Mz4
3taRwqbJ0taRPft6ihtGmk68vtyReLmoxXlAFCKHEk5mNIXncThqiH57va+7
tLWzoOH61uqu8v3WrgmU60DSMTNB1AZ4/orwAPgtwAOrzQG6zx/CgyyO/dy9
qgc5flb/Z8ft8jzyRRkqzFER9dV84tSlh9tKL24ourCt6vq/S9pOXJt6+D64
FOBdUcERTFmpkDMQBngAaD8cS0cirJ9Ku5wpq4sxeaTnJua39ucFB7r/Xnlz
Q1Xv1trhv+3u2VDSXt56o33kmT3EeqMs6FfBUAz0BT/l87ldBB64HE67zY3C
YSzORavDZAPwaQVasloWLeYFswlo3rT0bvbjx4V5OGl1OgAqwB6ugQvgeovD
aXW6YG+2O+AAoAIIcdjDBIeTixYrTHO4jCAEkPugSTk8PovDDSgXnmt1ekBk
AyGI4vLCRyD4Fgh/u4LIU4AAchDskXcBuclqclEBIKfXD48mzyL3h+aCagfk
8QYA/QBBKwnBMZzM/RZOApQCAmzldvk8br/XE6C8QSDyEQ78vnAwEA0FY0Dh
UNwfiABggt+S+8ABfISThALBKLkAvgJsAJ0LozQciQG7BhYUicZD4ajPH4Qz
wIsIgc4CBECXUCwRjycTiVQymU4BwQF8hJPkI1CKTqcZGohmGaCMJBJIwPIc
fITz5LJoPAYEPzRuSAhl0uAz8ETALXaHCxoDrQICyA0EM4tmOAAPIFzIlSwc
w61ZkUewQ87A80CjFuWvtSdaLcgvAE4IO2XEBMsG43F3IAAgIcmwjJAR4B+i
Ir0yuRKRqOXtdbckOcsLVjPf7B45M4moNqpuKcj5lYoLsqy5DCfq1lbVH0lY
XZTDixL0c6KSlVv5e0nUvUCNM+gpICtBC5QkNZ1OUhQdCmeNnTg0TM6BB4ou
CmWOQ2mMeYVdtD2/fPfWnvrL2ypR4tm6Yx17992pPjBw8NSjMzfe3erxDM+A
kA3bqaA/Eo+l4ZUR7ys16wavu/GoK1b6CP/8HKFDrsFQTRffWEXWGSf6axKO
SyR55CVFt/qhlP0azQugBL03LcF40xhBizDcW+ubs3f7Kw727z00evDMfPcI
Z3VpDCraS94pepCE8YysB7TlvS+VSPwo4598Nrr/dGfZvlu7au83nEg9nddS
qOCvgjIsaVilRXZIkHcKh6AmDDNZd8dAfwo+wtz0eH1koc2w7+mSWtGrAhp7
CXtMrb9XUSoeGS0nYLiLVzFwShtyJm9v4LQ81yxBVYFC8dSc1b5gd0YZLpOz
8kuAZO4+9z65+9VXfuJ6FY9bYqaT9CrCihZNcHNma/fQ00NtA8X19wvr75c0
3iuo6d3TNNr8G7L8mDwohITPpipC8a1a9J1p4uTVG0WNtwub7pTsf9J2m3/n
QK72qLqARFYTMKqXSWWxrwUP4PmgFQLvtdpcwNByMV4OPFhB8hfsv6yf8+Al
/BnopDSH0nKEktrYtGlvy9V/F/xWWHcLQEJZS8/t+2ZLCLkdBlnVFo44ggGz
xw06spBRWVZJJeR4QgvHNXdY65qwV564/2tdx8a6e1sbRrbUjGwoG6w58vB6
/+t3tkBKQt6+wRgNiiowTzqVTgNHiMfi0Vg0Gg2HoyCnqEDUEwgT64HH7zPI
G/ADOb0eUG0JuSgvnPGHQ8Eo0uWD0RjsPf4AEd8uygcfQaMPxxOgmDg8XoIf
AB7AR1DkQXkHMU0ENMEGRGobRNACJg/c1iBiozDsEgY8gPuTRwCBxAci6IIg
DUKADQCWeANheDockAbAeQMDQLthkNjsbhgnIKaNA7PFAYQFtwtO2qwuQFOr
yWH3ABHwQAg+wvn17uNA0IyC5wI+IcCAXLC4ZAY9HcjhdIOGAhLZZLYCtoJj
IJDRwJeA4ALoZiCHywkXArngvXjc5BhO5hI5Scjrowyi/D6DjAvIfQyCRwAz
JCsL5OnER9Hp8pD2kJb4AyG4BpE/AgQAiWAkAEhAkXCCHPx1SsSSoFFGIjEA
TkAw0gAtu/x+m8fj9PnwAEPjGS6IRxNwcTLBrEmpJAtkHKdTHDEHEQJZCQRn
4CuYKNEIACiOXJ+I04alCGYTTMZIKhVNp2FuxRkGOQWxQorLpHmRFqRoinVS
QROMAZgzwWgQIAIr5j0FQSlOIkYngEDEDIES/nCSQPMazQmU3/bi1fPB+x8n
pxM2l5agtRRD1s9AjMmoepwEAEbCy+9ymkaIIsF4xmf6ag9d/KXw5qayweLm
B/Unesv33S1t6q05eK/mQOfefeOtv7++fi8wZwt5QkyMyTAiSlOMV9YEHFZO
HIGE7NpyrqwxaDWLy2O/xk+MM/q22gqbXShRsQeUNxpZcDp8kQiKbEjxWpC2
9j8cbDzRWb6/u/bw4KG2paEJ5IEgLi9c5D449yO5QOfLoaR77PHAvpN3Spuv
7qweaDgeezKLxBA2xBuuiZKWXQPJyfymJ5aRVRwDFQBlk5jRCGxQs52wjo/3
2rTmxZ9Pxn0yOGlhMJlecrotHirGC4ZHwF98xKdJFPWFJ7y6hsPYBOQFLn0w
W9r7JuoOD5Y0APUX1fUVNw5Vtg41HrP3T+G82QkNFdVS0CCjxbn7DzuaT5zd
Vdtdd+LVld70G6uWkFEEq5JfQ/BT2GB9eLC2yxiGcMkUS7g0wIPlxdzly1Z4
e0nrkKyPsjz6k71qAAmSwgFAQkrQXEG6feDJnsaLOyovbd5zfUPB9ZaTj598
lMKiFlM0D0tbw14r5aR5DqktgoqsMgpKMGb1a4cuTm+qvrWxtmvHvjGABxsq
+kpbp7smoiZKTor6BGcyyNaNMkbwuBJ3RpAyKGECAAZeEHUHAJZnOKT/cQLS
/7AeJhKVE84QfRMILoCTMC0AS8McgZ+DYgvCAoQaSArA1XCeWMihz+ErwAsw
p+AAPsK0AjL0X0J5SjEhcqWh/wLBMdGRDU2ZqL1E84WPRGoYBKKNECjgILxA
GYGTcGdoBuyhVeS50DaiqsOV0H4gcgDXE2ENB+QkPAYoGkUSCsRQCG4eDAMF
QD7mkN8fBOkLRO62JpFWwZ7Y7YFIB4ax7CMPhT0gBCKIiXQ2gAF8CwTy2e31
ABFpTo7hZC48sDsdBtkcdiBynIscctFFLsaAR5OHkqfDc0lroVVA0FoDJxDc
AlLQ60HkcQeA3C4/IZfT90XkdFBrkdft9DjtLtR03F2AOQEVADxYsttNDgcB
inb83+BKL6AbKuSjwmsS5Q2RFsIePgYDAGYSsA/4o/CR/AXyLbkg93o49vuQ
/QeZpFaSw4sIwIAnELF7ggsW17zZaXZQcOxwAxYNwm8JGS2BW0XCSXh6HiWC
iYw/vPhguu/3czdbj/SdPPus/Z7pwRPq7ZwWS2ViCS6WJO5DSTxZuDQtxWJa
LEl/WJxpu3pje8XtX0sHd9ePFDc/rD46UXNkov7YcP2Ru6WNN3ZX9VbuGz96
1vHkfWDJTfsTbISmozC72CRyQKJjaTjBghIaYRFFOT7G8gmGT9AcaFuE4DhO
6/sUKwAuSgMu4tDaHCHgJwCTkgKiVEYCvERjvyNe0Jfe5KxhQs1ooKpLnAw6
O+ClJMd5Y9ElGFbRCLAaEeBQnA2/nJ86fQ2wAdC1PQ0jx84mPprlFAAtgFgS
z8E9FSBgjEBwEvbI6VpQGTqTTvFwARKiVMQ6PHWv6fj10sYLO/ferTvsm36L
8h4wAnBCRpFpTWGx/6es6EogsDISQEQzHMdngEOSxQXgGMRoRqxnwO7gWFrp
Za1DLGVdyvWsNq7k5TVuohNCAspKQpCGlqWUJPoSyUWXGxSMCPxd7Eex3nPX
dRFfh9a8GLU8uwhFXHCQFwEIM5D7vij97O3ilfbHrb+NVe+/X9owVNwwsKf5
blHd2IHf393qsYw9Cnyc1+JJLcXRNmr0wq3zlfsvlO6fudST/uBCKjG0nkYW
E2IWI08xjrPOMKtofSvBmiTJyJ8zCw84JbtqSXKAZGl5+VQynEc/l/7YFX8N
t3wMmgBtsWkla6VEFZUWncGDv7f/sutYSd29f2y/WlA1eHckaI1oSU2La5qH
jjiDXl5G0VswGoUMsmfGaO2tiSvdf++/Cy5trOstOPjg15r+f+25u6/t5ZxH
QzWhUf0KHUbqnt3E8qFmg35yrVXruLTlBc0ZC9yGgz1wJ5AOwLRBtMF8yfeg
yzqwETix3rerXe8IRCFr4nqoHXkuPjBM5QTGiDgFClmyJ7MVoR0WtDzgZgwx
CcKehAao2OMOiPyEkLG+T26CrOWcQJgAuZIYq+Fh8EiAUAzD0TQL8CVp2PEB
QjEcOU9jL4Lcp5BjOElYDUJlLA+oiSATAAZApNmAXtI08GqarCzABeRbA2jp
gCqLkSKxKBAckKUBaAuBUgaOIgQPIRQMhwChEPIHATqFCJGPQL6AHwhaBSCE
2DHg5cJ18AC4O1ligJYYpK99xGigaCQF0i0UjBNRS6TtFxERyqvI73ZSLocb
YA28SoTZwpFgPA76u9Xttrj05SeAB6j8tMMNCGE9+EGaBAcOuxeABxxDU6HN
IKnhQXDSYnYC2W0Am/wgykmTCG6BPTlJ+cLI8OX12z0+q8trcXrMDrfJ7l6y
uRatzgWL4+Oi7e2sCfYmu9fqDFrslMXisVpcNqsbCG5uEGkJfGVasgPBAXyk
7BTjpKZv3T1XXnuutOZObWtn4+Hh3y6+7BzIuPxpD7TVB7DMC12BDTiRQFAM
hDI2l6lvtKOi6fw/d93bWTNa0nJv697HdSfeHL307vSNx4fP9lUf6K5oAZww
evD00sgT71tz2hFKuSNhV9DvDng9AYfHB38E9FAgk8sDZHZ7rXiRzu7wENIX
ATHBBQ7cD0AAkMgiHbLL+UMOf9ARDBFyBeEJYQ+24PlCgN7j0UgyFk3Fo6lY
JBkJxUOBaDgYA0TnCQbNXs8Hm8VEeQKxSCgQZP2RtMn9pmNg8FBb//5TF3ZX
Xa9oNI9OR1xBArTgxcEbBHQHow6IwjFUsWga3il5cfAtIB7RHVgamuhoPHKx
pO73HeU3ag84pl4qwUTM4w8Gg/5o1J9MBNOpCEMTIESGOgxvA7EDmS02i9UO
B0SjMVb9oskUw8tpXkowQjTFhuLpQDRJhWKAFeM0vybBxUApTkyyGfhVLM0B
wW/heC3ieUXhFSmXWFUBCqSS0HKrz//OZP5gs7ljsSifiXJCEiG0NYiTtLVI
ZUUFB6/lEyfLaxDOCiWKml7mEAQbIyB9Nc1qVFiZt4RGp2Yv3JxqPjpQWn9v
V9XdHZX3ihuu7ay8UdbQfeDEk/bu5JJV9kVcz99eajx6oqTuWuOJxZFnWojD
iEdT0qKiRyqjxHGgrxKnXeDAXwseiJIWT9DEwAvAmESK5Xp2ZQmJhQxyYF8b
BqzCbDpygy5as6tZUV2TjHdNhoeGEEIGJTRDIcASq2gzb6wFFW07y25v2Hl7
Y8HdqtaJu6NOB43CQKzxsDceTHFJWmBk7P4EbyMtag/fhn8pOb+p5u6OluGi
Q5Pb6vv+e/f51rOPXTHUzbkxgFnf2pyYXBy1I6tKbhz95xPBWioGHjCDbHYn
zBqQgOu9jvXoS5/7pQRNgmkOLJSYBPPc7z9/OK23felwNVYziWUS0AIxawA2
IP5Oip4hQSXHK9wRc2h1DIIBotYk4oi4mgBfrUkE1UDDyLICsEEC8IinwWoC
TW1NSibYVJIDJY5OC6DZGboefASC8/BtIs4AtACWDgQXAIFWCBfDz7PXsMk4
nUqkWQz5oFVsRgTeRVwTXX5/CFRpGiE0BNWSNJNmV6vknyZkE1iLSKuAAPmA
pg+iBySRPxBFPi2+oNsf8gYjVCjqj8RBIgRjKYc3YPcAbAjOm53v5swObyhB
y0la9PvjBjIBpAEYgOATEGdwBgDJ0qINCA7gI5Kmc+YHl29c2FN9q6Kxp/bg
pe3lV4tqHp27DoqzFkslA0HABxRFuTzuUCgUpijG5Qm+ePvg9KX+hsNjDcd6
Sxr7S5qmm05S7cPJ0af0w9eunrHpU5f66g/11hzoaTwy0Xbr48B0fN6d8SbS
nmjA7nPaPQ6nFwCPye5asNgXrQ6gJasDWChaEXN4TUs2dOzxwcklm9Pq9Vko
HwAJG4VgEpwxme1o+czuQetlbu+szf7ebIH9gtO1YHcCYRDlMpb/0JodJkAd
ZpMdfj5nNn+wmOddDmvA58HGv5DLm3L5Ix+WPvSO9rSePL2zorPh0NzABGVe
RllGZwKtCS+DDn98ye598urJze5rDQePF1RcaTjwtGuImjP77chJ2+72WLwe
s8dtcrvMum+Sl5jIAA8sLsFb8QBIgANAy2TdzTAwuj0U8tP2BJxU0OUL2dzQ
Fa55sx0IsKLZATgKIBYFBF/B2CBWJriSkNsPwCkCBFgCCC4m15OL4Z74tkF3
IOAO+IA8Qb83FADyRMJAVh9lobzwIsxeasnrXfR4LL6ACyBNJA53g/vDTXKf
DncjDQAiDcYNCNvcFEwlu9dLjHKA0wBnAcEUAwIoDkSOAUr5wjE3BeAtHY8w
EQqeFNKSHOir9KLlQ99939SMrX/0/eU77y/cenL4zEBZS09JY1dp4+Ud5VeK
ay6W1l6t3/92YMT76sOj9nunq/dfaDwyeqWLemNWQowQTMc90ZgfoCGy00az
1mHDcgvqGGhBQHCSnCcEII2gNWIQDmdXIYkNOc+2jI23MY83aLG6zBYnDD+P
N0Acz4g5FF4usfKGoxGgYDRCBVGfU+GgLxICggPyFsLJeCgB3RIBJQMIYdpE
LJxMhuIpfyQBr8DocONdwx6O814EjBlCoGUAATzI8DiHBkJhAjIgOELHz/Vv
Kbi4vaRjR2nf9vLuxpOT4+9Cbl5zs1wQWJ7EpwVGUEXAb4ykBdJa1/jShoqr
/65s31zfv6t5aEP5jX8VtZ1rf5YQ9eWn5RVD7AdqwAPla8ADw6EXVEurzQGz
huMzPy08IA5FPxs8SNMsDFcY23nwwDCq5KU7yMt7sJq+FDasdz15NSwnkCm2
2i6UT+s0SBKXQ9zyfmPklSIXkBLS650XuAwq44JDOYgtF66FaQh8DBhXiuU4
EVmRkC1JQN6JGUG3Nn8mEdDyaTJwCwpv4TIpLkNjTwMUpSsqPKo2o9GchPTB
dMYbjFvslD8CVyGbKy+gn6PfZkER7IHghnAGABLADyA4gI8yLcSWLI+v3r5Y
XHWzpLa/svXG9sqbO6smjp1DrvuxtBBPJPHSArBPmqa5aIy1OD92D/a0HB1q
PjbScLSjsHa4/sj8lS5t1q45g5o3Is5arIMT0+eu9TUfvbm3uf9A26MLd61j
LxkTJfpTTCCeBASdokG1D8cTkUQaEBc6DiO9HnhfOkYDxwatH3AYijMCOJRI
+RJJZyjsDkWw8xJyvkXOJ/4I5Q0Gowk4CXIN4BNIE9gDwa+cXr8za21Y4TOM
zbwLZsu7pcX3ZtOS22X3ez1+HzD6dCBCuyj/27mZG12XKpo6m48sjjwM2n1k
9crAAMT6ZKxq5ZLP4UtaXWlAME9ej125fbZ+34WWQ4977wcQRnGAeAAkYHW7
iSUKwQMHAgZwEi1juQDGOIGBwEQALmcyWwE55K4/gjRBP4c7YfkLghjYOwAD
YPWADeAY9gZIINesJkNSEGFhCO4seAjj5jkNsnlcIM0B0jgCfpsfYwO3Z9Hl
Bnhg9QfdkRg8yGgJAJUFC4A9p0GGMMoS3NADpPeA0wlkcjjQsp3LRXpmuX+c
yLEcZKtpweGYt4dsvrSdoi0u95OXT27dvXf4t4Hjp0ZPnnl+5Za5c2j2WteD
A20DtYfby5vO7ig7vaP0+I6SM+W1zzt7Xc/fPrl3f/Rm51Tn4NzDVyGzN0XF
Qs6Ax+pBC4feoM8XyCUKetvrc7u9hFwuD5DT6SYE74iEIQABojNbbPCmgOAY
zsBXxpIoXhWFV0YBMFhYtAIRWEs80AABkl/BT3IXapesliW71eSwGQQfMZy3
A+Wex2cQEoaOhW6fXbJ+XLQAwcGcyWYYGIHIezGOyUeCEIC/I59PDA9AlwL2
GUmLEzOmkqorO0pvbS+9u6n49qayq63nxyZnA25W86YY7DyjkiUhODb7M8ev
PthQfu2fpbe3Nwzuahr4peR8ccOV+48XSDSqHqGmb2ukEMnSnynVZKwHAUMO
BEIWiw3eHccJ64rLdT1KPvWQvx5nmslkIpGIz+cDXkp8X3UXl/XgwTqCbn14
8GWuMtnk9gp2blLTDB0Mh4DJ83gpxVhnWZ0t4TNpvfb/OXBFDAgEWX36yq+F
59ZNP6WQJLk6uCLeWQAPQJcBAYmiGpdfyTcnEp/3Ce9uOB9PcRTIxSTKiSQr
OT+UV6QEICcNFCSTxGmyJnh8bzt7bpTV39hdNVi+r2tXzd2dNcPNJ0JP3mix
JOA2gEGyLAoCh0II00zqw9Lwwd+vl9SNtp4abDh6p6zxadv15LMPyPU5zaO6
NvE0Z3ZYx6cfnLvWXnegq/Zof/OpJxe7PNNvMs6wEk2rNAqlhCmMEiyryE9J
ZDN4TVlRUGVDRUUpJFFICCAxVpLQqreYSUtinOcSLEvzyPmZZwWB5jOMIHEi
ypbCoNp8cE+yEsfitTNklk+lUWAywwDB60MfE3Q8lgaZi2KUgN0HAkFk2o8z
aZpP0RrNainG92Z25Pz1iQvXQfHkYmnD0ZS4mBKKRVOrKRVJMFRADUY4t9/6
4s3D3oGHfYOO2UWF4ROhCCiTUbyOALgI+X3EkkBEFSUeU4DeyVIjNI9ABcOL
iXhPIQUkHANEFIolgUikNhyE4ylyTOKsyRlCwUjSoEA4YVA4ll6DQBVFwd0h
g0B7pcJhIGgwFYs6/EGz2wtk8wc80bgvkUJ4DGM2EroFBMfEN9s4BoIDgtAM
D3CnlyK+38SfhwStGwQfHR4vWkoOxqzzVs+sLW31Jd5brPcfPTx77VbtvtNF
Fa2bdlyorHvVfg/Gavjxa3PvxIsrnfePnbvdcPhyVcuZ8vorjQffDoyFZi2m
mVfWVx+oBUvUHYhRIbi7Ez/V5fCi9USXz+WkiLN3Hhme4TarSycML3O9wUHo
G0Q8wwEAEM9wHLYWcDj8VuRDDoDBB2iHrIuRQDNiQyB+X8Q1CzqEhOobRM6s
fz4/HI9QbrAeCbcnbvk5UBDZkYCtgI4D8lpSeQ4mGfLQ0ewUc/HWdNHeqxt3
XSqourt5z9UNe84dvz793JyyRwSO+Blip2JW054tROtODP69+OrGvT3FBx7s
aujfXHrh5OWRJWc0oweofmYm2z8U02uKRR0eAE8AaGc2Wz0eCqb/evDgy7ev
k4YC4EEY5hFFJRIJUpvm0/BgXfH3pf2zDhnwgDh1pOi0PxgIRyMkq4DhCJ2X
ufGvW13WtRKsZ4VQdO8s5COaZojJZT1ThmwEy8v5ewJNVp83gg3zAtPywg9X
ZGFQ9I5FfuMok6fiDaHVapAvJLH/ctfjJD/kzp+5J09ZvSdtU5XsnbN7laSm
UXAfZnuAwADi4JNIspQ3FE8w5AWQ/2I88RP9o5LQxTTtmJrubTpye1fV/eLm
4aKm/sLG+7VHqMmnKGYJpZhGMESSMuj+aTb6+N2d4vqbBXUPD50davpt5NBp
+8hjLRDVoAEMo3GCxnFagk5ZHXP3H4yfvjrQcLy/9uhw65mX17v9zz4qwRiy
ffCCniEU4BbNoHoEyFlK0+IMynKPijWhenAEAoEmwKoScZnTK1arGs4ypupe
d4K67PcGt+Jlva4izlCB4LG67IRPfo7Kr2PfYBh1eC0LpXqQRYl0rhJPOV+9
dz57JfhCmrTce7lvZ/VIU8gzQLtKpaVoAuZbnPKlQ2FU0hG+xZnRkEk1C/kM
o+vqyIVAMEyyJhqBjWQdkLgYoeRs0nLoIsnOAbfnJfQPBJR+Uj8v4rVvXkSv
kcuoKB4NZUoBtCLDcd4ZjkcZ3vRASFy0gpdEIALSOFlOcpw/Erf7As5AKJBI
xblMghdxXjicyIUXyB4lXcmgpCvkGKWbE2Q4phkBpZHBHhTGHmW3wygOuW+x
KIQZpbbDx2mC9JJMiorwrnB61m7pmXh44mJf/aEbpXUX91Q3/2vz5foW28Mn
otOvuSO82Rt8Nb848eRN/+jTzsGpm51Pu4aCH81aOEV7gnGPP5Ok4V3QiWQ4
iKAayteHU/YBrouEE4BDjHgoIIL3opFkPsVShEhCG7gNIWQBwwdwEr6NxTEQ
BYpz4XDaH4gChSNJmK0kO42QISlrkBsY/FMSQg7qG0KJacQJUT5AGqX7I2eQ
sz3NQM9A/8BPoH/gGuNKbGZEt8X9xqMkgcizV98j5Iv6Fhkh0fvKKKDnEI8U
KaOS0jwwUTKSgJ0cUH3Rd4uRY2cGt5We3111c3Pplb/tbCtuunf61os3FibI
IlQQF1AuZVdM7RxbLNvf97fCmzsbx0sPPP61tH1H5aWB8Y9pDvn14cRn2USd
JI75D3Ldf7kExHKf5zMAD0wmy08LD0IgRDyeeDxOUqPrBoQfCg8Mn0/QQii/
LxgO5cEDAwP8KHhAFmJI6gOSMpHI5b/eP8SUZCS0yYOmOUlC8jtUzXrXIldS
FaVFsnu9QNF0miQjMpKLKLhEIYG9n7lfr7XI7RWVRFfzkj7pTyKUAxtQxly8
gge6sMflA1ZGwsMV3ZCXf/+88/qxhHIupOYWHrdd6iqqGSpoGCtECOH+3gP2
wQcaKBciSsMLvSiKApJ/sXRgaKZzR91A6cHHB86PtZ6d7xzmTB5kNECdhqpH
4FoEGujgSGsbmpo6eO5Ry+8DtUf7W46/6xzKOLwopRLL4gyheLUTgQpRozlg
8tTrj0GzTWHgW0XkUGlvELwcqoOMihkJqogC81WUXRQV1RVwGWVfHFGI0aKM
FmFQOFuCw19peqY/lA9BwRmfspZIzEyC/pCfCoD0IaOc1CnTjUeyLJMYDQ7B
mDXTTK0z5vBDMxn4CzhBBAJXILMFVAma1KjUo/g1I84yBx6QA5ihZK0hL6ly
7pXayn1uRoi8b/UEUdmoOZQKApcL0rJAi4BM49sVv80+l7idA/CIJNJuf8gX
jqW4DImA0D3wCQwjFTlVPWWToj9Bb6GE/bEz2HdaxE7aJL+wvkKqa5r63siu
Ca9SDsVSc9aleyNjLSf7SpuB7hTWAEJoKygfu3Q9ZXNrdAZ5yMUF2hujqUjK
E0jafBGTI2GltASLYzJFmebI/4GRjLMoo9YhOKXpoBp1C0lLmlGNlcrVRLLg
EgL5btDq/LckTS7HqYAQkEeQLxaJphhSxkjJ6Vtcuc9wKSeO6zLx+9KDGXCq
OpJ5W1nRP+S8rK5IaYW+xW8EcxSUm07GLmSkn40kwLjmOdIglkcuiSTFxoE4
p029tB87N7S76tIvu85uLbu5u7ZvW/mdK93vH38IRzO4XKmsvTXT+38f3VB8
/Zc99wqbZnbWTv59x7WafffezAYRG8+wCG6omRUI4Q9yeP6ZzYAHZrOVovxw
/BPCg2Aw6Ha7Y7GYUbHup4IHXh/lDwbyIjsMDLCetv6l7f9iOIHVIkDFkWgc
ILShQK37k08uHv2ppaX8Ds1dXIDZk+J5i8sFBPBAjxrOTkVF+jMDbs1tnaW3
tUbgyh5JJ2mPyxsNJ/Ts++v8X2O1S/+X2LpF4IHm9VnuDQ1Xtw7sqB3d1TCy
u3GgrOXjnT7J40dhe1oOPIikvB2TQztbHlSeeNjY9ujIZZykjtNwgVZBUxlF
5BVJZ0PhFD/nnD3X/vbY5fs1h9vLGx+0XYm8+agl0sjCgGog8LjyragxgmB1
LgxNDJ+/svD4CR9DVgsBlcVB4d6shGwNjCIAPED8UhZ1eQYyN5ywDDzwDDwK
jD0LPXgVePCSmnoZfjmbXnJowThK+CIqOCGSBHBCAYEmocgg4KYcw6P0Kw4P
SqqMS5oqWDQCNwWdVSYVjlBBJxQbSVLq5aaqXneYIegiZEtHISSDHW9R4kU8
0Alc0RECEbsk2siYgyouT0aCeUkOXmOekr3x7khjSI5uwDbrtVA3bmTJEHPk
vob7jf6VnPtDhdisDD7AI0GddHr9/nCMyeAoQ1nLpqVa7qLclizPqmxTP59R
62ZESUla7B/uDd1vOd65u2akuHlsz77bW8ovbS3t3ndsaXJGizPIQs5IqSgd
9kVFVtJzajAgm7MBlhkssDG3gzcCb5m8hgyylC9PpRWLjOswoNUK1Go+mWPw
QTMM4IHHE3a7Q7E4TQq+Yd6Sk0g/Z3nXiK80SI/rlImmoxmk2y1xz6/sN9UY
BqvfhZGOzDCmGaOLMDdOUvWCVml15h11+Nz97eVXC6p7dleP/O8tVwrrOg6f
H5985Zv3yCZK7Ro1bSm7+vdd1zeWDW+vfvzv4uFtpb3XO2apEO5PVGMkg6J4
c0CCbijI6cLslJD+Ijzw+4NWqx32KMvc14QHnyh4kUefggeBQMDpdEajUQIP
VJyi84fDA0KgmuMMQz4SZK2uHBh/gr6i7wEwb+CE/kAoHImR8pGfWPIgFQn/
kHJL5+R+XJNy179y4QHRPgEeEO+p1fAAboxn4ZcVi/ySCpJYmTVKEZHUibmO
KsAFkymv0xUNRBRkVibsYrnyIx6DokSqKqzsByQEQZZxrJai6Wdvnx85O1JQ
P7azDhBCX3Hj5MmL8TmTytA4Hhpp3yg1Syjpuz46vm3/1J7jI6VHn/52S7OE
UIY6lGBGSmpyQpVobMxH3ZSWNCqZGHhsO9c+WX+ss7yhv/XE666eyOyCFoto
oMHxDMIGGUELRh0TD+8fa7tQWfdsYIgLh0Fai2waJymWWJGRdJUXWb4lkcPl
mSQ6ELDNPB9sOvag8bdHrW3TB8+Ot/4+3Hrq4ekrL252uR+/SC1atXiKpIXU
BIAigHBQyDB0WoYR0BK41S1E0hquyqjiVgtKhs6g0suotoXIfoayk08iR6Ne
1SvfSAjS6GwGM0LdZKDPHyNoKHcyAjxwOFG6MMDMa/MHXIBJzZb9Qtmw0drL
Okgy90TOjdaopqhXwVBWEEY9pGGg2wZDMZvL6wtFeRxyyOHxv6I+YLaU5Nql
A/M4SM6j12QxCFDxvPnh48HDpzqKa/p3Vk+VtDwobu7aXHFje8WbG920xQXY
Ep6WSvNef8zhDdEchuxqNqkTjv2DMYDGu4pfq8KLqG4nWjYBeKCv+knLGIk4
5xiAKg8trMsPV6KFZfVKRfDA5QoCQkDWxxxTba5n+PJ95JUvK9upOb2b16/r
9P/KM9lrVjN8NOxJxD3heIwgkdJQ0HOhtDYybWk60luw987O8nv/3nX7l11X
/11wofbIwImr0xc6XtcfG/qvLWeKGsY37Bn6tXT0l129dQenXrxLCzgvpyox
OjBQjADNLMdbAx78BesBDBNO8vvCVpsrEIwiM0u+pvgX4cFn7v8YHkQikZ8H
HhhyHOCB2+v5DvDgS2EDcTyIROPET5vlhFyGuU7/rMEJP1Eu+csqKmYVSQMe
JDluyW5fsFojqZTO3RW961H153Xa86W0ugSzfkYhkdAyqS+/nI+N2ChlJRWL
u6zOsC+EaitnFJxfTcn6Fuh3RuUFNSXvrWEuqmg0jfinxTN3vn2ibN94QQOA
hIHiepjnvqev4MUguz5GZeifB9OOm2P925r7C1o7ClpmTt/RPAlUAUfW3Zj1
lIAySl+sJHmNimtvzO6bA1NNv/VXtfbU7h88eGKhZ5BfsiC7fTKlpRmgzIL5
9bX2u5WNZ3eXP757D8EDEIAAHrDwZDIsFvDIACwIHJ2OY6NHxvlhbuTclfad
1QPbau/vbOjbUXNnY+n1jSXtBTWDdYefnLlmv/9AsrpQjDwvaCy2V8BtOZRr
N8OIPhfltjpT0SSGB7i/cWlt0lGcwNJsWs0ZV58LErDsFlCiSmSwQEgD51FZ
IallsoKh6hWXsrODRBmn0syixZoLD7AOLeu2elAJgZejwlwZneer8rrwAGOH
FdIkV/iuRXBvhDAlXIMgCw/IdCDwwOH0+sMxveSHqK4x/rPwYEVxZwMeZHtg
xY+yoiIbGq8nfdYEUXJTr2523K1o6CqoHtpVO7ITUfe2qr7K1tDD11qMVdIC
9HWE5hyBKFAcVx5RjUaJoMIijR1bQiScfpC8Yj2HN5HO+bCECNVlDL5Mhr6/
hlvUWquxIGrDMcbm9Lu8YZrT8xzykqpmHYxxWmw95TVWf1aWKpNxOVUDPik5
on6ZJ+YjgTx4kFMCDV+dC070DKbYLrWy6dBZgM6StPboiX3fobu7ii8U7727
q7r/v7df27Dn1i+l1/5ZdAH2/yq6/mtp14bi7k1FXXWtDwbH/d4AWtxTVEFR
Unrswl+T/ivk3UqriNEPLKu43ZFFs8cXjCG3HGwmIcmfVL3eyp9+vvLZ+3U3
luW9Xp/Vag8Gw6JI4IG2hrX4e225lj20lJpOk7UPVKAEb8R/Ujcy/7hNRTGh
CkA+s8Xh9vgFFLH6dXwP/tSWnWWaYsCDNC9anJ4Fiz0OmgmpZYyvVIgJ+htv
WeuEvl8BukU1Q/OgBVvnrTF/LLusCFM6rYLWzKMAARl4J8qPJRBtk7jyAXcC
vU9P3cXKyAs5zIdHn9yvbO3ZVjm+p7FnZ+XNXRVvrnfITq9eiB3LMDZEv787
eqts36XihvOlja8672txTk0wZJJKuIgkzmMjksRwYiQpWXziG/Ps5Xs9ZS3d
hXWD5fuetP7ubB+QXn3QQHZTES0Qt94d6iiuG6k80FnW/L5/LO3149VuZJxF
Rg9Vj71gRWwKhqfQIOtFasFyp/nowI66mW2Nb4oPjf67fOAfhZPbqoe3lN3f
tXewpObtmUuJR880h1tLpHDifRF56QmaSksiK/kDkY9mK5VMCtj7VJdZoqYX
gZBUTf5kpPEfvrjVg3btcZyFcBjPw8NjKcaBozKTDE8kCA7xyDqIfvtNXbk3
IArsI9EkzFMvFWQ5UVb+zHxUifyVclIoStg4rClpVQSsxuCy3AjAI3cHiX/6
brC8sbegqntLaf/2qkdVh+5sKru1rfLZ6Wv8RxvCo5JG4IEtHFnwUmlBIHVd
8WTRW2/kTMafDH6OFWdSF4uo4MYMweNYzSKW3MQ+eamJ1Zz/lUfkt4DwfHF6
zua2UiGGoGh5RdkUYhAUswXX/tqr++INJr+M2pg1uWTRGqkOq2J/mXBEezBt
OXS0a+P2Uzuq7v1t950N5d3/KLn59+Ibm6u7NpZ3bq28t6Oiq/bg+O1u0+wS
D4gCgyhGlpNfvapnHjwwgBPDqG53zGTxB8IpUtsThUJhQvOZeCcr30OErLkR
eGCx2AAeIAPmj4YHuUIfZgdN08RzkmEYcpL4T5Jvf0D7shuGB6oBD3hB/gng
gUggtgEPzA53DjzQ2YsiC9+hpO0KfV839eoMVhFkOko7TU7LB1MqkEDsJiVp
/hi7aEt8NGdcfrT4Logg31UZJ+pUVDGHBQq48pJKdP60mn4xP3WwraeoenhP
w2BR9Z2dZS/PXOU+mlAiGkbReXhKcj+f7TrcdqF6/7m61rejDxG/o7GXINH4
8EZq3sEIZOLJhMUrW4KhB2+eHr08WNw8XND4sOLAy+ZT9it3mYkn2pvFzPSb
t79d7dlVO1nSOlp12DL+lAtEcSuRWqUvfxPXOBELR+gAXCkpZHEO/XZhrLDl
5Y5983uOPN9SP7Nx75uCpic7qh8X1vVvKZmq2z9/8YZveDL9+oNsc4IWhxLu
oRyvmsrIIOkWAC6nkixOr4tdXrLSgiT5Vf4SPPjc14vfJYYHEoEHUQwPgBIY
Hsh6f8oYJgjfuD3rWgu/Fjwg5hIdGwjL8IBG2EBKaHJaw76t8H85QYukooOT
g7sqB3dVDe6u7ttdM1zRenv73r7aQ66hac0TIWl3BF4OJFILPt8Hh4MGDpI1
3i4vuK/D4mS9CgaSyypRN8nCPNYPYCOWOwHvifheDx5oK50+yISVcOgflciH
BwYSyRZg1V1CML/5rhv0sowif3LgQQ6rlZDLsAIsJJIEhGDbd7RvT0v/zvrB
XY33/1F8+2+FN7fV9v9a0bW5/G5BTff52+/fL0nIFVQ3p/CyzHx1BSoPHiD7
LQb2DC15PHGzzReK0nI+PMB2tp8DHgQCIQMe/KnFjq+z5bqjwDHLsuFw2Ov1
JhIJghyMKfPD4QG84WAoBmzH5fZxvKR+0jXxG29Yp0DJSpFsIJAzxWVIfr+f
Cx6IqCghwAPrvNU8a2bjSPCl7MHFvokXF249OHXpTXtv4Nlb0UmhkENSy4b4
PGcZMwlbFmQcyyRoko16f72rf2/TQHHt/dK6jp3lj460RR6/0sJpjZaQexGy
imqyLzE7NPW4vW+qvdc/ZybGCC0j6QtFetcoZJ+Kxf1ml+JPao6wrXt8uPLg
4O76yT0to4UNE2XN74+dd1zpfnP43IOKg2OFzePbG6ZqjkVeLUgJGiMYbMMl
sTBEs5d1P3MUKiiqaW/wZUf/WNmBx9ubXhe1zmypm9la87qw6fG2vQAPxndX
jZTUjNftnz56+vWV20t99wOPX6Y+LGlUWnREaU807EXl172RWFqWBCJJ5Kyi
iDnJciDkN329GB7gCBsdHkSStN3jA/oJ4UE4kjCZ7ZQvBPP0T1oPsuBWRwgY
hinYfY1FwE1iiTkarbJwmp2y3ejp3l7eW1A1VN7YW1J/t6T+ZlHt49NXVZMX
lRHKoA4CKeaLJeYcro92+xfBg6z1AE8u4jtKrEaqHlCcm+JYWmeRVL/VSmBg
wAMA4f4YvWh1OrwBHsf0iHiuZI0Mqu68sewh8F23T8MDmMfxFJdmkJSlQtrj
1+FznbNtneYj1+e21w38u+zezrqRX0vv/rrndlVrX++kw5/CiI+sDhvroV91
y4UHKvH+xGYaOsl7XBGr1ReMpFfDA7y+8B1svetuBB6YzVa/PygIovaj4YFR
wVzDjJrjuEgkAvAA9sTP2Zgyhhnhh2zYVqCFwnGAB04XBVqJwYt+EniQZIUl
m/Ongwd4dVGkRbfFDSSzMp8UzE/eDree7ippuLatorOiZfrkZUvvWPoNyMQo
mijYZq5IqJowi7kxUZw5FEWPoxImZsZaT/QUVQ/tqe0rrJ5sPu4bfqSBcEcX
qXo96ZSYcQZFX5RxB6RoChkx+IxutM0arMiog2EWCYXdNhftj2kxLvF89sG+
tr6C+ocVh6bLWkcL68aK6h9VHuzbtneqZP+rvccntza8bj0vWXwozhEp8hLB
G5Luh6eSAC7EugV0QSaW8jx586jp1Piuxgc7Gsd/3ftoc9VzON5cMVNUP13a
OFJUA/+lu6yur/7A8KHfHrVdeXGlw3X/mXngifnBa+c7k9fmhYHH4joxutE7
a1WWsq4U35hfL8MDbMdF+QrCif+fvbNgjyPL0vQv3H1mZnemu6e7wC6DmJkZ
LDLItmzLlmQLLGZmZuZkZqbgiL0QmUpTVdldtrXTFU+0OkuQjrxx4573HviO
R6qCotNgvoXwQHQyfD88wK4UMFwYD2DrvS9yrrwTXGDE2k5GRFTBhyr8UHEo
J4C1anF7taah7W7SYGr+cuXjpdrn09VP5h83GZa3BMDDflYQKxQFs8N9ivp3
+AOfhwfIlIjSInwogQC9KxPEAyYsIfhX8OC9bCv0V/DBMtvclxKlWmOkkFgr
lmwNJmCI+dbiCVMhv+SufcGBx+f93IMgHhABH07Qgt4UDjKE1SVIdNymjF1X
CoPrgay6tYjssei8yZ8TOyMyO560ra0dmVw0lh6hQyT/lS77Cg/wYDOCxxlQ
Ky0AD4wWN849eAcPcHzh++FBIEBiPNDrjeF1l9/ruEreQENKEAQAA41GY7FY
KIp6Dw/473ehGA/ArgTggVyh8fpIvBZdHzwAmzjABt8XD97JwcVJZzjoRgtQ
k11jYgnOarCv9k2M59VNxBcNRuUMxxWMpZUtljw6beo1T64KarNg9cLFANYy
0l6KcLGkR+B9ggC2zzRJCX7Cf3SxVv+yNz5rNDFvLCl/NrdK2zslaJ0Cbs6H
dmqwXsyHVgGwcPgpYKlh3SG6N5gz+aDnCkw5rR62CdBrDVBQUWXab+odSime
TipdSa9cTaucis6bTyiejMpdT63ayajbSKqydUxBDXfsdSVp0cPJsRQ6g74J
HjoWGBjUCEg1J82981nVE7GFE3ezFsFbxRUtRWbvZFSsppcuZJXCXn45pcMF
lSNFNUMF1f05VROlT8bKn00+frMzNKs/k/scHlydGh4yphEY+ND51fEAuQXC
8QBYukuFWqbWfYgHaGZ+3eNX8ABcotFkO7+Q6Q0WiubD3EWf8/5hGIa9NNiS
UqjKg6RRrSsgQ5PDOLu+Vt/cGp/ZFpuxVNegG533bh3Ztw6cR+fQXMGFn4Hp
uOjybC7vhVwlU2k/Cw8E0SSKFickz8Jeuf2DToPQ0/eJseLCfj/shFbKZnVJ
LhUatYGG8sWCmLIkjgByVjD4RFmP3xcPrtZZhmEDJOWlUOkNADGTgz3X+ZVe
QUEIc6dC7sPN2+njt1OHf4prSysdmN81yq0+P3xwKB/lvcrF/TqX/R4e8BTn
dvgxHhjMLrTIsShR+xrhgUaju7iQ6HQG8DpUu/odj/A6aIwHKpXqGnoPwDOB
8UAmV3u8xHXDA7BKH19IrxseMBSL8cCitwI8IL2UQW1a6h4dTiubiS2ajSsG
W/LpOBjrX8iu3a1tck9v8sdyWCROwSAnzK7nKL/AEtDysxxFwu8rdPsv2wcS
c6aTC2dSiuayKlVvhoRLIxRAgelLeL1DYACePJLBigGhu0LDemOOD048n88n
V6vO1bDZIqwX8DKWhZ3Zkkf9UTljMbmLSaXTMfkrqRVrmVWLKRXgai/vNQtb
csFJ4U2l6JRAeADNRxAPYF0JEkWETgar2zq7tX7v+Vhi8XhU3lJs0UZiyXJM
7mFererJG2Nbv75nVNIxcPK696Cle+nhq6H82tb4wvbkktfpFaOPXys2jwiL
G5oYnHISTCcjcbPfb4YHqBgc4wHYlJvsLmjp1Dq7x4/tVAgPkLf26x6/jgcG
o/XsXAq+0u9Ekz7n/fkgIYhjHtpoowAKhxIAbG7n6v7aw6a2+NyGWwlTVY81
4wuCQi/4aZjo4vLBiYdqRGhalNY022FShFSmCHwmHuCPwaMuQeDRDrZHFOh3
2eAqJZh/509D58fYAJkuhrdbXdJLhVZtYEQ84N7BA8wG9DfFg5CRZRFqiw/x
1SKLs0NIknJ7STfJwk6OJid1onFe2IULjzC2S6TeW/w5aehGwmBEateDphWF
lbUzsEyaEbwk74PKEqFKma9z5Vd4AKucOKcN4IFNJjWbrD5UmMmjUugwPAj2
j/4uB8aD8/NLrVbv9xPXAQ/4MH0MgAcWi0WhUNjtduwuuD54AG4yTnmSylQu
t/9TC9R3wQMwNGCVPjqXfC884D9yIO83Ay+DIli91qRW6jwuv9XkPF3YnMir
AbvykdsZU5E5s9GFM1EFc/ElyxnV5/Vthp4pZvdcMNgEbwDKDsDKOCiGAD33
AUrwUYJEc9DwZjgmayG5eCmxZDGlTPL0LbdxAXf0PhYHhPEjz5JU+FKGbw3Y
MoS8r+CF1+uVKhWHSqXabofhNjCoCuNp2+BoRvlQbP5YbN54bN5UYslKbt1k
WsVsbq17aFVQOnCZpIBUiEN4wId0PHAyErYvBC34KeZYsfOkdTy9fCK+aCW5
bC2xZC46e7+wjptcEU5lgtrIn0qJ/XPi6NK0sLnf2jdW/BCcrRnlPRX10sUt
xuLiAZGS9HuZ6pgQvkFwAReuBivBIR4YbU7Yp1KlvW54wLC83mDBeIBv/hfj
QSjyHvQO42wPJDVoddlX9zbqW/oSC19HpHdmlqonlwS1SXD5IcHSHBsIBPxe
vMcXRY843mS2gh26XK78PDwIfjZw0PCx5wiUBUEG8eAdMHivcDH4/2wwQsG8
G4YQnRIM77Q4pJcyrVqHK9oYDNVXQglhDgSW/wZrXGhwPo0HjN9vx4FH5F6A
C6LJ6d+TGXd1vgOLMLDuSqmYvZU8EpE2mlEy0TctNwcATgOgdzKCHVZD8MxV
9eXXufIQIbC0QAQAg5EqpVsmd1psVLDYhEVJURT3Jx584gjHA7PZLJfLr2Fq
IjA6Nrv7Tzz46PEpPEA/Evw+Sq3SK2QwAd/vocynipPm3rX8usGIzJG7mQAM
VpIqVpMrV9OqFtPu7VY8V7YNuxa32XOFYLQKbvBAE7zDKfgJ6Py3eYWDy926
xoE7qSuJxWAnvhBfdFrT4pveEmQGwQMjCNBtQL3j38YeA4qBGSPYjodOr98n
Uan25XKj1xsAKwfs1kRYl/eW6xqncquHk4sHE/M7o7OmCmonSh5sv+gQpCao
iuxngqVVOIGHD8cDgLLwAtA/AG06yQsa69Hrvum82rn0yu2sms20e/Nx+Tsl
9/nFTUFvhQ3prXZYswBYwuZ27Z6cvR09fjM4WvlkqPqpZmUPprcRUF4WG6iQ
NQjpoH3lKfdxPDiTKjAeMP+T8SDkFkMxdwCcbp9gsHp2T7eftQEwaPpHXHdc
3tT956wcCXF7/bCWAW5t2ABLBgQW1z3AlhwUbTRZwFOgUWkBO3weHsCNvIgH
RBAPxHIKPsx8fwwPhA/w4N0cITyTWKfVhvBAg/EAUDQfurx3FN/e9058vYMP
iliyYm7f+3gA64RYJy94WdSsw8exOptz9Vg2f2ZYUzGPuo7ji8dupQzcTRt8
1X2xcexELO0HDxstmBnBA11hrKgdIYTlyZMkGaqsD9+iht8s/PtIYV48wjew
QfFzuBQgmW7ocDo4Uk5Mbo+M7a7vaMAuBwc//QzqqyNQAcqDU7VEkczvcRAE
Fco9CG8o+X0PXGIGXvh8Po1Go1QqwYvQaH9fxQPxGlDXGIAHEqlSJlcDPMAy
y98ND8T6Zw5nkoP/sDg9gA0OTi/wbo4VJzYN5fu+CR587JtizSwRYDRao0qp
c7p8sOzPS7Mncm33xELxw5GUksmkkpnE0qXkio3M2pXUe4AQ5jKrVsqfSNsH
qK0jQWUQ9HZBZRKMLujSV9mM3eNjSYUjv6RtJVWsx5Vspd6bS64w9EwLKitn
cYFbRYCn9hOyVyE2CMl1OlzOC4XiSKHQOZxgAYfWHDy3Optmannu/vPR4trh
wuqe3PLekurV1m7r0QUMfPipUL4WLzY7EPPBPrLwcohXzG7mQLJ5v6kvMns1
rXIrvWohqWi7vF4/MCEoNVD0yeOE4V4G9sCGkKOxcEcy4/yGZHxOu7JDKHSw
/BMqK14pz1zJzn71SiixkDaEBz6S0lvsOPfASzJsGI4iav368+3Tp8frlys0
AOPtDg+SsPySsQlVv2ITCQWdAO9BNgB3inBvHo2XPxrMLBtNLW2/kTycVubd
O2MB5hEokkXDOQH2+DgoRgQzYsCgmC02yYVUJpED6xNOBVxQevqTnxaHsdBz
Dd7WB31qyNYDw0MHFQooliUp8MSHzz1xGxsqeETTHrArFUzFEVtsUIxZr5Ne
SowGHTCOYThxpaLAhw/9tzrAxcM2ZJ/GA4ZzhfDAzzMGhxviwallaNdS1LAY
md37S1J3atHY2JIJZyeRYPURrIxg5j7Ag9DxntR26L4Aow9Gjg0T9Q6/TvBr
mAowNuDvQ37g4IJxdGF4+XqsqKI5v6TlyYuJ3RMHuA44Nzg8wlBqlYbyzt+h
MCR0XLfURHyEFLkxHqhUquuJB1abK4QHv0M18WtejqgexOFYMIOSoo8vpIdn
lyFnL/w9ME+/Kx4g9XrB56fUGoNCqXU4oZy74OcEo0M4V7mWdpXd4zsPW+by
amfTKpbSq1YzqsG5kH5vPqt6p/q5tmPYO7lKzW8HJjeEpUNuYd/cPXVY93Il
u3ohvmg2InclunAtEfxh9dmzTvvqAWu2g89N8uxHnagf4gH4qQ3hwcGFRG+H
yULw0QT/5/Z7zmXSqcXTgXHJ6Ixkal62uGa6kNJuD1yvaCrkd/29eOAmBJnx
tKl3PKVsLb16M+3ebFzhQt6909YuWiYDWwc+4BXFqMG67SUFi1swOPkzpW5+
/Wx0Rr287QObUxdK2mTDxJFIqNQjfHXhq385PAhtkOHdxdgGrLCfFox27/bJ
/svO3pTigaTCnsis1z/Ez5U94pVG6FVgsNQkh6sFiaBcB8YDMAtMZuvFhUQq
/UI8QC4MmIQTQAJcaFcNFU9gRyfUxAFOTWC/+HfU3sOCI7wv4BffEE8hkuXc
fmi9SMqhN2hkMqvRQJIBpGoqCmwERaFETuCDyPTR44tu5sc+cfCtgnjw8eAC
/AC8l4cfHowOTaDgwtqJevrQ/GL0Irli+E5Ge2RmV13jxqmK94tyqcAs28BW
jxO8qO+pKN0azgAhxzV2HXzoPcBOgw/xgAke+Ee4zwisCnEJrf2rqXkvfo6u
+uHuvZi0Zw0tSxcazk1hSQw8sByENsL/HSsbQ4WN1xMPvF4vwAO1Wn3d8IAP
q1wAeOD2BL4vHiAtxHfwwGhzAjY4OpfgTPIQHrAM8Q2W6w/9jSFPLxLgDcjV
OqlSY3V6CBrqr8INMrhMDy3IdaaZzaPmnqWKp1NZVQvZtctZtYsZVbMp5XPp
lRuFjw6qXp7VtewVPjqrfHFU+Xwlt2YipXgmFZYVrKVWbKVWL8aWrOc8WCp9
vPuml9YZwWcOMMRHSr2wgxh7dIMyBeCnVjfEg8PTC6vNjb3QHA4ue72UweST
Kjjwnjan4PEIDA1bLwmCkyF4QcSD8MRa4WPLJhoFlCRp9RlGFhYKHgA8WE+p
mIrOG00uXK5vdBweQ/cK6eUo1KYB/NO+AAxhK42mhY3FZy3thRW91Y92hybN
ZxJgmJFOdRAPsO0h/8SDPxgPwK4cN9CkKYKnocw1jG2ZHN7N4+2nrf1JhV1R
WaNJxa23UlpvJZ2+6YP4x4jtKkK9sMkw7Q6MB0aT5fxCIoOpiYFQudbvwgMO
RqmwoSLQAwQOzkf41Eb99olu84hWmeEDRcH21nCKfwIPxHejGBjPoniYE+cm
4Q6WYAIGo0Wh8FrNqBkH7MtFI2VIEp7vQwIbpggYfnzh7fzwE4eJ4QCUegcP
QqIHyIPGwcxckhEoKKAIdkmuwMqhum9JW9W6G182FJHdnlre3z+ntBL4QQHL
AmAJD4os+CEeBOteQ7Eev9+PPwgALWzrQ3cqdFX4m/gIBRdCUBESVAG/BvDA
R/DrR4bC+/2R6c9vJjz9JaHxVuKL6PSm5u7tSy3rpmHBhZcgRRqlyNCN+vaH
zxfQaHTXR/eADyoe4CH1eDxadFxPPDBbHOcXslDlwnfUPXgPD8DKY7A6Dk4v
Ti5lGA/wcg03t98k9+BX8ABsUGwur0yllSjUZruLwNKhARqJ1fOwa7vOQR7J
lYNz64+apwvvz+XVzWfVzGfcA5Cwkl27ll23mVW3FFu0nFCynlW9mlc7nFzY
E5O1UlBneNmnvN82n1C6nvdwMqtq9mEjIVMLYEEn/MzH2OBDPAAIYfZAPDg/
k9ptHlFBH+3+4N/RJKQCgsDdE4CxAKulRxBcqK+e6Lb9LTwIEgJYxmjXyuHm
vRdLyRWrCeWzMflDcbkTZXXq5VXB5YKNn8DGgaYFQJ4ao2fr6KRzYKzy/uuU
vId3Ex5EJvbVPT6YXmDdfpakeLyLY8JyE//Egz8aD2BDBxb1PcJChVqTZ+Po
4PnbwaTinruZsCdjStnbqMyRrDLn2h6cyQg3UbsxLITDEwwbrktMcbzOZD65
uLyUfwQPhE+44EKfFmAhLJ6FCXii0IZPa17tGByseTbxsEmztAt9CAxH8iwM
QnDvxxfEqYhIg/MEYIwMrGHATuqdgtYKppzt+Fy7f+hWa2CjUuhmowkKdkAn
4SlKMiLkRoTwrfAADA7M0/goHqBRwO4zGjbWwKmJ1MKO5nm/JP/JRmzx0M3U
l4UPhnZlXkD1DoojwyoF0E29woOQJQq3O+F3RHQFoCP0TRxQCDkchLBAeQgh
zPbAi+7ViOw3N1Obf0lti8zujczs+cvth9GZzS09G5e6AAGV2IPNh8K7oX/z
w+v1q9VajAdYNVEQvrPugRCGB263G7CBXq+/hnhA0bCe+uxcCvAA6x58Rzz4
MLiAvQdnUoXTR6C1iA3+5rdYrj+aDYXd6iIeqHUSJViDnOBBgIqIJKwCBugg
isYAG6e0mJf3dl51rz54NVfyaDavbjnvwVrew7Xc+5tZNTvp93YyqzYKaheK
aoZyy8eKq89b+oSVY//A0lJm9VJW7VR29cL9Rqg36HQLNMEHi42vDDTe7Af7
WOHmDmQQD2SXKqfFDZYY6ipSzMEukDSJmr4w8IopEoxqSIbo9+MBPGhYduHb
u9x/3LqYVL4SUwKAZzK+YCir9HxglNebIIS4vYLR4TuQyYbm5muevE3Obo9L
H82t6MsobYhKeVtctTM8znq8NElhWVueCzoQ/vQe/OHBBfEjI18AWOeNFs3s
6k5D22hq6WBENqzGTSjpj87qS8rbbmgB5ACet1ALRQF3zKZYsP/igksEduRr
TKZDySWYb76A/52OeL+5BKMWbGD6AetPo90l7/QZd05fZ5bX/ZzwKi7vvG8G
CoeyPE54CJ/z4ZhKuL0ir7hJQe+wbp+dDs7ud45cDk5utfVsvO1Vrm7QBqNA
BMDM59FzhGrzr8Dgy2SmPvf4NTx4537DNGSEBwx+pbcSk6vKisa9pIrF29ld
PyU33H89pfFAaTU3w6JPEawzFL9+RCMaPNFgo0oQRCjD8FeO8OiDIFwlRZMk
FAcD73B0qc2p6/85o/1vCa//O7Hjl4zBu1lD/4ht+SHu2e2k+uG5Ey+D3DIs
ynPG8/U7WWSPx6dSaQAehESVhWuDB2BKuFwunU5nNBqvJx4YjNbTMwnAA5+f
4t81id8YDz6VmnguUwI8QBX/1wIP8KpodXkVWgMwJQAPPDRsYx+gkUwAG9by
BmxkLF7fsUI7vbb7snux6tlC4cPZrOqZlIrZ5JK15NLN7MrpzFJgNAfLai4G
x+jDS+FCK2ycH9Y2zWZUzeTWrj1sMs5vCAYzbpz4HhiEMrTxFYbwwOSFeKCS
auxGt5/kCCTSiMKU4DpZGM+kKeQ94LAsEPJ5iD0Ifw8eYEohKBLKPkq0iraR
tfSa5cii9biS5aTSgaT8rRdvfIfnAO+Yc7VlYeesZXgq/8FwenFndNpIUt5S
ce1YRmlTZNpQxcOL2SXBF2AYCinwo4yDUNXc151z/4p4wKJ+P2CvSZrMktml
iXuP30ZnD0XmTEfmb6ZWj97Jbr+ZOFNSpxufg3rgjIDz58SLCCWO0qLKDQ9V
vVmlybh/eXGuUn42HuCNKg+dAyi1QPCrjCcDM03x+Y/+O/Z1dJ6sdxY8PuD7
wPy7sdLHu3iAXzMeP0pXIK2Hkt2e8f7KJ28yy/sKaibKHvTllw+V39/p6DPv
HLAGE6wphg2noIAph7WYcJj+m6TO8WFufL/fH8SD92WRoFIp8s2AC8V4oDEF
hmal2bVrt7Mmb6S/jStqG1w+94hROJzcE7YeIBchPFG4BmcUgBdms3l9ff38
/BxsVzEhgB8Bcw9MP3YgAPMUIgc+WJiPX4fwAFw2+OpwOPrGFqPyWn7O6fvP
hI6/pw78lD76Q3L/rfT+G8lv/vOXisrH/YcXJhrpdUCVGLHB9lcf4Y8ebrcX
4MHFhQTgAR3s8f59RZWF4AiDA+MBuDvXEA9IitfpzSenlwAPsKjy95VFwnjA
oJaGWBYJbM/Bio3xgGTF+KQgNjj62lf0STygON7u8WuMFrneqLc7XSSUXaFR
oyXcvx7GOAMoJEhwUNdIbbavH2lHly7fDB88erN178VuWcN+af1h1ZO1mvqZ
h0/2B4f9Uplgd8P8xku9fWB+pfDhTE71cs3zk84hSqKElc3su40j2VDh9sfx
QClRO0yeAAVzyVD4gPchLy5M7AQ7KXB5sC5ZlFqCT3EwCxF7WcV/ixfCF+Rw
3VqCY6ADweh0TW0cFj8DeLAZXbyWWDYalwdMjKxvwjK/cd46vHqvcTn70WhU
4WJG5Vxa0VxK8Wxy0VRy8ULxQ0nXmPdEAgu5eJhN4kVnAK0qX3/C/cvhAZgd
JOFnSUIIEMbj08mGpua4rNYbyTNRBQsRBZsJZaM308aSCjW948KlApbK8bBt
gXgvuGDCAUxPFMUSBKQKLjca9iRnZ2q52+/7LDzgxeoDgUImGjw/wL7PP2nt
S61ovZ01klalH1qG9bYcmL2slSc/jgcsEg1z+uRre+PP3rRkVzyOzHgWmdmV
WtqfWtyZmNOTWTRVU7/d3itfWPEq1ZAQaOQ6Y3HjgKsWTe/FLK4cFH/QEVrz
gRUAtgDhwUdElSHC4SahAtwmgZmn0pN9k5epFQs/pQ7ezuosezZ5pPX6BMFJ
QXlTsejzSvEBjAgBTlgyAAx6gPQHYBPr3YPzF6/a+obHrcBeAhigSavTpdaZ
5SqjRGa6uNCZjE63yx8S3YKNyjicQMKG2pW6PbBpt0xpqmno+Wv8s59yB/8z
ufNOweTN7JH/iGi5kdLzQ3zLraSm2KyXHX3bBqso3ibgNec7ZSdeWzzALhqn
06nX6//Eg986rjTwQ3gAtr5yjV6iUIMXsOkhKlvGDv5vV7kQ9snD8cDpDejM
NrXBDL0HBIMWLxgsxJ2txNCqqAvCw6xFm0cwuQSpwbd15ljYdc1tOSfXrJNL
tuXNwIWEt1jBPIYF5j4SGFz+QLpS2ziWc2+m+OFGfTO1fQrT/mn2fb9BuPcA
dV4Izz2QS9R2i5tk4KLuFFgbS7mg1wBtlqCSMwkVCULy+3hkPwcPaLxceyl6
5/ykrmU+rnA5unA1oXQmvnA8uWi75vlh/ZvR1LKeX9LnokuXEyumE4sWMsrm
00vnUssO614GZrYElUWwe2DzaFj2DtnAg7wczK9Yyj9yLqLPyouhGYAHBotV
olDK1TrwGueq4V9D2PXVH9jPxYOQOvJHx+OdcRInMge7KsDNJavfORipftwe
mzORXLYYXzZ1O2c+umg0Jn/r/ivhQgXT/pHGBYUEk+DBINzFLQ+JqyY7AA+U
ej32HnihF4jD8wVp739wDWG3jw/qFbB4MWShTrhp/WCsrH4ovbIntmgy76F2
ZAV7DwIQbhFvsOJUxBk44uQnGfvR5Sxgg9SijpTinrSyzoTC7sSCweSi3vic
3sTcvrTCwbzyuQcNsvG5gAyRNiUSwlX7RrTHhdFyFuUwkqilE4k6UHyoMvRF
kzC8jgDhAfnRlkwcI5IVhbwAwDDL1ERr/350bn9c8cTPyS/axw91KLIANk3w
97igmhgJZSM4KsCyHqh7TrrAm4FH3EfArg29ozsldS3NfZNymxOgxale09jV
/bx1oKVz4X79eEVFT/3Dt7s7ErzhQNrI4IZAPBTZGFgzFC8wOYXe8YO4vOa/
xrf8JbX7x6yumMrRzIfT8WUDP6e23krpiM8ZvpvQkZYzMDSudHjgWzkDDhq2
rv+6K/annh2b3SlXqM4vZAajFXcl/ibmTAhatPATXaeYxcFheT2Px6fR6MDp
9XpDeBCC0j+QTj/7gKQq6LSmw4NThVzj85LflVk4xL0MJ2qUwP85nF6wVqvU
eqfLh71TOLgW1M756gcf/Bp+4isBvGK0OlQ6o8kG+/t9XFXl6m+Qc4Fg4J7d
S8K6LTcBM6mcflg75gvAH6GsIjgA4JF2+M7H5nuLqkfz67aqGs2t48KpDsqm
IuchycJV3stSXooQV1cObbnRRYD/tDodCqVapdQ57B5ALKFEMhw+wKONC59E
ax82ez9vcMC/GKAEjfm4pacvLmc2uWQ2JnfyTsZiTP5iXMFMdA5ghs3U6s3U
mvmE0qWC2uH04oWS+9KWfsvYkn/rWDDawULNEYSX9OHgggfnqIPR8jNXfXM+
dr6HK1/suwz5USmGttisEplUqzNgsanQev5tYD40Wbh3RYDAjXW5vVIZFC4G
nCBu7qBjGda1XSXpBv8YpggiswvD+jD7FMIE+IB+gXYxfpaFBsO0dTRd87wz
Jm8gumA4In8muXwkERjWkr3OQcHhBusCHfALwbrWsONqqrCoTQIwIBq18eT4
UiHXej2itoDYkBSF1wJI1AJdjSBGJbD4JzJ8fp6B18PCHFdBb9OPLk7k1/Ym
FLRH5y7fb/LsXALTwhFQWJjERhDttmlYXMkSOMJO04LL71s7HE4t6b6VNhFf
MBSdDei0425qT0xWV3TaYGzWWHzucHTmSELuzv1G48SCoDYIfj8qkGYIgsLu
Pj/Fenio2QhH0+oT7Lyg8fo2LvXze85jpeAIIOXpYEyFpsGk/WJCwBHnT3Vs
DOEBjRYDMEqnEtfzttXbqe2Reb1xBa2zuzo34hcvQeNSJTEYh0+wNnCwaQnD
BnBBM6CBUxn1qmPtUdPkwoHKSIPNgjC5s5FUUhaRWpqS25iS1ZWb35+X/6qr
e0Gp8fvRhoJGIVS4t0F1HhRBgpEG73gg8da9XPg5tfm/Uzp+yOhNrJ6s7dpv
m5M3j58XP5m7ldJ2N7k/OnnoTszb6ocrCh18Kw8HtiLe74UHDqcbLIYXl3Kw
UsNN5jd3hn8UD2CuL9KqB3igVulVKo3X679WeAANLSMY9JbjI8D+uoCf/r54
gO3+e3igVH0cD772ZBM+Pd/wlQQIBuAouDyzxUGQ3O9JbeKDgmm4tggnSF1J
tISyl9FOSrmxN/WkeazwwUrBY/2THmHxWHDD/TqPnLFoBea80LkviCXheOTg
UszZAR6olBgPoLZiWCFP2HwLn7dfiltwp8EINvflwMRAdulkatF4ZOZKbN56
TN5qVM5KRO5aXMlmSuVayr2Z5LK5otqluobDF28vO4YkPWPy0VnH/qlgcwgU
TRB+wDxIGDPozaY/CQYf4gHzR+ABbHNptUqlUp1OF5KCEUfqu+IBeO32+MAO
CJxgh84H3We+IB6w4X+PRgbn+10pT6Jv+gXGgzM+ac59JFl81NwWlfPmJjCg
Rc03UlpictZedbrO5dClyLMkDEPh2YHNF7woVmxOAF5w0PPMQzzQqoynR1Kl
TO91UTClhYfhoUAQDwhcGhmqdkDN0MG+Cdxun4C7YHLQkeWnBY1N2zs1kl42
lFram1K8/bKLulADgBCJlheFGjEe+KBOAtzuQzxQm4z9M2OxeaM30wCUghk4
Gps9llIwmgnTYIZjciaisycjMsciMubSStbu1etnlgi5CrlHOFF/GK2EXo73
kEhCAFhXmVPftbBW1bL2qP1kYM4jN8BgPhfEA4b9smD6x/Dg/eCCwInVoDR6
oMEv7RwaK+uHbia33Exvz6juP9JQPuwt4GBBkxD8CMEWmAzPgzsA3V9+Cjrn
JCq6b+Sk5tHw26FdrRN+OJcgjK4uJRWW3IjJux1Xdzv6ZVxia2zik6KK15Oz
Zw4vQjkxroTuGfyHKAaVZPXNnMfmt/134ssfUzv/kdaR93Shd9W4rmZ3dELn
rCqxqPdG3JuEzJEfb72KjG+ZmFM5CMEDplMoYeWrHZ9argFaq9RaiVRpMttD
7cy+fibqb+AB1nYWUOxDqdDK5cpriAfgOTcZbWenEp3WRBLv2JFvfvx/gwd4
6fb5KY3WKJOrwawDePD7h+0qpskHl4XQGfoOyXoV2uOh6anyJxPpVeeVTdbu
GehohQ1x4OJPIYEaP+KL9/AAew9kKiUYuq+KB3Ayc8gr4qMsi5uzpfenkguH
b6cuRmUv3M1cjMhZjslfii+eTSiaTiqdzKzce96uH1vQD8/tNXYs3W+cf9C4
3zFg2z+BjX4CBNieAIuDAzdigvFvscEf5T3AB0ACi8UikUiuGx6AE1CBWgMe
BNgVEQMqSl+DhpIP/2NODJbjLgYMDp+wouK9n6f8DIHxgJRodlr7+7PuvY0v
GEiveBOXN17V4Ng/R750Dlf/hRSYg2F+zAbQKQ8JAVWt0RSPvAcQD2gC1h9y
/JUyoWj4wishWVhoA250QKA9KFMQXo83AD1jasvlmwGAB/2JBYMZ5SetQ4JU
D2V+SF4MQsB0X5S6h9iAQC45wJbUiXTvyZvhqOzxO5lLiSUTkTkDEWk71c/B
u+0+bV0urZ9LL5+JL5yOzR2JyeqJzVh91KiaXuL1Zki2JAcVEnwspAKAuh6f
AOyZ0W8b3ZjKefAmIqclsbCvpkG1ewx1I1FtpMD/alDnV4/fhQfwEYYaRDQa
SR8tLK1Ls0rf3M1o/yGpJef+4LmZs9IwKZERaBIQH48UxHBJCoMT3hiCgUuE
3iGcKfxjs5J794fq6kfWdnShmqoTlaJ/aq65e/5+w0xKVt/NyKbYtKa49IZn
zbNaM2pUhXXJGOxIYLC3R2ERal/N/9/o+p8z2m9l9fw9sbn0xdLMsefYLEjd
woaMaOw5iM/uTsjqvxXd8tPdJyXVA0u7agcZBrFf7fjUcu3x+jVavVSmAvu4
64MHoWUY4IFCrpFK5dcNDzi0DTCb7JcXcoPeAuvy/sSDsOPX8cDjJeQKzcWl
HEHpry0VH0944sP3h6FAMifqB0KfoNeyfQy2eCPplbslDbKXfWB7BWMTLNIx
Q2UIfp65woNgcAH8p8XlkKq/Oh5QDJJ7oME6xwR2zlZrGiYSCwduJk3eTp25
nbYQnbeUWDQRlz8YmzOTV7P9+LVn/UCQ6fTji0MFVe0JeW9TCkdLHxx2DnlO
ZFBdmWRpksJLr5+i2WAiRPj54RH+o8++v+/WZVAUZTabLy4uriEeAHrS6Y1a
nYEgUYsNlmewr/u930MbTxhQQMNIMHQgEBAbaYF9KOmHm01UscLrrcq59a3m
npUnb+YeNh12jkA2QCIDAsxfZSiUVhY8WDEZHiXbo8IicfcD1lvweJ4cXyoV
upAHDAMMDK2GXN9440+hkDYsG6ADLOlmA4AmYKqk2yP4aXr/Yr2ucTSjvCsm
eyznnrx3WlCYBRcD5coJjoGFgGJlC4PYgITJhVAaMXB8uXDv6VBs/kR07mJK
2XhsHphy+u5x4VTp2ThSdU1s1zRCUbLkkqmEwsHYrP7Uwo0nTbqZFeJCIRgc
gp2AJ2BvPw0DK2qzbWptqfTxcEp5X2rZ04iM9oqH0p1DqLaCW5zwolTUP40H
5EdTEzEeoJoO+I94SGF26Swp90VUduc/EpsL6kflTsFC8V7o/gCw6OJhJAeN
CyI2Fgkq2byM2savn9mHZqUPnk8XlHR09W2bLEgeGy6dnIsKmD0E+PTbx8Sj
53s3o1/H5/bdSX6ZU9a1d+qGKZEERjtSQEjJojKs+X1zfNnb/xXx6G7RYERO
X0Rm2/OegwMdd2FlL6y01C7syekXnQcJ2Z0RCS1341/djn/U1L1q9n2DDmt/
4sEffGA8sJgdkkuF0WClKf5PPAg/fh0PXG6/RKo8O5darE6c7vvpD/ZOSnTo
+yzy3ohFVWJ8gRcNPQklBWiZ7rBtaLLgwWZZw/nzLrha+lF6EIs2bqh2AGfQ
iUs4J+4cTe6vjgc8sj7wVQCWN9IHkvW656NxeYO/JE/dzZyJzF6IL5hMzO+J
yRrIKD5s6vJuHQkWFzgvesdfRqe/uJnYHgO2GUUTxY/OeibAmgw3GD4SfwRY
CB+UrKHDtCI/2pjvw4H9vR8hDA8EVNxtMpnOz8+vIR4AKjAYzYAQACdgPIBX
RKPEOSYY0EdsAH7iC4i91WCjARq22WK9AfWF9PzwUCuX0y43/EMPScp1gD91
q7u6tT1abUTpaNDJjroEckg266qrY7CgkYJGjcMFDehOUZxcrTs5lajUBoqg
OXQx0D8QoDkfAWmWYOB+XG/nlEZOZ4KeIgpYHJKgfCTqv0Z7XILLAyaGcmAK
TJXR9JK+hPzlyqeu2R0B2BUfUvC/CqzDu4HxAFwhxAOK8p9IZ2sbeuPzBiKz
R+MK+qIyR1OLfQs7YPPMqyyejbPLN8MrJY9nU8qn4woAr/ZEpA+lFC5W1p+1
9jvnt4VDhXCipvek9pUdy/yaYWB2/d6z3qjs8fTyyYK6hpjM+dZuo1QOJgnJ
MuKc/xp4EDqRjhH2HoDhdAWEmcUTgAeRmV0/JrUWP53SBWAGbwDmIYJnz0nz
Tk7ww+c/6LcxWen9c8vAwuWzro2yx2M55R01D4e2dw3g2sHYgzenuQDBkjif
0egUOgc1d5K7IjL7b6W9vRn/bGDyAnaFxcIjLM1AaXSYvyQx0o/erv4ttfE/
EpvvFg/fTm/LrxmZ3DBqPILEQh1qbAoHZwwIezKqoHooIrExJrX558j7tc8m
JQbB96EQwx99fGq5/jO48GVHuPcA4MGf3oP3jt/Eg4tLOcADm92Nt3Gfe7Bh
bZrDgwtwu0cxMEHR5DDOb609er1W3nD07K1waYA9l2kRxHHlXTgeYDsH1naj
x3Gp+fp4wKGsKmDTvRR7JFuteQ5W5sFbKVORWRNRWcPRmd0x6V2p+fP1Lyyr
O9AuAHthsh50Dzcn5LTcTRtIKByIKeyJLZirfGYBi7nZC9M1UVgBi/BjXbvw
M5wWPqIQ9ZnHewpywJgajcbT09NriwdancEfIHHRGfwuhfCAvsrnh7KZYIdL
UWIoAOzO0eZdd3je2/i6vuLeaGe3/uwSxvop1FPH4YG1tGCmATtDkDyy7sh1
D4wDy4jDy6I3ptAJfofEmqUokRiWe8hU2uMzqVpvChCU6BODnmhYUADdERqL
ZGT+vHf8tHtUPjFv3zth9EbB5xVI5B2HSYkBwenjT+XbT9/0JuZOZ1cOJBXu
Pmphts+B6YMiwQHuapKi6ls6iAcMBz4IaT86n3/c1BKd8epGQssvSU03EycK
ajzrh5TG5tc5iEu9bWH/omlgtah+Kr54PCpnLDJ74E46gARAERv3np087Tht
eHvw6PV8Wd1UXtlMVtlkatFQdOZAQt5AVnlbbplmZ59wOMEQ+KEsNZpnmJW+
Eh7AJxmmf8AoGwuHcG75LL2oGeDBzykdBY+mVW4ETdB/CG6bi4IeFpiiQSPZ
RJNTWNpQPWtdKHo8GlvSGpvbVFTX3zd6qNVD7TYSOmxgaQNF+wiGJ3jB5Ba6
x7Q3Ejp+SO69mzv27zdrG1qWYNkkhZMZKMbvh1OJF2Z3dVFFrf8W/+LH/KEf
c/rupL9u6d671AvmgCA1e060FqXDbyEFKyG0D+6n5r+JSGy4EfUgs7hjbFlv
I74bHvyZmvhlB8YDk9F2cS7T68x/5h68d/w6Hrg9ATDlzi9k4CLxivi5h1js
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
7+HcNrI0+v6Xr9699d3vnN11kmTlnHNwzmmdc5ZlWTkHK9lyVGImwZwjSGTg
9cyAEBXX2uu1dF59qC4UCILAcABM/6anp7tx4cwNe+cQAzqL8isJCY2/J1Un
SXVWRaa2JX0+zfCyxXqQiQdQaT8XD/b2/u70hSSHgyFAF6fTSUYnCSQQg0yK
8s7ee/k8v67zcMVwdu1IVm3vsaoH/84bbL0Q+fAdx98W1fxB+BVCnuXesGfq
w+S5P58cK73z/xwayal6X9CwWH5yvrxjIK+2K69mrOX80t2XnuF5+rNeMFDI
YY/mFF9UmP8233F1Ir9p8LfysayGd9m1Q22XbJNzYacrHo/v1H3bzvEf1z4n
yr4w1TcxXn9+LLtx/njrQkHbTNkJy4NO4euaaLZzNgdrtCU+rwof9czkN/3D
d99vvPhw4cH8uXsfLz6cu3B/tOP62+bzr1vPD1y7Z37/QUahNgQcVxp53nt9
IZ3esrpmBDxQS5I50La1TNuXdEf5G88Dj92niM/eLkdqzxoJmA54oNMZgA+g
PdSmtaIzbaxkNOZOBghw+ZA9DyfWAEiIphBNx3n0riRElD8xJRM/EUyLMgrg
DGuCHJkFRkQvKGvW+KPuxYpTL3+vuvevmif/bnjz3w2d/2/Vs/9T8+Jw7cvs
6ucFVS9Lql4UlD05Vnwvr/bZoYrbv5VePVZz7b9ymsrqLnxYNKIEKtI/iwc7
3acUw1lt9l+OB8pe8YCm6cxmh2zsOx64XK7V1VWPx3Ng8cBis9IpNIrN4wiB
vwoPlF3wQEaebAnon8OdDYejPzg0/Y/igfau/W08kIJx48Tci7bz17NLn+RV
v8lFie0GsmqGcuqG85qGiltHas8uXH7k6J+VdS4UaZ3lMRVIOFcEapZ36s5o
WwwreX1hs8XhdPnIbBRigUAJSjheIvPmeV5mWSWeVBxe5+DE1LnrPdUtPQW1
PdnlY7k1CxXtUyUtH5ovLV197OqdFI1O3PDhiIyipGa1llUPJVmWN+knOWNG
5LZ4QFHUz8IDJf1W/shaUbZ5mTUYDoZD8CIAHqgvKbK7qMTFOP2LL3teV514
eqwSWK43r+7ev/NuHy359OCV4gmpQwk86hQKOEgG6w1AR3ug7cKD3wue/9fx
kaxqYIP50vb3VSeGKtreVraMnLlm6RlDkxajLFIn0SRKuByPoztidVmfdg8V
N7/9vXQgq+5Nds275nOrw1M+myORpFWXMEkhoQX/+v9KsuCPmnsnRurPjeQ2
LeR3fCw+MVd12vr4rWIEJoljb0ZGCSWUMKe44orVr+gc3Bcj/WE1NrcUnPps
G5rR9Yyt9I3pxmdCZhtJOklicDGK5PQG1nRmYj2QtNmgf4UHP7j+G+0JwQP4
PSipYCiyxetgPZKe9qxxnMDzInRA1tb0Or3R5w+SsMBodoaAMIjQgooHG8GM
g9cIp81k8cQUFo8skRkcICk0tiPiyJMpjIwciVsubnwMifEnklI+roX+fD5b
1Pb0UM2Do80vj594+3vT898bnvxR9fBw2f38qqdVTV2VjW8Ka56XtXYeLr/5
e+mV/IY/fytoLak5NzdvkKR9xoPllTUND35JUGVldwWk4oGshIIxk9EGeJBI
JDJdE/+yZn4NHkCbs7Ky4na7N4WC+fXLgcSDbc5AXt5EIgn3FO4s3F9R2E/r
gZwePdfwgNjJ94YHcFSCi37RTV1/9LS44XlOVdfRCuiKLiKDc/N8Qdv7wtbx
oraRylOL5+4HemeUNbsSZxSOQR01iZfwpDnUDZE3DBmotYLvqIDiqIhOX9Bg
tbs9AWjo1Mrc8igjLc9xOFARpR8cGzt3rbu4bji39lNRy1rZycXcRijSZFHr
/Mkbps5B99yniMmGPCcFdUoamX2fnga741/O1PsED8xm88/FA/W//8h645ss
Z5jlWVn0RUJ6wAO3S8LdO1THEhqBFhmB8Yas7z+OXLzzML/mflbZ8+KGG0eL
3rSdhWrBoYTwnEcJZQkHXSDJrP3zl7cdZ4ENXv9X7sShyqWyEzN5jdOVHVNt
Fycu3Jx79NI0OcvZvUijMHhUAq4lsCgzA2hdX8D2bmi88ezb7Kre4/WdeXVd
ree+9o86zPgNRYuAE4uTGXuSSjDbrrFK4wNRQ9/EYMO5wbymmYL2+eKO6cqT
unsvFaNVSdAKj/I141yfOAxAgkUSZ5E1IxhXfBEinNtPu7zI3REFD+SSMvwG
TZpwAB4YrKsGsz8ck9KJpuVd8eAfbU+0AhDfg13wQFvQLRbleJyGbojZYvcH
IgwrCulgDJl/YluNgEhYEsmIH3YDVmgOZ3RAQ0wkFDUnKrSI5m+ksEltQzBS
YoJAacMVJUgr7796z94dPlJ5438VXPw/pdfyTz6ruvKu/ebYmbszl+99uHj7
Q+uZ4cLapxXtnVcez119OlN39umhgra61utfvjt2wYO9LrtU76a7SmxZgAcW
KwV44HR5WE4g+w8cHlgccJe1uVQHCg+Wl5dJGhoZD2Tv/Uw/Z9kJD3YeXFD2
EQ9oOkVRDrOJgvsr4Onjf/0H/xk8yPxWSc+q/jt4wEjcinX25uNHedUvjpUN
Hq97n9vwpah99mjth5zGz0XtH8tOTRV3TFacXrn4yPV2THH4lGAYBZeD/y+p
HSvsJEis96pDGuY5PF8MuiGcYPMHAA9cviCPXRzXh6szlSNyDZdYFNUvRVOO
te7BqY7LkyUts9n1c7+VLx9v/pbXPJvbOF7aNtx8dujCjS/d/UAIaO4nGThF
5SBzYIlr3PZpoOV0jBpyReKwYbfbfxoe7PUFltTCk58SF3oOz2RxR4I6C8ID
NXQwQ2JqyijDcIJhbF7D4NTghT/ftJ7rP3ftzelL33uHBI8Ptf0pXnUZFURO
SLHJ8Oee3ocF5V1/FM/nNMwfrpr8vWwst26+4+ry827r1FxQb+bCcVSTrCRA
zx09F4LqbAj1RycDcx8/XrrTX9rcV9j8pqjpXftlwAPKaMZ4IMhY8DCT+Jfv
I9wjLhQzDk0Ptlzuz2saz2maON48XNS8eue5AnczhVIyCjzLsincGRbEFIsC
gBBfF4ZT0EcBp3iVcPIg9PglBQbwgMF44PKH9CZKb7YFowlNXxwQPAhHYjsd
xvMiz5NnElkPgBCgqYGeiNXm9PrCsTiTTAHrqUVG4aw4GVndxHXfPIHEW0RN
zbpNTxvIS7uFSBjYETLwYoQV4uR5U9mejE2gsM7qDI+kqLiiyvCc9eSf7ypP
Pmm4/OZOz8d3C9SMLjWzwvTPBO+9Xms6M3S05E5B3cPxz6GvNv5xz8fmsw+u
3elaXvNGYvLW+t5d5B3kL9+2TDYASabYrXgg7Xyen7fs9qiI6RZPw4NoLAHF
I+UnPip7bT9+ruCnS7I7XN+XVtDsAJzqRbNW7btAFQWCYaPJAiUk9aaV7dfg
36a2QxNy9WSKp+xuk5kKBKO4M/dDFZ753P6N+7X9e5TxrYzn+fr8Qb3BZLbY
oJMiiHLmtzudBOFBnJXN7u/Pul+WN7/IrhjOa5jKqZs5Vr1wrGbhSDX02b+X
nQJCmC5sn60+9+nMHce7cffkQuK7XnR4FGjuGAZDEumViGowwww8YBQlwHFW
n19ns7v9eCKthOctQOuD3edkEbtiiyjCDSvLSYWkSmKSBqujZ+z7+TuzhS3j
/y77frzpe37LYn7T++KWvpKGp0U1vR3nvr8dELxBZEhXWzfU/skkgQWepMak
IUFK31gp3VaTGoCHzWS2UnYnnWRIpZF7vaHj+cNCHqA93uB1PFC7e1hoRSB4
4PK4Vdt2CrfaaskUJcExNrdnccky/cE0PbcyMROzu5ClnWWx9iQtPrT1Kc7v
Wnz87OXx0vc5tYBY7/+7pP+/Cz61Xba86Y/rjGwwKKAcv+icbArl0EHnFpmk
wtNySkApGnjF6ly6+3Kw8kRvUUtXcXNPx5VvfaN2vYmmaXmPeICigkdp++SH
8ZN/9uc3D2fVDx2r68tt+HbjiWK0o6ErHPk5ief+p0Re0IauQPEB/pGZKbxI
7iKp76TAAU2xeGaiNxQ1WZ0mmyMcT5JpCxveBcKHW1+kvdzjv9GmyXiIAV5M
p9O9rYRCERBAApBIJJZIJOGjXm/U6S0Wq9Pp8vv8kUg0SSd5ENiIJ9gEzaUY
ETgBhGEl2KaTKPYpxzE8D2uUl4FhYUuASwNysDxeiQwK8CCnZOS7w2l4wOMo
6Swab0DsAdvRhBhj0KPoiSqz31yTnxzfKXrNy7o5xccpXyzSy0Hb6RvTRfUv
/5V7uazl6XebFBUVo5tfNodt7hQrkNdxP/FgaXn1f/Bgr/IfgQekbKTeyFe/
Cg+UXfAgxQgHCg+0+vm7eIC0jBJlox+Xpi/f6a9uHy9vnS5omgU9UtQ2d6Rq
9nDll6LWbxWn54rap4o73lefHa09O3vmlv7pO//Eh9SKSXb5UObfFINmVuGJ
UWoHXVLxIKUoIYwHBqvd6wsg8xrGAyVDk8BOVpSADbRxUpKUStZT7s7hrydu
LJR1LBS0zOfWzxyvmy9tnarqeJNb+aKgZvDUlbjeyvkjyJzOiCRtHygRaCYJ
HhBC4LUYEdgNS3sTCR5Ajf0sPJCVPR4tb4MHJJBAUkZ4oDeb3G6MB6KKB6gP
SX4FHxk8eQSUaDga8wYU1HEUU6mUegDNIktCMqE4qJV7T/qOV85l1344VDX6
30UzJc3OV72pVT0azYHeN8fzgnrLFNzTjEtI4calZJKJo/EFu2f1QedA1Yl3
eY1vChr7AA/ejVLLxng0hoYV9oQHIor255tfen/h3mBJ+2BOY/+x2nfH6z5c
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
kWSKB0kxAhGUuQaFa+cBD3iT8/uz7p6G0/2VbVPVJ6Yr2yaKmsYKGhbrz+nP
3fnWcWO8rH2q4sRM9enpqjPva89N1p17lV9364+i2znlczceCUsmJZRCqtkb
VmJJhZEiFqf925rty4p9See3OpLBCAtoF09CFwkaNIAYgjcqt+C4NkJS9T+Q
8Sws3BwDXdFMIGBa+Lj4pufz87ffHnYt3+mM9MwrOp9kDyyPz746fe1OafOz
io6uhvMLt1/55pcEb1jCmYwY7AePRxTQBwSKmMdIq07wAKoO6gHgjc+IDLwe
vonkgUqDgSZkjwYJm9QQWQs4FAOximtrKT2ZgsShFMhhoqiOCKC8Szzj9L9/
23/z5PlnN+6sffwiAHHhaSI4U4WwHt5BVsEHJfDDeBDjOQQRshKwUu8fv+wt
bxnIrhg+VjGRWwvrrkMFPUU1k6cvrrx9F1hawpm4BTRnISEopOZT6HQ8q+b1
wNPgBEFn/XjlYWde/csj1V2FLTOXn1pHP9q/GZPRFM8hvxFBJMEp1/87yjgq
yWS/KKlrFIOBGIU8cePQTP+Zm0/LW+8V1NzMrXjdcT78bRUZslhOZPAMVXS7
ZD6jn66Z/uRN5oA0HsB+pydocftcwPEMr5qgJOz1irIUSCxKbq12I7RpsKKi
Ph1aOXdZa3qfYDl5ljLxXkN3ld6xGQrW8UQSlNcmY6Zm0lQUlQq0j4AHer0R
usPBcEjzitHYZgPnYAYjxUO5HSUS9ABVvsCridZlUfUehkpheCXJyzQnQe8m
RXMczQopEe44cgllBdK3IoKH4wU8qo4SfYoCg8Z8ZIT/Xlq5+mzxaO2T38rv
/V569eyfXc4ggxxk2CQAS4JJRXkxxiuA3dBzAYGLgCQ5kQi8bkTIt+vHJNhE
nNkksBP6cdtKMsXSSUYzv2tG9VictlEOnd7ocLoBFeArYn6Hdp409Zqpn0go
GNME1IEqwTD0Q8k4QhQvsEFGFrRBhOjGhZiGVIkm47EUkVAwHgzE/L6I1wMI
FHa7QiAu0EG+MOm2Ex2haQ2iTUA2wVWm0cDp8mkCilITh9MLQvZrZyBgRmwR
oHaJjta0MGESOAD2w5EAAAQPiE7RAICodXIk4TqNPQgeEIYBHtAwQPtVJkhk
sgH5XwRUtopOb9ZACHgACAEwAPAAtuE/QlXA/wUiIlAEguYCm4HZbJr1BvYY
jSiaMHwk8EBRDgTeZisaxcM2KIA3EIPeosn62FwGScK1LFaAHCAf86rBCFW0
ajATCrIBVboD0PhQTp/N4ScDdkaLg7hJa4CnIZlmNyOgtUm0m0JqFY7X0Cuz
VkG0G6qhGhENwrWHBw6D/cT0BA8GoBQIeU6AvjLtUUTgAUO/cvuBcPyuYNDk
juso59jC7LX7PVVtQxVtI6XNo8UtwANLJ/6033jhuNW5dvnxt2sPFy/fnTxx
eaTpbF/NyYdZ5Td/y3+cW7V4/TEzt6SsUfyKOfpFF/y8Ss1+Gn7wrP/G/aG7
Tz72DDm/rcRcvpDH53DAX7bboLQenx2eDS8UOARvjdcVRMVwxyNBJh5hUccn
po6mwfuYiicibo97zWT/tOyYWwp+0AnLbsUe9S6ZJl5236vpuFfY2FN5pq/i
zHDTlY+3Xnk/LNMOH/S1GIaJR2N0NMaF40wwipqUdOsEiAW1uqwzwp0iaEfe
TQA2YgGL0sBydCQRj9IJkFiSJhJPJTP3wEcQaBJBQF/SPAu9vQTHwMc4m4Kv
YkySZhnYA2vyLXK257mEyEVFNiow6GzhCBuJK7GUEogLlH91+P2zM1db88qu
t55aGJ2MuH3QDiLLGUuHGYBJGv4Xycws4floKQmp96QElIf8r6AND9rs75++
elNc33Wk9N2RsuH8mtHCup7jFd15lb0VDUOtZ1ZevGWWDYo/gua3B5M4MyYm
DFDRCQZ5AEoiyi0MlfB5ZfLczRe50Fes6qs+8+Vhj332u0NnQ40tIC4Qb5wJ
A/HiNXRdI8CrUXU/bEN/NgaKICWgmJlJ7OQQoO0fl2aevn17/saT1tP3mzrG
Hz1PWClQPAIaeaUTCRR9O55giDP/VgHtmQJdgIVJssCPyQS05Emz3W2Ad8rl
cYUiwRgdiCa84bAHITNAOJA8AD/qQ4QiQMwJOAfsD8bhjsf80SgcAGvYDsRQ
OugYAxCeiiTRMxBKwCOBDttkqiUCDw+BfK2R14R0Zv2BEHRdrTb7lvFPdSG+
TyRWGJnhGI/Ty8ura3od4IE2PXkrHmijXYQ8U2mPXOKqscEqpZFbevKsoGwx
wqSPxAOvUtrJWFq36EloplKSUwJJ5drzL0drngIe/FF27dytN+4QnocuoCyY
LHJtxXNw0pbSTQYWXt5eBFGdAUVSX4jahKgd52avj3RrA9ywAZxgd7jWdAbA
A2hANMMph7JlI0HhWrAI2COGWJWJkTnzAGzMEdE0EAaetxR0NIgLYuZcdTG9
YJKSNNEKTyYsyNjwxzISnRAi4VTAH/d6o2GAB9wx0czIxMhMIIowFWEn0mRB
hw5eIujlJWiWCOn0wZtCjPCkP0js8CBap1LrkGp9Uty+qV+RTitsk2uBXgDF
B22j1hJqz7PWQpKfaF1j0EEEFYh6In1hrXeMHGGxaCfRzkOEvFBbhYyVkAEU
MsQGHwEDYBv+HfxreLG1ITak4IC4sAeL5q9CrAdkG3bCy0++Uq0KaauRZrAi
opkRMr8FZWqxg6YGFQ+a3UZ0vWoMAX5wB1zeEKwd7pDTE7a7gmYb9t7JgCuN
lDS7CpyE7CQkkGlpyRzU03AikzE0zNCOJAeT47XiEcAg5AYwgPS+00uGF4lN
BtZACNhtCW2TwUcQg9mutzgtlNdidJq+6DxfDfRXk6VreKTlwuvc2oGS5pm6
s59arnxtv667cN/3qI8ZWnAOTqx2983dezx++ebIySuvy1s6y5on2694Xo/E
B+ctL/oX7zyfvPZw6PLdvou3blc2Xy2ovlvZMvjnA+P7D0Gz3Yn9hVaMxiWz
ZdliBdFBFZkok95mWbNaVqmVJYvB4LRaka8UqnOPHxkesbeSz+P3Ah7rbNSq
xWt0hS2BoMlj+bI6+erdw9qTD3LrB0pOjZaeGS4/O95249uzPtPMpyDligSC
Po/Xaweec/itLjTmmIZneJ6hJr8srQIHZgJeZp3DwwDQCmKxU1aHHYCLcjlB
YHurWJxIzG6H1eWweJyUx2X1uuxet83ndvg8lN/j9HvtAa8r4HOG/O6g3xkJ
mAJuc9BjczvhVvkt9rjZGfqit44tvDl17VJR7cnjZU/PX1+e+RCwIxcuk81q
dlNGpxUKA+2e3xsKB6BXkvD5Yi5/1O6LOAJhwC14/mOhMLWmm3nxprvmRNfx
6peHSt5mVwwWNQwV1fXlVQEk9BbWTbWcW7vf6RtfSKyYk3Zv1BUIu/xJZ5h2
hoHske9WJBwOBRIul3FsuqvpzP1j5Q8Olw+3XNN3TTgWVykDhZAVnjSX1+Lw
gVI2WF1rVrvO7FiBB9XihG3Yo4eHk/IY4fl3+OCG+jzBmCcScfqdK6bvk3Mz
3X3jL1+PPH/5fWo65nJFPV54fN0AwzY7PMbwuDqgO0M5gfmJEPczqwNunwPW
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
7EhX9zK8GE9Tqyt2o9YUWvgAlyIFXVzF2VgSRvfDQ12Xyhrv17TeLGu6W7f/
wYGjofEpxDGSyJKoc5VjWKzv05AvAW9ekL0JvLuq685L4QHVJdXFeKDmysNw
yPTo1dUdda/Kmyfqjnzc0TDScHiy9ZT3yOWZ3Uc+72oZru7o33O4/9i5rN3F
JGO46iLdPcF5E2lu6L9w/JYe0iUbUIHD6QY8AE7IZ7r7E3gAp5FFom7559AF
K980Fqsej1cbMo2WTLstfsEVe59ifET2cDIvLYMHmqJLYcADXyg6bjQDHiSy
PH6FV7KyRn0PhtNSr8Hd+mmq8dNszYCx8pNh94j9sC3RHeSPO5MNE96SyWCl
Jb3HHNs77TtrDb9LKy6SZVGlMpBWqiB4QJJak8gCygwk4pGaDiSSBYvHYKLO
4QGvBf2RKYttxuUKZzO6kkymqV6Rgza9QgTVviUW8UlN/jDm2L3/+q+buorK
+8pqHq3fen7DjiPNHZeGp2wSqeZAVRMpl4Xuf4oHGjYCK8R4AcJ+cDhU23B1
V8X1f/1+pKz6zL1HXxJZ3GmABI6n0Zw0+SVLKpyJxCsDm5JghoY41Nc/W9p0
+fei7u3V9zeW3C7Zfb/r2ojJD9cdPiOl5LhCSBd7V5Bw0Twe4PwCkkIUYSvg
AcdKKGcYUeHvCr+2eBCOxIwmS56QfzY8mJ2xzEybSJz7T4QHvCABHtAdmRWG
q9BTgl5xmlTZZrPFYjF6CoXeNT+k70scGGJB+HLo+aBrXWX3hpre7Y23/1Vy
6uL9L1lFn504KwvC6VDW0DeFYTiPx2c2WwEPcqHB350QVsADfUyI0zgNbBye
sowbbNhomZuu+cv6V13fvJjWFmSLVPSwgrwNV09NS/S24JT149X7l+tbL5c3
XK9p7q3b9+z0uazTJaeT+PqT6G89T0LOKX1OTZsjkQVgoOV2qHU8QDk8mHNu
Z0UUZ1xvBu5UNj/YWT9ef2SwpLm/av94ywm294m9rbt/a8NA2f7nFfufNh82
vXofc4GkIp5xNP8Zze60RpsLFA9AdQI8yK+cK/saLXVgX0JGZtLwhQjZEHoS
Q4dnk3Uj4XpDercxCVr8KUfscTQzKysJoprSbA96SrG5VVsfB/i6LC85PP6R
GQMQKS4JJ0uaJPKyQn/CjtDLQPL0sKH900TLx7GGN58PjRruJ/jXAroTysBv
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
2TxZfWis8tDbmva7uw+8vnTD9GUE8ECOpHBlO0cs+mr47u727pK6z1dvR6dm
1WRC76WKXYL1XVFF1vJnoS0OHFvtsTQepFOc3eb5n+IBnQAUXfQEVHisBKQl
SUqBUQHddCcOz/haTfFWJ99hz1yzhvuDKbOEowyyxGtOz5sg6w5+iTQ34/SP
u4KmWHYyIz8NZM4b/UdGnSemgicNkTOzoVuO2Kc46yWWB4Wk+8OZFclZSgpm
BiOP+tzJ1mFDyZfZUoO/0pmpdrB7bMI+E986nT0wk243ZQ5YU02WSOOM44LT
+yIWN2g4BwJH9hJyma6xVYKmzxDIFVEkNRgMmx0WfzTISBJLKg2ATLX40NW+
sa1lp/+19fD2qvPQftt5ZFPZqc6u11M2lpd0Lx2e51mWhYXxG4Tsqi4A5pZo
NE7xIJ1Oo9xdKQgS9XPjObyrFovwvdfeVDbcKKq7sWnXmTMX3kcSJPUBn8sa
hmU6dtHhZFzEmVVxUmVF1fsPfRbIQcPwl+mNjgfU9wCRZLCAB1aL8+fEg8mp
mVmDCRRhWtB5TQIbF+MBTf0xa3E4vQFZmYcEa44HgFIOpxsacML/JjzwpND+
M28BDzbX3d1ce7W+/c60g1mAB2toPQA8sNkcQAjpdDb/hh/Sj//gwQrHsnhA
VlOCB6BihpKmmw/6Kve+qWweqer4Wtn5YfeR25X7X5y5ZBsa8xvsUpzBxSKT
PHJGvt58eLWp/Xbb4ZE7D0RvAIfMI40ReJbncM9VVY9/X8qh6k+N9tJ4kEqy
FA8ikRid9n8CD7S5GhnUN4NUIyLOSEBDIKlNKnrsz54wBA4aw23O7CFnpssU
fOCOf80oHrK5IKPclREkGlISzwhjNv9Hs2/AE3/mTl62hE/OBE5M+7stsQvW
xBVr5HkwPSsoJAsiye2nsprEY0954iiaVHCMw2cG9VjDjWPW6kl3nSmy25hs
MbMHZ5nDM9ljs5kjhlSnKd5uiR6z+l4k01OiECSd4fC2r0ZLGmmkpIKol/Ai
PkqSGAoEzRabyx9KC5gNIiwat7Lnb33dUnn2H1sP/b7rxK76i5uKjxfXnOm5
/nFsJkGdnWnQuiiKeSr4K+8a4lMdDsVNJovdbqeWCvr9eI+SxooyeOom48Lt
ux8oHmwp6Tp4/LHFJQD3sCwJTtQQx2aZbJpeVrjlGSGXgjrX23zM7/K9WYgH
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
hRZdU8fR9v4Xx8/p0ZReETF6vUAWyyFWOK/J88YDHJ8wXAgVPZsp+X0RwAPg
UqMTeu6+BwpN1WQ8oFRDVxSAZgOuo+TW9RvZ8o+u4Ia3rg53Yp03tcGT3ONL
nGHyL8pSlHYypKjd92n6NSb3/Uig+/H4mieu/vH4D77Kj87scX/hcVEL0fkO
JWLTRTqbUCBLZtLghpJed7PHfnK6gmSOruTIUknQ/YxGDuZo/0OBDijQ9bbI
goN0BgCxWHgp2EL244oSZNkj4hJSTqWzgVDl1Uj+yOlXa/uOfrl634quo8t7
fv13y961m45fuu9Nl0nnA9hruhSYpMvVeXh7zu2j6TVBTcQzoDoADwqFQr3l
rlpvDW8crDNf0w+dfPH1mgNNXQdXtn2358DvYa5SqZkKoL7OibXSzK1yq7QU
Teo9CIcYh92Tz5VxzQVrWKRPgwdWMVs+sB+NsSOj4x6vH73sFhYPMAEyVWiA
B4EI4w5EMoVyQ+lbnQ4u+AMhry+QzRX+u/HgyQj7Nx781fFAkLVAlAU8YBLJ
emjYT4QHpA8WXRNjqbeHTgAe3OkafNS5/UbLABDC6SVdb/b8pttiNVdUTRSV
co2EtYfz82Wdyeu2iH7jVe7oFdfuww+7tt9s23Rpdf/FNQPHW3oONXfd3ntQ
Dyf0Iq8T13mFVySBWuGCPo+W58fFA0vvAfWSl3FMRMFQUgI1xyFdf1aunfSH
tw47u3zpNcFCpze12Zf4OZK9nK2+rOkuXffqulPTbybL+22BTS/d6567141E
tvgL3zmzhxypy5HiSFVHB8IqjUCsEj0qqnTNw3qMCOrDQfwfyLIGYJ5qmlal
PyGikRWcKyoZgODrDVfi0K+KZGBBlejyHZrJBhiVuN6yI/pNUGrxTMkTEi/e
CGzafXlF+y9frPrh8+a9S9r2r1p/5MwN25i/VJGpOx9ZhFEk/T1S5dPgQZxL
Ix4Ui0V0C5zyNjUKLIKo330SWd19eEnzrs+W9m/accgXyVs6CVRjKu2HwwNB
EAEPnA5vw+IBWDpoETcOHqDvQcPiQSabDwTDuMzlfzEetG06DniAcQ/+xgPL
5y+GB2VB8oVjNpebTabk+noKnwAPDEdn9D0Ix18fPAZ4cK9ry5OuHQ/WbLnX
tvX80m77/pO6J0mm1LJ5vSJL8Szz1jZ6aej5gWOPB3+42zo4tLjjcfPGocXr
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
WyTqjMQ8kVggGPV7Q153wIPbntcXgBIBPX44Go7EItF4HMkWWClx+Cd5B/5J
x6FY5UEY7dlnoiyqEbc/YvWwBidQu6jJLc3d3qXCjrGMWpgmrjVN57VM5zdN
5zbM5jctFrYs5DXPZNfNXkUOBpeKWueLW6eLW0aKGvryqj/kV30sqvlY2rDy
tHvt1cB+/5R+8pP702Hk0MaY/LwzIvoZ1k/D5/I5Qh5X1OejXN6Y2R6weENa
G+y2sDt77AZ7wOqmnIGgyW7cV+v3VXA0tBnt0RAdgtVkD3g9EacDnQPemNsR
NGhtBwo07BxqjRqbXedywSZtcMFStFmsdqSJdvisFjSJg8lscZotDphgr4HJ
bLHZ7E6by2l1Okw2q95qNsAv2RzwKx6j0620uvcM7k8q68S66oNs/1H3SuPj
yeKW0ezqies1U3l1spyK4SslQ5nFI1fKhjNuDF4ph+Ww2P5E1T3iXt6JHRpi
RpdXY7GpzTaNxaqzWbRWi8ZuNtiNdrvF6zI5bAaT0WNzUN6gV2c+WFgbfv72
beeDnvvPNsdnXUp9wGjzGq1emGeTHY72ZKyGozEciuE4DJ+MCFk4uqZGVDK6
6vRGsj1Qo9WnizaV3qzUmWBByVW6nUMdHNAOdBY48VGo0ew7JT3hCzJJT59K
p4ue1At4Jjcnn6KfNiHRlpJrJKXulsoMkVzkIyK+4a1g/slcPgUAJHmCUZjc
gQgcQB3eoM3tt7p8MME/YfKGYvAjiD3wBbwMjs9ak83ihN0iQj4il8EXZsf/
z957OMeNLH2C/+DFXdzFRdzexu73vZk3Iy/RkyIpiqRET1GU9yPvLb2nKDpR
En37RnvvvQHQcJtVhQZbdCPpyfB7sRUlCo1GA4Uymb/MShMCaGT3BMjGCtGf
UDYXdMu2lXxLLoB+I10H1eKEn/vN9oAJxbTwUTaP0eI1Wt16k9tgccExOaM3
O5Fttt6uVblMVNDqTaiciYsvZv9Z//DPhsH/Udl7qG7w8aB93ZowuAIGOzzR
YaB8lDmEbmtzweN0JhuM1LqOWtMaVzUGtcEMFc6QCqNGamHboMKvSIUfqvQm
qORi5Ty8Drw78C94QfgI9yQ3gY/k5/B0uAD+wjF8pdyHPL3wVmjm4MbAMbkD
/BBeXEvZQTBc18EQW9a0MLVsKr2FWKprjehbHeWCy6DHUC8BJqEoUgEjKRUa
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
NTNHm1SlXZ+OtA7/s3awsn3l/puIzooMF+E1AR7QyPCDZrM5opoCnIBilQpE
t5M2OnXjcx9fjY7dffG4+/r73jHOF4fpwqQz8DgOJxOFt8gl0uaPy++f9oyf
/+tt+/W3J7sHYbyKWxdKOmYPnzZ0P/C/W0SJpHEsdAn3OYtNX3Ck9PzmQn5n
IScKW1eTmDdbkTA8CIfidpsb4EEmndvF9mCH/t+RIH89JfuMv8Md0um0xWLx
eP1KPqZvgAdmszkSiQh5eCB8vRr828oOvSLDgzQvedPSpcdLB0++IJ4LtR0v
PmqCDNZAkvJt8GBb5fMub73T5kIwFKFMFq3O4PUFYBUTbMDtKMxtA0jEL9Ae
/O0dpDxcQZQknz8rlsqiAI8YHuzeQ1un7t924BeW7dcIpv1Wl1drpILRmBxJ
WNzAYLtrD75kEW1ddLuSzQ3lAJsTQTYHQdhImYk6Lp9P83MFwpdZtCrNQRps
LueeWnhVdmrsyKl3x5qHjzZZn46A0Moh7QESlGmyNoEMMkiK26o9AITgdPmV
zQUeGTWwJCnzjg/elhbxBf0KfSLKWIHkt0uzfIpHEXAnP1grG//6x6GuypP3
j5VePlTU1X3xpUofJHHuk0yWheej+P5MIhvTmfQqtd7nizGMxLIkR88XB3mW
5TWsMcnnR0JgkUUIgV32+p4u+K6/C12cDHeNZi9OC09XJV1I8ifQw7GYABSZ
wZyf5VAWBGxSCIInK8UzSZffo7Ok7SGkbchKKPgw/CqWTlsdUY1+7Mad4bNX
ek52vCxt7DnSOHTk9Ntj7fNFHSvFHaqyTk3lWXXV2fWKMysVnatVXSu13QuV
7W9LTo8VN06UNU1UNA+WNPQVn+wtP/2qrn384i1Dz3h8US2YPZIvggJPZ3Ea
rWwWMTg5iR/QCI4Vcyk66/T7tSCVORyxTIYMBS0IxPAhVxiovICe7LQKtp7f
emb3dU2ys5HNBYAHWo3Rbney7JeaBG9aU5vWHdzUa9C/e/DoaWX9QHH9p9KO
D0eapw6eGittMb4YiWpNIpPDsj8r235wMLFgCHEQdwB92KIAjWksJQUTAY0p
ZnKnbH632pT2hFHaqRTyMCTziKbxLgG8TiJFO32RFR3VMzHbcb33WMNc5Zml
yu63v9fOlHdong5G9TasQEAsEwBAhmMJtkRvl6fveWIlbrX34HGOYdJFOVYM
+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
h/wc4aIYeOBgXj9DBKAX7g8owucTARsQtgMQ3QVQwgelZB50N6ihT4h6OYXh
cwGxzAXrYtTuY4q//cWfvvZ25+GHHZvOz1h64H9mbJ25/MjM5cdmrzgxt+Ps
gtWX5nac/8/SU/+Yf2T28tPz284uXXV5zZY7+0/8df0h87Y/5xVNN1+/8XBo
9ebzsxbvXdR+ZPXmyx0bLixq+3X2gp0Llu5tX3dscefBnxduWrJ639ELj1/2
AGzOC3IhEixGuHTQHZH7xdhAUGGgHyvQRNANQH4BOhoa9AJNAp8aQt/LAAxw
EIIoynCGogK3G0Cdl5bBxQBL+FkHHlA8AARNR/khnAFsoCTTsAee6chEh6ik
cIB3K0+Gk1Rqj4UHrd8UyjjiGGMSvkEwdhyifBVneJaDkQSMwRichDIABpxu
A10IoFQ4FId/KU6gfQkO8M1JTfCAap5vvUpvMoooh6HaECU6mTtKyWpV0wAY
iMEERQgwHGJKFgjYxUhFLOwQndulN3FYVquuR59CdTenJq1wgtaBTuw6RPkY
ZWtwK2qBh2JQnp5vZdeU4zl8u8GriS7pGOFpmdaS9Imt5ynjpYLeKUDnmoFA
RgA5E81QH5AmVFRB9eCkU59WkUF/TucXQMw58gj+BTEEZ6jYciSXMxkBVynR
iQkqp8YStZsRA2MxXyjhKXzi1AcHxVIFuj01LMTiCvxbVeu5UhEoXy6V1Kqq
a5pFFhgme0pwXDcNsspZvVKvFatQMagDiEiQlblMoVioVCs49zpc1aqarupG
K2EZTWeydAuEdYXON9GJJzJLWycTfEVVg8rDQMgWS8VqBZ4FDwVqzYBK1+9z
iE6Q0QlBOIAWg7YCgARNDZ+AuvS0TO0Nzw/CT+gUG51PHJec8lCGYgw6B0cf
SoFHK42aoqJUrpvFOspqSEijX6++X7D5xoy1V/7PsmNbTjzt5UvJKspgeFPV
DDz7Ce1Q0bDjCnyGWt3UDexmA3tNt+uaRZ0Q4BIc05NQBnsjtMAkOptGpwvp
FGErUZhEO9XYaTvoqHTkQjem02pwFcqTLlckE2F5Mo+G9/D16flRe+hymUwu
k80niiW5UnVV6s+SxePe8NpX3vXv5S398T290Qs+pTulyhUtUchnSzmlnE+U
i4lSLlXIZfPQcdOFDKZyrlTIlfM5NZ2rRZI1Nlz0hcu+uBrIWx+U6m9y9iqf
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
2SGjoSUpMR5wkDar05VKZ3HvAbFCzfQ9IEmuVnhQj0sQD6D9GwknwKaAyVsK
eIAdmw08CIQTJO7BNDxYzLowl+8B6T1oxIPGx1lkPCA9VCC5bMkgvabGPTDx
ALeLkELL5ypQ8v/Gg/lTSGYuABuIqgItHSoUBDxI55H+V19vdcuZcQ/Qgs5L
Dw9yEg9KMF3Sf/g9tPGTG62bb7TseLzikyf/3Hzn3W03lm2/ePjaD/Eimn0j
80yz8CAWi3k8Hp/PR9Zc0Kb4F732pjWMHKiGn5LppiijYQMZTeHEHaf19q+E
IwzXXfqVSX9/FYcPgvoODQGX2+uj/Nl8rrlh4mbiAVorxwl6O1yq8qDGRcVg
A1bVC6zuCInXv/Ns+/LByg0XlvdeaRm403fg5w1f/NTxycMVGy+/33Ny3cDF
z05+e/HusIWqJEtk6iNaLZITjXk9JYFlNRmbCayP0WALWcaRzBslMmll5Doe
lBke8MDm8mayRVLZ67m22HjQ6LkNAq0nu82z1AYXdBRXjQ+H4mDsAA+Qz2RT
8cBwUJyKBx5/hARVNv76Gkryz0zpbHgAQAVWOBgMA1wtETwgFApKA2wBvFCe
F5uLB3ixV5xvGir/uWzZ7wv9PbjwOikkjgeAB3Q45A3ShUpZndpPP891TKNP
6guJmrjU8ADUX0FBfcGpovZ8LLPr80ft2++37vz+o10//Neme/+7/+oHA5ev
/uAoyWhelW4EuGnCFo1GvV60/mmlglbMVBvWy36DTW3o5jZiAyLQQN2k8HxY
sGOBZLolKMiLTyQrvRohTSQ8mq5gasAOCsVUkXJ5gl5vKZNB6wUvJTxwesLP
XtgtdqpYwYswanqV0+NZ6ZdXgWPnn7T0Hn+39dDazTc3Hfit//MXbbt++sea
oXc7b67cdK//i6dHBocfPQ85YrUUowr1tRoMAFDRCIvAiQIemKhBo1tSBLL8
DpkRMq2zpR7lCI3v4O+LFc7lDdjdvmyuRKYpNeSaWf4XdXDBxAOH3bvUXBN1
jAfQFrZMOJYaHgArTsMDrR5Uuel4EI+lPW4qHI6CFV4ieICm8Uh6Jl3weuhY
NAV6dSngAfqgoeVKs5kSgPHfronzp5BMbCRBD0q1qj8Y8IUCZQYvs17fXifu
gdnOBTwIBAJLyvdARR3kellBc79TJWXUnt975HH37vutu755Z9Pd97Y9enfT
0Nq9N1/6KogiCqXFH1wwy0Y4EoP2OR0IVatomOMtl2RSdSMqYAMeoGUMER7I
mBBkIAQOzebgWZlnZIaVaoLMoCUnwDioxlA6UYsGHkh6KV2iXL6Qjyrlsn86
Hmiz8Kq50PPUhramGGob/w1SC838eJazeOIuOl/i0FqMVIR/+L3j4PGHbRuO
t/edbeu/0rZxaG3/zdUbbi1ff3NZz411m+/vOfbqzg8Za1CPV5GzojEBEgWf
Rp0mmszpMo+yAJ5UVCuiwtSXyYZfIOsgqdPmLUzDAzKbtFBmnR4a8CCXL5MY
aDPwYP4+hGnP3pBHDRklT8kouWHNCfO3030PKmXO7aLwxMZofWKjhnWjrKjN
jGDDMBzBA8ofQuEclwAekPVPBYIHeM2FxhUblwIeJJJZry8Qicb5usqdujUB
D5CiEVTAA78vmExkJUlpLh5gQjBSIIhqJlui6EgonGA5SdXIxEa13sn2Nx4Y
iREkkcyR52UpX654KNoTADxgSYK0+npkc12kseuA/LhUKgEekCWZ6lHc9RkF
Y1HxADY0fxk36Mqibg0U95/+5uPer9ftvrt86+2P+ob+seb4VxeehXM6CS0n
Cgs/uID9Ag16aRjwj6dzVCgKUiiWjebJW0Sx0xpyV5ui+vChOnOP5+w3dH1r
kxfRZOMX0P51eygvHcoUim9cXqerXzNddRfxBhHx5EocAlopyyzQi6Ryqsrq
MosdLQWk/iRNYBUyNlwR9WBZeU5lfnamfhhPnboxumH3jdb1F1p7Lrf1Xe/q
v71x+8ONO+6v6Tz/0erDG7dfPz/4ctyRC8aZqjCZ83UU0We1yFrDD7QZzzBT
FLz6EuzTmcKExWF3eCD3yPKss8mUWjAFk5ClluDZeb6Egz8bw0EKjyYggPHM
82JWEisopofCqYhxFKGk80VdrAhsWccXrUC7F+OB0dptwIPxMRs0POtL6YEy
ErAL54IvMK1Ntb/1coiym+HYYCgyPmH1+WmOF7F6XNC0GAmahgfGoFu99sGX
0MykA1GbjQqFUooyyzJMiwAJ5i0a8YAXhVgq6/LRoVicx7bEzEwTDhcZD+Cu
PKdUymw6lQ/QEcADaCo2cWIjeXAyvgaJYEUpUyiHYslIIl1hBUEx1zVQJZHX
mup7UypVAoGQ30+nUhkyD6Up27TGmqCokGP+YCQQTeRKVeyubmTZPMX+L4IH
ioontkBelyTNESkeGXy6euBM+56ba3fcXbHx2oftJ05dG85VcMcyPIWy8IML
dTxAHfna5GIA8UzBH4rR4ViuVDZq08IHuTXLgKFMppkubE2gyZzOl2w+yhUI
J4vlPwkPprOBbOCBGmcqeUQDyGkEtULkqizXgGEVviZUqyIvkT+AuQUTGczq
D0fovRcft+09v2bHhWW9Zz7sPLum70bv9m927Pttdfvl/3pn/4fLD23fff3a
rTGLo1wo6yw36VpGlsV8m6Wv5t5IRwE8WyZbtFidDqc3ly+S5VnfEA/w7BOd
0zQG+4kaniHIL1LWU2VxjIo+94d8xUpRA35SZIXT+ArKOUAFBYUuwX82SIMM
qhKbMQMP1EXEA/Le5VnxoMYygAcTFpufChA8WIwlaf4ID3SMByhShJUKLz08
ADPn8FLBaIyTjGm8Wr1nuFl4IPBqrcoTPCCr9zYPD4wHR+MLuKQBHqTyJbB0
oXiqjPAAeeaTX8oShztMm7YRPKCowJLCA1HVAQ98gTAVjoMh+A/DAw2PPUFe
l2XdHa+cu/eiY8+Vlu2DbbvuL++/+lHHyUt3bUZbUpbx4s7NwYNEtgj5T/DA
yFpj/uFCpmUR8GCWjnS1wUwYotT39fhCIisxvMjICm+8EQ2ZRUhMidN9Ee7Z
ROrWt44vzz5p23nu3a6Dyzae2vrVNzsP/7hl3+P+3Q83bL/33x8eWNN15sDh
J998T3sDUolBIxGiPGkKtHrY6j9Xt6ua2VVYstpcTpevUCybronz40GDqQIL
REI+kqEPWWsIV2G1p46eud/av/+jnt0DRy78YqPQ2AdZo1MkDpOoj7cmo5G1
6XigAx6wbpd/YtwOeCAZQd3J7aQm4gEIwQOL1U7RQRbU4994MNstpuFBMJqw
uX0mHkh45S9ZVZqIB5Kos4wIeEBTYWILmje4MDse0JE4SAkUDBo/rFcBRViM
/JljgywqFstLBw9IzSR4APrfS4c8NPBB7j8SD5AHgqx7k7Vr31vW77/+Ttfx
loFb73dfeH/d8Sv3HYyEqhU0JA0f/gXd5sCDZK4EeECFov//wAMZ+/hP7utL
UBsBD+sfUY2WVLREMnqDvB5Ia09eRb84/V33zkurN516v+tI65bLa7ZeATD4
esjxxekXvTtvt6w/u3zd0YE9N249sIfiyO1SJPmsIR8zaMjLaCbnlLf8J6p3
M/9y+bLN7na5/cVSRVFnZYP58ADSq6gsxgNIMY5sJCLF63JVDn/97cr2Lz/u
/PKdtk//a/X2XV/dGLGneAG/SKCgIq/XPSQxHqh1PDCMGsEDsnQaWXhdN8Jo
T/otLNg2Hx5UmVogGLbZnbAneKD+aa9l7u0vjgeBSBzwgAwuEDzQmj24AGjK
czLgAeUPwb7ZIwvI2drEA0YQkzloiMX8oWiZFZA3UR0PcNuwaXgACqlQKBE8
SKezTZzuUe+9nIIHbn/A5Q+G46n/SDyQMR54EtU7v7j7v7z9f63cv3zjtXfa
z/x7zdHL9+xVAWUCwoNFcCafu/cA2gBkfN/Eg4UeC1sEPGjsJZjhySc1CGm9
Cgpb0IUycjPAZhya/LyKHBIm/NX7vwQOXXnWvWfoH2sP/WPd0ZZtQ9177+/4
6tfu7fc6t9xcv+NWz7ahbZ/eOX355b1vneGkjnoMNIQWvGS0vJG/japOU+9Q
gHme/3OzlOCB3eFxe6hSuWp2KbwRHohSlZASbApeHKVY0s9ceN6x4eLH605s
+uzhxn2P3ms/trzr6/2Hv/V4RA37o3LEVcEgLRTvYlY8sFldaGVVfrJXoX7f
Bd3mw4NKrQpg4HC6Q+Ho33gwPZlz4AEdjtk9/kgiSSI4yVMLWFPwgARVBivg
8wYAD5oYMnFWPIhn8r5gxBsIVzgRj60bhIzbhk3DAyhXBA9oOpjJ5IRmLMZE
tlnxwOWjnb5AKJb8D8MDMoIPtymKqjNa+m4kvOfM0/9n9RcrNg29333hg7av
L96xllhkBBUSXrpJeBBN5QDP4C2kciZvq399PFDnxgNpFjzQcGRiSVBqDBg7
KDysrLsj/PfDsT0nvluz/cq/e078q+vEuz2nV24d6tj7oGP3vVXrr7y74vjq
jrOffvV06J5r1FnL19C12PrSzaS7VcMKn2VrRrJmQMKftZkkQHoPAA/Kldrb
4QHHl1S0sJRM5l5BifH62K27767tQ4tELO8ZXNV/fWXvtdU9V9p6Lp09N+Lz
GH0AsojmrAIbCIiPZuBBpQZ44LB7AA84Fg29LmI75Y/xwOX2RqJxggeLka6/
OB5QoSjgQSyVlqf60DYLD8jkaLLmApnFtqTwoMYLsXTOQ4cAD2qCTPCAzFxo
Lh5AHc/niwQPstl80/HAHFwQFD2VK4JhAvMUSaT/0/AA3wtuk+Mke7jwuyt3
6r71443nVm25sWLjtWVdp89cH00XESPhJ2oaHoTiabuHsrm88XTmPwwPlAYf
g9n6EGRj8WUS5VGUNFZCMxVUnRH1MXfp8zNP3m3/Cl7ZPzu+fm/9+ZbtN1u2
Da3ecnXVlisfd59p33i1b+Dm2Utj4w4+U9QZCS2nmCsJrIScjtCMTpnjeVY0
wyDjsgqFloSO/NOzlFA3SDZXIngwf+9B3VZOzX9cOwSxhrNfBVsPJaJU1u88
tK3qOte25UHX9sdrNt9rG3i44ZOnnZvvfdxytrfv+uBleyxCoj7rvKCImoCX
l5RmwQO3F+opwQNVMWY0LIoxng8PytUK4IHb44vGEn/jwfRkzoEHvkDY5vZF
kynZmKXeZDwgYZEAD8iKjQAJSxAP3FQQ8IARFYIHJCYYGlxonmsiWMxcrgB4
AAJ4UB/1a8LWWH5Q4CBZS2YLbn/gP9L3wMSDdI23hfJjQebmb5Ge/fdaBm61
bL25vPvM11deRNOoCxrZC5lvFh4Eokmry2dxuFFDwJhu9pfHA21OPJjNIQEx
K3K9h5dQLOgvRiNHznzftuXMhz1ff7jh3Kpt11ZuHWrfe7djz52Pek592H60
c+DC9n23bz/wP34Stnv4YhXhhKgacxVlXRIVVpQYVcPuppqiyjhsaoO2gqIr
SZIoimi5lj9pk+uxGTLZotXmcrn9f4QH6hQ80CfxACAJu2vqrIAyLhBi9n/1
YGXPxdZNd9duub+6/2ZL/832zXc7Nt1tW399TdvFLQN3nvwQ43jEEqIK5UzC
wzKyGQ5uJh6woCLlBjxYcCv3x3jg8fpj8eTfeDA9mXPggYcKWpwec3BBVDXT
8aApeCBLBh7Eoim7zQ148HoR+hdomwUPoqkswQMOO/wKCvFPhvcqYveD5mxL
HA88KMcicPCaeKA3EIK5YqPH4/F66Fy2NE+8hIUurgQLVGNDlkiWUV5DS2yC
zrzwFp/aKxu/erx2x93OTx629F08PTSSr2Knb7SkYTMnNk44PE4vVaoxRhS7
pvgeqPUQO/jNo/XQNb1YZR1UwEEFCyz/dniAwzM2GoX6sDL+WuAVEBKSqsbo
Lh934eqLtr6T77Z8saz3TOvA0PLNVz/qu7Bq62DL5kvLuo+sXn/k88N3f/iN
jiS0WEq3u0tUmOFElJkCGEUd6AowAZIKIhrBlEzP/wXezLgH2VzJ4fR6fYFy
pTaPa+KUuBNGv55OageADfygzPAS9q589MTZs/X88vUX121/sGLD4Pvtp1et
v/Bx+6mP157u336vq29oxdoTA7tuDE/kRCOeA6ehsVZGM0L8GSksl6t+P223
O0OhCFpzoZ4OUOzqgufPfBMbq0yNRAYDSBAlRZKb6XtQhwR0CvDA5w3aLP5Y
NLvwCfqDzdS6YNRqLGN3+xxeKlMokpFRXlaaiwdkcIHnZBIfGyDBDEvYjI1o
UREvKmPMXAA8cPpoOhKv8hIGKqX+y2YOLgAPFAolqJiAB7Uaq+DVcZqSErPw
qLhtCHiQKZRRTJ5wHPDg9d/krHjgdvkz6cLc3qpNwAMFaRq9qurjVPqZOw94
sOnQt2u23+nY/WD1hgsmHqD5782b2PiXwIM8w71hRVdFWRCglaMJqHtGlURZ
EkSZxd16YNBrNZXjSGhNFOW5XNN/eZHcvPfWP1fsX7PxYu+eex+uP/fv7rOd
e+993Hd+2fqv12w8ufOLodsPR/1Uiamg+I+hSHnCFvbSKWhio8quocUmNTz9
Afn1oQjRdZ8teTL+0cJt5uBCLl92unw+f7BSZebpPZgFD5CoisxLMsptVkLd
H5mSfvT0d/9u2d+2/caqzddbNl4+ePbZo1+Sh0//tmLt0VUdJzv7B3s2D61b
f+r0pZ9TRTRNsVBL8VKJ53li9yVRI7USlA9NB202RzgchWMzHSQc7gJvf0k8
YBnJ7wvZrVQinl/4BP3BNg0PHB6/iQckiE1zBxcIHgDtRyNJu81NYmssHTwA
XI4kM5BjgWiC+B4skZkLkqTk88WlhgekwZUtVgAP/KFYIpP/H+JB4+CCri/e
4IK5zcQDFHxUR8vwjfqSgAc/Omvbjv/Quu12+677q3rPn7o2TPAABzFumu8B
4IHF6XX5aMADHBxVbc7ExrnxwO4PvB0eyKpQD39kTGWE561yUFXxCkpgxRUd
Ghm/vaSG7o6u23RhRe+FD7vOrei72Lnrds+nD9ZtG/qw63hL/8m9R+9/86Mz
EGUV8pYknSlxfir8atQKWMVwqCteNZZqFBq6Dur9BlLdsXshN5ME8oWKy+33
U6FqjZ2DDf4AD0QRRcIjXpvjrnzfzov/68Pd7Ttu/Lv96zWbzn7zWxSe0B9S
vjr+eN36r1d3ntjy6d1l7Ud6t5+l4izkAq9wmi6Z14RMEwXUi8EwnNfrt9ls
kUiEYRgj2Wrz8QCMnc9PEzyQZJUM0yz49kd4AMLURMADpz2QTpUWPkF/sE3D
A+xSTi81PCC+By6nLxHPzJhGvJibSuy+iQc1Xggn0ihSRCxJfA+WSNwDggc+
H0XwQMWLQTQlJdMGF0D/50rVPwsPyHgTcbxcTN8Dc5sLD8qyPuZPvfSVnlHS
p+efm3hw8uorEjWxuTMXEtkiwQMU11ojwzrqUsADUdULFcbup20+Oldj31Rh
m9ER8dqgRggCEc8sIFa8xOkTrsqVm6+2773c0n30/faTy/oG1w3cbt1y9b22
r//ZcqBlw4ltn9/87reAN8jwEipRiqiLjKTyoq5oUKFejAw73a4aW9UM9BDI
8gjYODbgwaL0Hpg1q1CsAh5QdLiGmWpWwelSJ1vJDXiA1b/IC6jji1P1b372
t28+s6zz+LqBwX+s3r9p79XnlrSIH9hNVQ4cvbe87WD/nlsruk980Hbg3g/2
iojeGtxaEnWOwUtwiSjarY6DzEMjxWKxRKNRDi11jrb68igLmzmviQfBUITg
wWI0OufFA5IngAeUP+x2hnLZ6iKkaP5tGh54qKDLH0jnC4oR405rLGCLjwfE
01UStWQi63FTsMfeGgt92zmTMw0PqhxP8CAUT2G33Ek8QI5nzXNNJDMXQJvR
dBAAXmtYSnKRt2kKCnn1l6r+YORPwQOb1UXwwFySadqfmjW4UFHQ4MJooDYa
1Q9dt6zZfgfwYOX6cyYeNHfmwux4sMCJeX08sPkoq5fKVpm3wAMVBfmVOEnm
RI2TEBiwCprPn67qEx7m5mP3viOPuwYurO45sbz7VNeue8AGq/ouwfHKruOb
9wxevzdm9xREBXncabgPXFOMpMqSEAgERsZGXR43qEptMvUqXqatvpArObfg
MarJ8/7P8MDIfOx7oMo8jnyYqejnb7xo23y+bcuVjoGr76zed3rwl1hazudQ
7BQFuSVYV3cfAjZo3XTlo45jnx37ho7LOJQHukGtXI/Pje8q8IrL5ZmYmIjH
o2RCh7mk3cL7kM3nmshwrB8aT8Hw0sEDc3AhQEe97kghzyxCiubfpuGBLxB2
U0ETD5o+c2Fp4gHyzq33HpDBhaWGB5BLgAder5/gATnTlEEZc2RhGh5Q4Xim
8Aau6bPigcPugSJBHC/NFRsb/9RE34MJOjMWZMbj+rHbjrU77nbsfrCq9/yJ
wZfZ8pLoPbC6fG4/WhVL15cWHuTLNYIHmUrtTQssmlqoyGidO2N1aJ0F3mD1
38YS1x5M7Dp4f03/meWdJ+FFrOm/snbL9dX9gx91nVnWcWLz7hvX71r8QVEk
6xGJWKRJZa7hMLzRWGLCYnN7fKYV1uvdVub0FVzWlUUYrNHfcHBh9t4DjAea
xEO5JTk27s3v+ur22o3nW/ourug5vbzz0E/PaKACMFuyiJ4vEKvtPXQXwGD9
3vtrt1xr33Lp5+epfFHPptWXz3zfPx71utJGBqgo4K3T6RwfH00kYrJM1iKT
G2c+LnD2vBYeyIpG/DkXfHsNPOA5JRiI+TzRJYgHdDjmoUOAB40TG5sYNXEJ
Di6A0TfxgBFEMrFxqQ0uEDzweHwUFWBZXm82HphhkSDjyJJMwVgK2on/QzyA
ItE4sZHgQcNzLjoeoOWmJ10TR+jqaFQ/fMPatut+5ycPCR5kSs33PUjmSgQP
KixX/+kSwgOr12/x+NPl6hv3HpB3UZ86kC0rY47Eox8cW/Zeat986uOOI++v
O/5R17mVfVdXbri+bP1g2+Zr76460L/9yovRHCfo1YpeKxmLFeIeAJWtMZUq
w2LDBrkXTWQnLGDu6HJZIF3BmlZ/DoMQFDzQwIM5xUEIFzZL38g1cR48UEWO
4AEr69cfjbT0Hl276dKK7nMfrjv21akfgzEcc1XWZV5AASJ4/cGPvvatl/v3
fd+6+dZ/Lz+849P7hw49/PLzoRUfbf7X/2k7fPBKiC6wNTQ9ASQSiYyNjSRT
UbwuJI6bVI9ivaCZ85p4EApHm44HjRMbRUELhxJLEw8CkTjgQSqXr8/nXRJ4
sIRcE6fiASfJyVzRh9cfXFKuifBWAQ/cbm8jHjQFq0jJkfGyXiQsUjpfAjwI
JzJVtALs626z4YGPzFyQcSeNVh/QnKN4LIj5m4oHKsYD5MtWw66JL32l4aB6
cHCsY/eDnk8erd5w4cTgqzTuPRClxeg9MDu9TTwghJDKFW0ur9tP1Sbd/xYc
D/QpeECqUn3evmYMDEA5yZcrdg/ggS9drsmNOEH+r5uDMuQK9Z78eoc2KWNV
QQ+n+G9/dm7fd+Vfy3d9uO7LlV0n1vRdWtN/hfgivt997uP1Z3ccvHf3O1cg
pjKcrtZnI8pVHkWmUEh5wqUXXqiq5TkhlMyPWt12O10qCIaJw/fVVL2evQp2
eeB1jdW1qXigNexnZEvDpr723nA0JKtgOx1oYmMFT2ycdjdzb0a6Mz5r9U43
FU00ADuayCufH7v3zxV7u7bdXN0/2NJ38YWDY+H6JZ1ldYHTcwWpWNMf/RwC
fuja9Wjd1nvLOy/3bL29au3RlS3729o+++C9rrNn7gBokdchCBJN06Ojw6lU
QiPOOYrUYD4WtMips4JBIx4EQ5FGPFgkQpg8VMke62bDyELrIhxJ+nyRfGGJ
+R4wXDAa8wbCgAdmUGW8b/RAUOv7WfL8D+VNt/rERgVPbHSjiY3SYoblnLmh
RiL2PUCPQ5YnpiNxwKoantgoGwtGTQHC19/eND/nEijtuXzR5fb7/DTDGquZ
v8WSZG9392l/JE4spERxsgZNV18wGk3lGHG6s7CiTjaIpl0TzgiibC5WWypX
cdAzKp0pipLxyGYdR6vxKcYjkwsa51VFVuESMj6tmMUYzpgnG87jB9FmQQ7S
UwEa1RSiZRUUxwEFiCnyupXOj/grryj5yNWJ9u131+/5pmXDpaMXn0VyqAsX
edHXE9OoxPBVpyePnFdxZB0cbUc2CqFh/Q0xz5vfooOGxyGoL2lqNp/z05SP
8hdKRTwBELQ4j3/ZkOG48sGTmQu2zlaXjRmRoPNBNJUM1avkIzljnCThpuFe
Gsn/aVGOJRJRB35QLJfsbo/F5UqWwU7rjIacByC7sA5S0foIUlXmyiDIXIl4
HaGipqc1JQstL+QpWJL0587cV+d/au0/987qI/9adXxV92BL99W1vYOtGy5+
2H70w/WH+w/dOHn3WaKmFznkjKfgaxuehgIK9INjHmnkOeEx4DQkxpNK/W5z
OtwBHu7B6noZLUtEQjBCHYOk1lRFJpmnINaZzErccaaZ5tnsMEGhiDRzDLcB
fqbscTaKZI8zUyJZik7gixcKJcpHRyIxpsqKIorAQs4reBmQ+l4x0qLglcdV
nG5JRtNAsa6Cx6WjSsfG0x91nOze+ejDrku9ex8NU3pG0F+5xQc/Bs5efbn/
yKMvT/ywYefN5V1n2zbf7Nn1zcreodV9N9o333m/9fCHK7cO7D5IhZOoyiNq
V6vVMuX3WsYnUom0KqCygGeWYC7R0CjttPJPivrMkk/qxbTeeFNIvZgpZshK
CS8loeCiTLKaF6RQLO7y+bPFktLQFp6WmGlCFAWpoZppC2bUQXJg1lbTFkzX
0jqhSvRgjIB6cGTUgSMHY0mXP0CFwpIyWX/JfWfNokZ9NV2Ba7rplzVTTOXW
KEbFVqe4q0GrHPAAsssbDOarVbOhgSajaZpcjyiOVcBk2A/SYfXaUkfyhv4I
o5qoxmwXpGwbcETGaoHn9UAwZrF4UumCaf4aTckfyjQz0WhGZ5V5zC4a3FQM
PAB1li+UgKmisQSxXAQPNLzy2dwrq859/XpBxVmtyw1nTFFmiEx+3BCOBdRp
PJ1zemhfIJwtVHkcsknWp2cILuv1pn3DGTO7pKlCtKaoGmmbljzzZ4pa/31d
iN4FXc4oeixbdgdisBdnRO2Wzeo3VQgeoDHl+qsplioUHXS6fMlUnhdUM/31
p5hSPMgZSZ6s/qbCmVdUMiEUTaGXFLRSDT6eZw6Ihku5IOtFFuHBGFUd9kmH
Lo+2bh7q2nF/Zc/5I+efh7Moggwn4wCb2izKcJ4kmYEZZ6pHU03pdU85OCMp
YiMO4aeB5xCrTCUQot1eVzafIQmA8yCqweMGFZgyZ4k1B9mnyRxqHF6gqBoP
iD1z6qLwqsKTp6jUqk6vz+L0xPIVsMAsLjYKsZzoX3jdYU1QBUaCNj+vs3HO
84t/5O7ExPd+h6PwbCJ15YFl076bH3Sdeq/r/IreG6s33GnpudHaObi642xL
18mugbMHzn/zoyOSlPQ8LzOiQqyzYY2lelGWsR+eZqgoMi4fSGUmHL6QL6GX
MBtkNL1YTyKuEQyOMKwhRz1jTgPmI41Uv8l9vQSpdTwwqMHAANGIuarVVzYk
x6bUm97wkkl+F/MID2KRuIimW8z+NrDXJFp+Fy8mLhthpRWoGJqM1qTSOUH/
8ffY6p5TyzrPrd1y9/2uwX3nxq8+TR4etLZuGlzVe761/9LK7rPrNl5Z1nF6
Ref5FZ0XV3YPrt5wCzK5ZeO93j33v/nVM+oMVBX0kmoC4JJcrRW9HpdlZCId
y2pCfconKmSA+uxMM0dK6ZyKfKoVNjFgjvI2X3sH8AD0NoBoIpNFjRdSEFEV
l0yZFV0a0X2ucj4zhfijcV1SmfHyvoYQIyviclTkOW8k7KCpUCKBVYRM8oQw
PJ66K80hSmODZWbjZS48mLnBX5CaEGVCCBruBapUmUAkSkejBA9IauU6IUwT
XlWxyDwauBKIwLGgSSBwMFPQwxIGaBAyPmUeQOuCfCROiSQqE8dpNB2fmHAn
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
9q6QjEzoraZ4r/FZGA7FAMVWDoAQyHlLmJDITG8+7T77LFx4vT/++OvIw9Wp
Z+sPPvCff5O+2VKtCkxrQjNamCQwfNjTvN6UP/sqerQmbJ9+d6P/aenNmfSy
vkvM7uzSkfIbD291vqtuWqy+PVtxcwKGc9nVEe7VyYobs9W3F261PmjpedIx
+LJz6FXP8OuB8feDEx9AP338Svjum+b7gf3rgeXVF/nSq62ZZ99nn2+2j7+5
1f244tYks6oHVK0c7v08XhujsqOkob+4vrewpotR2Z5bfj+LcyeDfSe9pAk0
REZ5L7Oin1U1xK4bA6jPu7ZQeWOp+tYKmS5da318u+tFUzeilt7XdTcX6m8t
QlrRMFlaPVha3V99fexa8+yttvm73YvtQytji+/efpdIjT6TFwWt1lljelsc
CO39PCRMDkRmJxJnIDrtXvRTa4kqDUGpxivWeNZF5idrouGlD3cHlyuaBvIq
7mWV3c6taMnm3k8tbv6F0XSB0XylqDu1eOByYf+vjB721aXCOjQtWwDIoXo6
twJFp8ouH0ZztdUTaLq2ahyZ/XFaM3aR1fIr8+7l/Nspubcyc5tymXeZJa3M
sraSur4c3v0UdlMm717p9f4bnXODM28Xn2y8W5V//q7Z3rdJ1SGTjTj0Ei4/
KrnGFASJg/wdJXY+hki5rDLa9Xanyx9OxDWgUjqcYgDvuopRSCBKHHkGo32F
0cPhBMHNoEyR25YRkifNdMi1HcL252y4xqVyBwhoArnGZzyM+yJoG1qQdEPh
CqDV9WjrnCdu96CvA7ABqp/bD00Td3rRncDqA3HqUTAg4QZQJNEeTx+6H57m
DqP9d1Ab8ARHANUJ6eOS8ESO8p1BlBNM1JU/ip5gcxFqU/hAbP+2rZcofXJd
QEOu/1fqfTKtR651KfUeizNuOgwbLSGdxW+2RWzuuA8/itycEo6R8UISKeR4
gyRMiqCvRpv3E05KXSRUw2IrgstAfiYQCh4UpLZSas0BmcYNGO/bjnZ1U/du
TfX0jXjx8c7M8sbk0vr0g82Zlc2Fp9tAw7Mfb7cvgLTNL23OLb6XV9Kcz27J
Z7diQjtZitDmlHzuWB53MrdsLKN4MKWgO7Wgk1U+Un19oZg3WFE3fqNpsb3n
+ejEp6WV7ZdvpR/X1GKpUyR3KjU+nTl66CI8QXJvTpQAtAnk8CO/HYcBQuuI
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
4szJmwz8U/6a9KMLDo100SvsZo0JWyxiqonZkpitTObOek2eBxokisFek/tM
LlTb3WS3ySC7yXY3fgvGt97o5nK1Xm8GK+ykib41RUvfYTG9Om3nTJ+dkSEA
2GNyqDfa3DKOxpI9nFdGLfN+15vC3vzivsTcwdjrAk0fLeTpcg3veVkeedRT
riQRHzQH0FIAbu1MB2/aLrzyQvp435cmuu5MWFZULFN2XGg1w1kDgc0psedg
sM8se/mC+cSqVeRUslEsVMnGNtvzaKp57sJfj55+6fDp10EIhx949+4Hz5/6
xccnf3Hx0ANvPvHC519drtQH1khmKy4RNW2hgj0jmNKQOdyiUmvOqjV7y8L/
0I1oCKczOUApNZZpKpZTYLbwwN0YxbVxhqci8NLufTIVfq+Xtdc7eqn/9pba
MSzURDQWmKtwdzT3aIkFc7/bc3ZqAN3Fp+uZsbUHMKBhbk+6z5bKVb4xoulO
NXXa+DTXT7f4jGjvFcOeV8hSj00l2vrUWavY3HrCwrcWZnItFGBZ0cAt1VoD
jUdEcltvhot2e6gdPpuV5ivh+XgOmqKj8ZQm8PJJ2fxHd4ZrFr8fLopdJWH9
K9UmwAOWHdbZdM2H97hbJG9icIqKRYstOP9CXRQKjZSYh+r2ToLji88b7lT3
65vnvg/ZuSaS5flFnCC5yCkLOHdzf3q/wpUtTXmjtSzKlUYuX6a1pEjreicj
bw97LSJ6cwVNe9uPvQ4Y3mN25EEXNsueH40jLWqBk/lcLtv+Tq1Wh/ZJ4x2S
27bDPrCwm+YEeMOsZHMlvuw8zMreCwjcFKFI7YwnkkVV2c/3+8NYNJnPlamj
+0ATx3SMv2kvUcU3VJKYwMTp4HWZbpvMrXJ9JGS79a7V7FsRYfLu+98+9Pib
997/3D0nn7vz6K/vPfPyXSeev+v4y3efefPImXN3nHzzjlPnjj58/oM/RMpt
C08ZStQoNlRLRovKbpQ7G3OYHoQ27F0LSLYo1dNo9VhrdtTmRrXcyKYL3faA
bL2qsGbmsjRfzaLiDqxCRVTRzCnV0CZFm+j6zfp1lJ/9BXcPCAsFDI9AoWrU
O/lcpd3qownpTvnXb+jZ+w47a6J3bi8MerlSa7Y6NLhg7HhhY5dgultd4ERV
UTKYImo2m/V6fTQa4ZzfRves5mV3BtOZO89mfENjN1u9vZc3Ofhgb4Rh7yPG
+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
nx86/vxPDz313Ku/+/ZKvDdUNM0ZZbDcWQh//+va8fueOnT4qWOnXjt09KVj
Zy6cefzikQdfvefhF994/y/Zyoyt0aw7Q/8OHjiEQBuMrKj3gCYTzWcqcD0a
Eer1Ji2XHTQ8KBXrrNfHxQN7NqifeIDyUCxVUmIG6L5fPOCtOcvFg9FoFMDB
BY4HNLExnSmMxtMtNg8MHiTiaQgsHS2RSHhw8MVjVzygyoKYdDo94AEaUL4v
i0QdGrzgybJcLpcz6QJsMfCA6jvhge++B4QHqWQWNsUKDB4gAA+i0ej6+vot
PKDo7IYHpuPMaWUyObBBNBqHfVlB74GzkcEyQpjNtViyfOmzb3770T/e++S7
N9//5/Nv/f5fa5GxPLf3EmINC/sRaONrTgPd9iS0+x5IJM0YKspIlTXd7kTo
1PX1y2I8mpNktr+fZCi5RvPiH7958Mnzdxx/64573/jVS3/YTDQkw15IQdmq
TIZsjQdqsz4djqx4avTK2385efbcv93xyxNP/Pb2ky/+/JmPvtus9SeWSnsI
qh5CWC0ecNfE2VRJCpnNjWilUvNxWaTd8ADKn+OBO0HbZzwYDMeZbD6eSKJu
/kA8wMv2+300TIKGB3wXKuBBQkgHFg/EVB4lpFZtuWTrc++BZdFwv0me25FI
rN8bH3BkrhEW8ECSpEKhkM0UwVTzuTNf2E06HlaNB6Y9gNtq9oAHUEfkTOL3
4h9bFbDT6QAP1tbWgoYHQRtcsJwONCudzoKNE4mkLK1icexFPHCdEHR7vzHE
bzy3Gj2t0TezVWktVgyn0jMNcAyt4WyuYbfxPduAOQP9hr17tirJbcua2BsC
ORVCl9lt0/mIdk+6Ehd++cqHDzx18cwv/nz4/o+ef/Of8cJMtjc91Nw9YgyF
jS8okjocSACA/tQCQlz89PLJx944/thv7zz1xqkn3vv4i1irb+/xZ7CZlfbr
+IMHpGanEzkRF9fXwsCDAPYexGNisVDz4gG3FAcbn93xwN5Hkq1UVq7U9uua
6MUDWuYXCicUCgUWD3r9MceDrY1uA4MHuWxZSGQq5Ya7opdJ6XrARfcaeMAn
dqH1FBw8oOI0n8/Z+mwCSzRa94CCv3iA+o46TnggJNK07oGPeGC6C5y6Q0Vd
MPzVq1eDhgcBdE0kPBDFTCgUEYQUWtcr6D1wlPNW7wH1AOjz2QQF3rKNmoRW
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
v/vUR0ce/PjOMxcO3f/uvx9++ukX/1CoSrrOu5uJDVTL8blcNR4kEslYLAE8
8M83aRseUAcZFGwsmkT7q9noUgOH44G9V8UBx2d3POgN+plsHkYTeDCZzrXl
niI/bjwgzaxqRrPVARsgesHEA7ABlHa12aEYOCXk4MeC9wgcD1B67b2JRyva
03ZZ2A0PwC3FQpU4nFQ6rYXLv3cLD34UeFCuNEPhRDKVHU9m7Hpg8CAt5qG6
S8XadKL8j8YDVdMlukF11zdotsy33v/+8Wf+eOjUm7fd99rdp8/f99Dv7nvw
46MPXrr/sS8Onfzo7vt/f++Dn91+38Wf3P3Bnccu4cpPj711+6nXj54998Av
3r302dpgbHO7arkVcNV4QP4NSJJWqxNkPIC0mj3CA3JN9B0P+sNBNlcQ01la
NVFf7gn04x5cMNzdJRrNNuIWBDxYOrgAjc2UdqtLiRUoPIjHUpBOe6gqvo0u
7IYHUN2EB7z3wHc8uDW4sFd8dsGDYqm+iWiJObRTWFU0dH/xgLxXZlMlly05
C3dLK/GUXCkeGC4eSDgq6pQKgGkTApvDaFpjzbqabL98/qt7H3r53+7873+7
41d3HH/j+NmPjj/8yV0nPzhy5qP7Hv79nSfe/9mx9+5+4OLRsxfvOfvOmf++
8PQbf/r4y41Meeyuq6x48IAWVV7RlkyEB7R+SzwuRKPxer3u2acsKIMLULDt
Vp+yjuOB7cd0wPG5Vu8B8AAt693XPfhxuyZyPAACOX6Y7Za/eLDUNXEjKkBv
19s9Z11Ugye4b4HSiJde4IEi+zgWvBwPNjei+VyZfA+CMLhwyzXxGvHZBQ/y
hSrwQEznpzMpUHiA0pUUMo16R5HN/8F4MJv3dUOyhRkvPE2WVeSLZFloFTRG
E6HQ/OKf4Rff/PSBn79175mXTzxy7p7Tbxx76NyJx9699+wbJ37+9mPP/e7n
L15669J37/9p/avvU2JtMjWcPaJtD3zOBprXiBx0CBoeWLu4JgqJdKc9CBQe
tLudZCpNc/1Ue0attmTdj33gAZvYeAsPrhmj7XiAytkdzdYjiQDigenCLaTd
GsiSj57ky/EgaK6Jql2GaGJjPJXpDoMysXEBD5q9kebiAZnCVU1svAYe0M7y
vuMBlaXJWELpot4Daa7/Txhc2P5ke0ojwwNFHbN+L1Oezgak8DVN0U1Ft2TN
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
kmi6WalKNUmGrRiNp5DBcDwcTZrn6f8BxhcGeg==
     "], {{0, 623.}, {693., 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{340.5, Automatic},
   ImageSizeRaw->{693., 623.},
   PlotRange->{{0, 693.}, {0, 623.}}]],ExpressionUUID->
  "be387b12-2a54-45f1-a336-5a2fd724f2b9"]
}], "Section",
 CellChangeTimes->{{3.968989209624248*^9, 3.968989217620385*^9}, 
   3.97011113484022*^9, {3.9701111736450577`*^9, 
   3.970111202854113*^9}},ExpressionUUID->"e08b5d3d-a923-419d-95af-\
e7ec52e2432e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"A", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"L1", "*", 
       RowBox[{"Cos", "[", 
        RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], ",", " ", 
      RowBox[{"L1", "*", 
       RowBox[{"Sin", "[", 
        RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], ",", " ", "h", ",", 
      " ", "1"}], "}"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Refer", " ", "to", " ", "Denavit", " ", "Hartenberg", " ", "convention"}],
    "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"M01", " ", "=", " ", 
   RowBox[{"Mrotztrasl", "[", 
    RowBox[{
     RowBox[{"\[Theta]1", "[", "t", "]"}], ",", " ", 
     RowBox[{"A", "[", 
      RowBox[{"[", 
       RowBox[{"1", ";;", "3"}], "]"}], "]"}]}], "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{"M01", " ", "//", " ", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.968989582171715*^9, 3.9689895831484222`*^9}, {
  3.96898961951805*^9, 3.968989691063279*^9}, {3.968989761900419*^9, 
  3.968989915557734*^9}, {3.9689899670290203`*^9, 3.968989969445849*^9}, {
  3.968991688209652*^9, 3.968991698439546*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"3f8863f4-58bb-4628-b3c3-cadcce0f41a4"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"Cos", "[", 
       RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}], 
      RowBox[{"-", 
       RowBox[{"Sin", "[", 
        RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "0", 
      RowBox[{"L1", " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}]},
     {
      RowBox[{"Sin", "[", 
       RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}], 
      RowBox[{"Cos", "[", 
       RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}], "0", 
      RowBox[{"L1", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}]},
     {"0", "0", "1", "h"},
     {"0", "0", "0", "1"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.968989916137149*^9, 3.968989970777956*^9, 3.9690014419583597`*^9, {
   3.969593129060409*^9, 3.969593147705206*^9}, 3.969595268705414*^9, 
   3.9701115738234253`*^9},
 CellLabel->
  "Out[15]//MatrixForm=",ExpressionUUID->"05965ab5-a834-461a-8583-\
088b153562ea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Mrotztrasl", "[", 
    RowBox[{
     RowBox[{"\[Theta]1", "[", "t", "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"0", ",", " ", "0", ",", " ", "0"}], "}"}]}], "]"}], ".", 
   RowBox[{"Mrotztrasl", "[", 
    RowBox[{"0", ",", " ", 
     RowBox[{"{", 
      RowBox[{"L1", ",", " ", "0", ",", " ", "h", ",", " ", "1"}], "}"}]}], 
    "]"}]}], " ", "//", " ", "MatrixForm", " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "It", " ", "does", " ", "the", " ", "same", " ", "thing", " ", "as", " ", 
     "the", " ", "previous", " ", "command"}], ",", " ", 
    RowBox[{
    "i", " ", "like", " ", "more", " ", "the", " ", "other", " ", "one"}]}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.968990005021758*^9, 3.9689900734363403`*^9}, {
  3.968991606918486*^9, 3.968991620888982*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"aa696b1d-fef6-4704-9360-b551b604a328"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"Cos", "[", 
       RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}], 
      RowBox[{"-", 
       RowBox[{"Sin", "[", 
        RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "0", 
      RowBox[{"L1", " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}]},
     {
      RowBox[{"Sin", "[", 
       RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}], 
      RowBox[{"Cos", "[", 
       RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}], "0", 
      RowBox[{"L1", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}]},
     {"0", "0", "1", "h"},
     {"0", "0", "0", "1"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.968990074293915*^9, 3.96900144197303*^9, {3.969593129074729*^9, 
   3.969593147719574*^9}, 3.9695952687233887`*^9, 3.970111573838073*^9},
 CellLabel->
  "Out[16]//MatrixForm=",ExpressionUUID->"2a1a7695-70e0-44f2-9792-\
6d2c30e87d65"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"P1", "  ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"L2", " ", "*", " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"\[Theta]2", "[", "t", "]"}], "]"}]}], ",", " ", 
     RowBox[{"L2", " ", "*", " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"\[Theta]2", "[", "t", "]"}], "]"}]}], ",", " ", "0", ",", " ",
      "1"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"P", " ", "=", " ", 
   RowBox[{"M01", ".", "P1"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"P", " ", "//", " ", "Simplify"}], " ", "//", " ", 
  "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.9689910861854753`*^9, 3.9689910866384068`*^9}, {
  3.968991133985993*^9, 3.968991184160885*^9}, {3.9689912257341413`*^9, 
  3.9689912495910797`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"37832828-d36c-4e4d-ba22-0cfbb82eff66"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{
        RowBox[{"L1", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
        RowBox[{"L2", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{
           RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
           RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}]},
      {
       RowBox[{
        RowBox[{"L1", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
        RowBox[{"L2", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{
           RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
           RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}]},
      {"h"},
      {"1"}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.968991251177909*^9, 3.969001441988987*^9, {3.969593129090558*^9, 
   3.969593147733529*^9}, 3.9695952687405453`*^9, 3.970111573852427*^9},
 CellLabel->
  "Out[19]//MatrixForm=",ExpressionUUID->"f705d26a-6a45-4a9a-8d80-\
42e151ddf08e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"M12", " ", "=", " ", 
   RowBox[{"Mrotztrasl", "[", 
    RowBox[{
     RowBox[{"\[Theta]2", "[", "t", "]"}], ",", " ", 
     RowBox[{"P1", "[", 
      RowBox[{"[", 
       RowBox[{"1", ";;", "3"}], "]"}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"M12", " ", "//", " ", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.9689913135858707`*^9, 3.9689913940506487`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"3b4d7e89-a2a4-4e78-94e8-f2f42074df3a"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"Cos", "[", 
       RowBox[{"\[Theta]2", "[", "t", "]"}], "]"}], 
      RowBox[{"-", 
       RowBox[{"Sin", "[", 
        RowBox[{"\[Theta]2", "[", "t", "]"}], "]"}]}], "0", 
      RowBox[{"L2", " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"\[Theta]2", "[", "t", "]"}], "]"}]}]},
     {
      RowBox[{"Sin", "[", 
       RowBox[{"\[Theta]2", "[", "t", "]"}], "]"}], 
      RowBox[{"Cos", "[", 
       RowBox[{"\[Theta]2", "[", "t", "]"}], "]"}], "0", 
      RowBox[{"L2", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"\[Theta]2", "[", "t", "]"}], "]"}]}]},
     {"0", "0", "1", "0"},
     {"0", "0", "0", "1"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.968991396233324*^9, 3.969001442005316*^9, {3.969593129105921*^9, 
   3.969593147746208*^9}, 3.96959526875703*^9, 3.970111573866067*^9},
 CellLabel->
  "Out[21]//MatrixForm=",ExpressionUUID->"94a4c7af-70dc-4851-bdd4-\
a63d1e82bc64"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"M02", " ", "=", " ", 
   RowBox[{"M01", ".", "M12"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"M02", " ", "//", " ", "Simplify"}], " ", "//", " ", 
  "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.968991411900406*^9, 3.968991462073926*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"bcbffc94-fe0f-46cf-a2ee-05c3871577c5"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"Cos", "[", 
       RowBox[{
        RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
        RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}], 
      RowBox[{"-", 
       RowBox[{"Sin", "[", 
        RowBox[{
         RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
         RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}], "0", 
      RowBox[{
       RowBox[{"L1", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
       RowBox[{"L2", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{
          RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
          RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}]},
     {
      RowBox[{"Sin", "[", 
       RowBox[{
        RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
        RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}], 
      RowBox[{"Cos", "[", 
       RowBox[{
        RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
        RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}], "0", 
      RowBox[{
       RowBox[{"L1", " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
       RowBox[{"L2", " ", 
        RowBox[{"Sin", "[", 
         RowBox[{
          RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
          RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}]},
     {"0", "0", "1", "h"},
     {"0", "0", "0", "1"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.968991439020574*^9, 3.9689914635719347`*^9}, 
   3.969001442021044*^9, {3.969593129120975*^9, 3.9695931477588873`*^9}, 
   3.969595268774036*^9, 3.970111573880229*^9},
 CellLabel->
  "Out[23]//MatrixForm=",ExpressionUUID->"b37769f2-deeb-42dc-b385-\
239922c253e7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"E2", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"0", ",", " ", "0", ",", " ", 
      RowBox[{"-", 
       RowBox[{"L", "[", "t", "]"}]}], ",", " ", "1"}], "}"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "End", " ", "effector", " ", "wrt", " ", "second", " ", "reference", " ", 
    "frame"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"M23", " ", "=", " ", 
    RowBox[{"Mrotztrasl", "[", 
     RowBox[{"0", ",", " ", 
      RowBox[{"E2", "[", 
       RowBox[{"[", 
        RowBox[{"1", ";;", "3"}], "]"}], "]"}]}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"No", " ", "rotation"}], ",", " ", 
    RowBox[{"only", " ", "translation"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"M23", " ", "//", " ", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.968991562123357*^9, 3.968991703016877*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"e4348801-249a-4f95-869d-60f7e679e8c7"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "0", "0"},
     {"0", "1", "0", "0"},
     {"0", "0", "1", 
      RowBox[{"-", 
       RowBox[{"L", "[", "t", "]"}]}]},
     {"0", "0", "0", "1"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.968991664761644*^9, 3.969001442039723*^9, {3.969593129135777*^9, 
   3.969593147770978*^9}, 3.969595268790609*^9, 3.970111573893023*^9},
 CellLabel->
  "Out[26]//MatrixForm=",ExpressionUUID->"97919fad-4ee5-4a2b-8eb9-\
0c1312b5bcfd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"M03", " ", "=", " ", 
   RowBox[{"M02", ".", "M23"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"M03", " ", "//", " ", "Simplify"}], " ", "//", " ", 
  "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.9689917092848473`*^9, 3.968991743104951*^9}, {
  3.968991827157434*^9, 3.968991827908408*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"7f84268c-e4b7-48ce-bd8b-929b63912c31"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"Cos", "[", 
       RowBox[{
        RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
        RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}], 
      RowBox[{"-", 
       RowBox[{"Sin", "[", 
        RowBox[{
         RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
         RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}], "0", 
      RowBox[{
       RowBox[{"L1", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
       RowBox[{"L2", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{
          RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
          RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}]},
     {
      RowBox[{"Sin", "[", 
       RowBox[{
        RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
        RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}], 
      RowBox[{"Cos", "[", 
       RowBox[{
        RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
        RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}], "0", 
      RowBox[{
       RowBox[{"L1", " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
       RowBox[{"L2", " ", 
        RowBox[{"Sin", "[", 
         RowBox[{
          RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
          RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}]},
     {"0", "0", "1", 
      RowBox[{"h", "-", 
       RowBox[{"L", "[", "t", "]"}]}]},
     {"0", "0", "0", "1"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.9689917362506323`*^9, 3.968991743799795*^9}, 
   3.969001442056403*^9, {3.969593122989496*^9, 3.969593147783836*^9}, 
   3.9695952688076973`*^9, 3.970111573907229*^9},
 CellLabel->
  "Out[28]//MatrixForm=",ExpressionUUID->"a939c333-0157-422f-ae44-\
fdea094fdb0f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"EE", " ", "=", " ", 
    RowBox[{"Simplify", "[", 
     RowBox[{"M03", ".", 
      RowBox[{"{", 
       RowBox[{"0", ",", " ", "0", ",", " ", "0", ",", " ", "1"}], "}"}]}], 
     "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"I", "'"}], "m", " ", "extracting", " ", "the", " ", "last", " ", 
    "column"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"EE", " ", "//", " ", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.968991829660408*^9, 3.968991899184595*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"212a5d94-8cb2-4ef6-b626-2e2695bc76f2"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{
        RowBox[{"L1", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
        RowBox[{"L2", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{
           RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
           RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}]},
      {
       RowBox[{
        RowBox[{"L1", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
        RowBox[{"L2", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{
           RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
           RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}]},
      {
       RowBox[{"h", "-", 
        RowBox[{"L", "[", "t", "]"}]}]},
      {"1"}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.968991900459464*^9, 3.969001442073236*^9, {3.969593129167379*^9, 
   3.969593147796398*^9}, 3.969595268824196*^9, 3.97011157392091*^9},
 CellLabel->
  "Out[30]//MatrixForm=",ExpressionUUID->"73ccffde-a5eb-448c-98a4-\
8dffd5690e42"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"M03", "[", 
     RowBox[{"[", 
      RowBox[{
       RowBox[{"1", ";;", "4"}], ",", " ", "4"}], "]"}], "]"}], " ", "//", 
    " ", "Simplify"}], " ", "//", " ", "MatrixForm"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"We", " ", "get", " ", "the", " ", "same", " ", "thing"}], ",", 
    " ", 
    RowBox[{"just", " ", "different", " ", "way"}]}], "*)"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.968991905002652*^9, 3.96899193926672*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"823f7f30-57a0-4ad9-83dc-cff9a6eb6a63"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{
        RowBox[{"L1", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
        RowBox[{"L2", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{
           RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
           RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}]},
      {
       RowBox[{
        RowBox[{"L1", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
        RowBox[{"L2", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{
           RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
           RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}]},
      {
       RowBox[{"h", "-", 
        RowBox[{"L", "[", "t", "]"}]}]},
      {"1"}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.968991940496669*^9, 3.969001442090283*^9, {3.969593129183378*^9, 
   3.9695931478089533`*^9}, 3.969595268841189*^9, 3.970111573934373*^9},
 CellLabel->
  "Out[31]//MatrixForm=",ExpressionUUID->"e86d6973-c785-431c-82b3-\
3af0aac3a091"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Let", "'"}], "s", " ", "substitute", " ", "some", " ", 
    "numbers"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Data1", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"L1", " ", "->", " ", "0.3"}], ",", " ", 
       RowBox[{"L2", " ", "->", " ", "0.3"}], ",", " ", 
       RowBox[{"h", " ", "->", " ", "1"}], ",", " ", 
       RowBox[{
        RowBox[{"\[Theta]1", "[", "t", "]"}], " ", "->", " ", "0.3"}], ",", 
       " ", 
       RowBox[{
        RowBox[{"\[Theta]2", "[", "t", "]"}], " ", "->", " ", "0.1"}], ",", 
       " ", 
       RowBox[{
        RowBox[{"L", "[", "t", "]"}], " ", "->", " ", "0.3"}]}], "}"}]}], 
    ";"}], " ", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "We", " ", "know", " ", "the", " ", "position", " ", "of", " ", "hte", " ",
       "joints"}], " ", "->", " ", 
     RowBox[{"direct", " ", "kinematics"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"N", "[", 
     RowBox[{"M03", " ", "/.", "Data1"}], "]"}], " ", "//", " ", 
    "MatrixForm"}]}]}]], "Input",
 CellChangeTimes->{{3.968991985541741*^9, 3.968992098114346*^9}, {
  3.9689921308125343`*^9, 3.96899214153617*^9}, {3.968992480582911*^9, 
  3.968992496669086*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"cb2643d8-b993-4755-b618-01db7e59aed7"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0.9210609940028851`", 
      RowBox[{"-", "0.38941834230865047`"}], "0.`", "0.5629192449385474`"},
     {"0.38941834230865047`", "0.9210609940028851`", "0.`", 
      "0.205481564690997`"},
     {"0.`", "0.`", "1.`", "0.7`"},
     {"0.`", "0.`", "0.`", "1.`"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.9689921346296043`*^9, 3.968992142858561*^9}, 
   3.969001442107841*^9, {3.969593129199272*^9, 3.969593147820862*^9}, 
   3.9695952688582172`*^9, 3.970111573947813*^9},
 CellLabel->
  "Out[33]//MatrixForm=",ExpressionUUID->"58957d70-eb9c-4650-80e3-\
b138642cf95d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"A3", " ", "=", " ", 
   RowBox[{"Simplify", "[", 
    RowBox[{
     RowBox[{"Inverse", "[", "M03", "]"}], ".", "A"}], "]"}]}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.9689922185791397`*^9, 3.968992267753935*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"8d6b2eb5-06b1-4cb4-a7ba-0f2927e49bd7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "L2"}], ",", "0", ",", 
   RowBox[{"L", "[", "t", "]"}], ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{
  3.9689922680582647`*^9, 3.969001442125326*^9, {3.9695931292153273`*^9, 
   3.969593147833249*^9}, 3.9695952688751583`*^9, 3.970111573960844*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"84ba50fc-7c35-4c01-a353-1818a1389c44"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Inverse Kinematics problem", "Subsubsection",
 CellChangeTimes->{{3.968992512018152*^9, 
  3.9689925182468348`*^9}},ExpressionUUID->"f10ee13a-f518-4199-9835-\
768d369a4482"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "We", " ", "want", " ", "to", " ", "obtain", " ", "the", " ", "position", " ",
     "of", " ", "the", " ", "joints", " ", "in", " ", "order", " ", "to", " ",
     "reach", " ", "the", " ", "known", " ", "end", " ", "effector", " ", 
    "position"}], "*)"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "psid", " ", "is", " ", "the", " ", "desired", " ", "angle", " ", 
     RowBox[{"(", 
      RowBox[{"the", " ", "unknown"}], ")"}], " ", "and", " ", "xd"}], ",", 
    " ", "yd", ",", " ", 
    RowBox[{
    "zd", " ", "the", " ", "desired", " ", "position", " ", "of", " ", "the", 
     " ", "end", " ", "effector"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"M03d", " ", "=", " ", 
     RowBox[{"Mrotztrasl", "[", 
      RowBox[{"\[Psi]d", ",", " ", 
       RowBox[{"{", 
        RowBox[{"xd", ",", " ", "yd", ",", " ", "zd"}], "}"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"M03d", " ", "//", " ", "MatrixForm"}]}]}]], "Input",
 CellChangeTimes->{{3.9689925334680033`*^9, 3.968992679783733*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"a28a7c54-e7c9-4820-950c-f2a14d59c3cd"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"Cos", "[", "\[Psi]d", "]"}], 
      RowBox[{"-", 
       RowBox[{"Sin", "[", "\[Psi]d", "]"}]}], "0", "xd"},
     {
      RowBox[{"Sin", "[", "\[Psi]d", "]"}], 
      RowBox[{"Cos", "[", "\[Psi]d", "]"}], "0", "yd"},
     {"0", "0", "1", "zd"},
     {"0", "0", "0", "1"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.968992652698119*^9, 3.969001442142729*^9, {3.9695931292316637`*^9, 
   3.9695931478457813`*^9}, 3.9695952688921757`*^9, 3.970111573985691*^9},
 CellLabel->
  "Out[36]//MatrixForm=",ExpressionUUID->"a131acee-4995-4b48-855a-\
02ebfa5c7c13"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"M03", " ", "//", " ", "Simplify"}], " ", "//", " ", 
   "MatrixForm"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "This", " ", "is", " ", "the", " ", "direct", " ", "kinematics", " ", 
    "that", " ", "is", " ", "well", " ", "known"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"This", " ", "is", " ", "an", " ", "over"}], "-", 
     RowBox[{
     "constrained", " ", "problem", " ", "because", " ", "i", " ", "have", " ",
       "3", " ", "unknowns", " ", "and", " ", "16", " ", "equations"}]}], ",",
     " ", 
    RowBox[{"so", " ", 
     RowBox[{"let", "'"}], "s", " ", "remove", " ", "the", " ", "useless", " ",
      "equations"}]}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.968992682727407*^9, 3.968992699788316*^9}, {
  3.968992820861771*^9, 3.968992856045929*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"aa8be260-5a6d-4231-826c-130d564b1b8f"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"Cos", "[", 
       RowBox[{
        RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
        RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}], 
      RowBox[{"-", 
       RowBox[{"Sin", "[", 
        RowBox[{
         RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
         RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}], "0", 
      RowBox[{
       RowBox[{"L1", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
       RowBox[{"L2", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{
          RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
          RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}]},
     {
      RowBox[{"Sin", "[", 
       RowBox[{
        RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
        RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}], 
      RowBox[{"Cos", "[", 
       RowBox[{
        RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
        RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}], "0", 
      RowBox[{
       RowBox[{"L1", " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
       RowBox[{"L2", " ", 
        RowBox[{"Sin", "[", 
         RowBox[{
          RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
          RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}]},
     {"0", "0", "1", 
      RowBox[{"h", "-", 
       RowBox[{"L", "[", "t", "]"}]}]},
     {"0", "0", "0", "1"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.9689926892803373`*^9, 3.9689928958688297`*^9, 3.969001442158614*^9, {
   3.969593129248147*^9, 3.969593147858551*^9}, 3.969595268910212*^9, 
   3.970111573999153*^9},
 CellLabel->
  "Out[37]//MatrixForm=",ExpressionUUID->"e690d1aa-6bb2-4565-a232-\
2862714a7789"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"RotBlock", " ", "=", " ", 
   RowBox[{"M03", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"1", ";;", "3"}], ",", " ", 
      RowBox[{"1", ";;", "3"}]}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RotBlock", " ", "//", " ", "Simplify"}], " ", "//", " ", 
  "MatrixForm"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"M03d", "[", 
   RowBox[{"[", 
    RowBox[{
     RowBox[{"1", ";;", "3"}], ",", " ", 
     RowBox[{"1", ";;", "3"}]}], "]"}], "]"}], " ", "//", " ", 
  "MatrixForm"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "By", " ", "comparing", " ", "we", " ", "see", " ", "there", " ", "are", " ",
      "other", " ", "useless", " ", "equations"}], ",", " ", 
    RowBox[{"the", " ", "0", " ", "row", " ", "and", " ", 
     RowBox[{"column", ".", " ", "We"}], " ", "see", " ", "also", " ", "that",
      " ", "there", " ", "2", " ", "couples", " ", "of", " ", "equations", " ",
      "that", " ", "are", " ", "equal"}], ",", " ", 
    RowBox[{
     RowBox[{"so", " ", 
      RowBox[{"let", "'"}], "s", " ", "extract", " ", "what", " ", "can", " ",
       "be", " ", "useful", " ", "to", " ", "use"}], " ", "->", " ", 
     RowBox[{
     "there", " ", "are", " ", "only", " ", "2", " ", "equations"}]}]}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.968992911061788*^9, 3.968992957683352*^9}, {
  3.9689929906605377`*^9, 3.968993094478421*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"cd40e434-95f7-4ee7-bc06-2250530234a2"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"Cos", "[", 
       RowBox[{
        RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
        RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}], 
      RowBox[{"-", 
       RowBox[{"Sin", "[", 
        RowBox[{
         RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
         RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}], "0"},
     {
      RowBox[{"Sin", "[", 
       RowBox[{
        RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
        RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}], 
      RowBox[{"Cos", "[", 
       RowBox[{
        RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
        RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}], "0"},
     {"0", "0", "1"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.968992949883168*^9, 3.968992958363358*^9}, 
   3.9689930084458313`*^9, 3.968993097713953*^9, 3.969001442177162*^9, {
   3.969593129264402*^9, 3.969593147871111*^9}, 3.9695952689281816`*^9, 
   3.970111574013678*^9},
 CellLabel->
  "Out[39]//MatrixForm=",ExpressionUUID->"1633fe6a-3b34-4724-81ac-\
802ae465baec"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"Cos", "[", "\[Psi]d", "]"}], 
      RowBox[{"-", 
       RowBox[{"Sin", "[", "\[Psi]d", "]"}]}], "0"},
     {
      RowBox[{"Sin", "[", "\[Psi]d", "]"}], 
      RowBox[{"Cos", "[", "\[Psi]d", "]"}], "0"},
     {"0", "0", "1"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.968992949883168*^9, 3.968992958363358*^9}, 
   3.9689930084458313`*^9, 3.968993097713953*^9, 3.969001442177162*^9, {
   3.969593129264402*^9, 3.969593147871111*^9}, 3.9695952689281816`*^9, 
   3.9701115740149384`*^9},
 CellLabel->
  "Out[40]//MatrixForm=",ExpressionUUID->"c4361486-a964-4863-8bc7-\
0b6e959db944"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetOfEqns", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"RotBlock", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", " ", "1"}], "]"}], "]"}], " ", "==", " ", 
     RowBox[{"M03d", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", " ", "1"}], "]"}], "]"}]}], ",", " ", 
    RowBox[{
     RowBox[{"RotBlock", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", " ", "2"}], "]"}], "]"}], " ", "==", " ", 
     RowBox[{"M03d", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", " ", "2"}], "]"}], "]"}]}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.968993103081933*^9, 3.968993177824367*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"75d238e6-b0a6-44bf-ba07-35ec2b2226df"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Cos", "[", 
       RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}], " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"\[Theta]2", "[", "t", "]"}], "]"}]}], "-", 
     RowBox[{
      RowBox[{"Sin", "[", 
       RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}], " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"\[Theta]2", "[", "t", "]"}], "]"}]}]}], "\[Equal]", 
    RowBox[{"Cos", "[", "\[Psi]d", "]"}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       RowBox[{"Cos", "[", 
        RowBox[{"\[Theta]2", "[", "t", "]"}], "]"}]}], " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "-", 
     RowBox[{
      RowBox[{"Cos", "[", 
       RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}], " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"\[Theta]2", "[", "t", "]"}], "]"}]}]}], "\[Equal]", 
    RowBox[{"-", 
     RowBox[{"Sin", "[", "\[Psi]d", "]"}]}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.96899317833036*^9, 3.9690014421931877`*^9, {3.969593129279724*^9, 
   3.96959314788441*^9}, 3.969595268947029*^9, 3.970111574026902*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"b6e4b8e9-20ec-4ce1-ba07-ea38adcf2771"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Solve", "[", 
   RowBox[{"SetOfEqns", ",", " ", "\[Psi]d"}], "]"}], " ", "//", " ", 
  "Simplify", " ", 
  RowBox[{"(*", 
   RowBox[{
   "Good", " ", "practice", " ", "to", " ", "always", " ", "use", " ", "the", 
    " ", "Simplify", " ", "keyword"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.968993205828155*^9, 3.968993243350605*^9}, {
  3.968993288881852*^9, 3.968993310830741*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"b0c72399-5afe-4acb-82c7-2d338637ac89"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"\[Psi]d", "\[Rule]", 
    TemplateBox[{
      RowBox[{
        RowBox[{"ArcTan", "[", 
          RowBox[{
            RowBox[{"Cos", "[", 
              RowBox[{
                RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
                RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}], ",", 
            RowBox[{"Sin", "[", 
              RowBox[{
                RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
                RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}], "]"}], "+", 
        RowBox[{"2", " ", "\[Pi]", " ", 
          TemplateBox[{"1"}, "C"]}]}], 
      RowBox[{
        TemplateBox[{"1"}, "C"], "\[Element]", 
        TemplateBox[{}, "Integers"]}]},
     "ConditionalExpression"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{
  3.968993243757435*^9, 3.9689932947964087`*^9, 3.969001442261859*^9, {
   3.9695931293514023`*^9, 3.9695931478973618`*^9}, 3.969595268965364*^9, 
   3.970111574096373*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"4ae39c74-4912-42be-bfb2-a2a662e122ec"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol\[Psi]d", " ", "=", " ", 
  RowBox[{
   RowBox[{"Flatten", "@", 
    RowBox[{"Simplify", "[", 
     RowBox[{
      RowBox[{"Solve", "[", 
       RowBox[{"SetOfEqns", ",", " ", "\[Psi]d"}], "]"}], ",", " ", 
      RowBox[{
       RowBox[{"-", "\[Pi]"}], "<", 
       RowBox[{
        RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
        RowBox[{"\[Theta]2", "[", "t", "]"}]}], " ", "<", "\[Pi]"}]}], 
     "]"}]}], " ", "/.", 
   RowBox[{
    TemplateBox[{"1"},
     "C"], "->", "0", " ", 
    RowBox[{"(*", 
     RowBox[{
     "Compute", " ", "the", " ", "solution", " ", "and", " ", "in", " ", 
      "the", " ", "solution", " ", 
      RowBox[{"let", "'"}], "s", " ", "put", " ", "c1", " ", "to", " ", "0"}],
      "*)"}]}]}]}]], "Input",
 CellChangeTimes->{{3.9689933693807297`*^9, 3.9689934607635937`*^9}, {
  3.968993503629127*^9, 3.968993530014895*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"7e5aee59-bb9e-4080-b986-5d176a49c156"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[Psi]d", "\[Rule]", 
   RowBox[{
    RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
    RowBox[{"\[Theta]2", "[", "t", "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.968993532070366*^9, 3.969001442406415*^9, {3.969593129500853*^9, 
   3.969593147917472*^9}, 3.969595268992169*^9, 3.970111574264441*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"383ffaba-f4ac-43a8-a750-5e713fbc276c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"EE", " ", "=", " ", 
   RowBox[{"Simplify", "[", 
    RowBox[{"M03", ".", 
     RowBox[{"{", 
      RowBox[{"0", ",", " ", "0", ",", " ", "0", ",", " ", "1"}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.968995071970027*^9, 3.968995088843897*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"c964de62-a916-4977-b598-680f3854d979"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"EQI", " ", "=", " ", 
    RowBox[{"\[Psi]d", " ", "==", " ", 
     RowBox[{"(", 
      RowBox[{"\[Psi]d", " ", "/.", " ", "sol\[Psi]d"}], ")"}]}]}], ";"}], 
  " ", 
  RowBox[{"(*", 
   RowBox[{
   "First", " ", "equation", " ", "of", " ", "my", " ", "inverse", " ", 
    "kinematic", " ", "problem"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "We", " ", "need", " ", "another", " ", "equation", " ", "so", " ", "we", " ",
     "can", " ", "rely", " ", "on", " ", "the", " ", "translation", " ", 
    "part", " ", "of", " ", "the", " ", 
    RowBox[{"problem", ".", " ", "Remember"}], " ", "that", " ", "the", " ", 
    "last", " ", "column", " ", "is", " ", "stored", " ", "inside", " ", 
    "EE"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"EQII", " ", "=", " ", 
   RowBox[{
    RowBox[{"EE", "[", 
     RowBox[{"[", "1", "]"}], "]"}], " ", "==", " ", 
    RowBox[{"M03d", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", " ", "4"}], "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"EQIII", " ", "=", " ", 
   RowBox[{
    RowBox[{"EE", "[", 
     RowBox[{"[", "2", "]"}], "]"}], " ", "==", " ", 
    RowBox[{"M03d", "[", 
     RowBox[{"[", 
      RowBox[{"2", ",", " ", "4"}], "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"EQIV", " ", "=", " ", 
   RowBox[{
    RowBox[{"EE", "[", 
     RowBox[{"[", "3", "]"}], "]"}], " ", "==", " ", 
    RowBox[{"M03d", "[", 
     RowBox[{"[", 
      RowBox[{"3", ",", " ", "4"}], "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"3", " ", "unknowns", " ", "and", " ", "4", " ", "equations"}], ",",
     " ", 
    RowBox[{
    "with", " ", "3", "dof", " ", "the", " ", "robot", " ", "is", " ", "not", 
     " ", "able", " ", "to", " ", "move", " ", "both", " ", "in", " ", 
     "position", " ", "and", " ", "orientation"}], ",", " ", 
    RowBox[{
    "so", " ", "we", " ", "need", " ", "to", " ", "cancel", " ", "out", " ", 
     "an", " ", 
     RowBox[{"equation", ".", " ", "The"}], " ", "last", " ", "one", " ", 
     "must", " ", "hold", " ", "because", " ", 
     RowBox[{"it", "'"}], "s", " ", "indipendent", " ", "because", " ", "in", 
     " ", "the", " ", "other", " ", "equations", " ", 
     RowBox[{"there", "'"}], "s", " ", "no", " ", 
     RowBox[{
      RowBox[{"L", "[", "t", "]"}], ".", " ", "Depending"}], " ", "on", " ", 
     "what", " ", "i", " ", "want", " ", "to", " ", "do", " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
       "i", " ", "want", " ", "to", " ", "fix", " ", "a", " ", "rotation", " ",
         "instead", " ", "of", " ", 
        RowBox[{"another", "?"}]}], ")"}], ".", " ", 
      RowBox[{"Let", "'"}]}], "s", " ", "try", " ", "in", " ", "many", " ", 
     "ways"}]}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.96899361867308*^9, 3.9689937151049967`*^9}, {
  3.968994005967474*^9, 3.968994028240568*^9}, {3.96899406181468*^9, 
  3.968994072007083*^9}, {3.968994103235054*^9, 3.968994182263864*^9}, {
  3.9689942165885363`*^9, 3.968994219325889*^9}, {3.968994686207411*^9, 
  3.968994696958205*^9}, {3.968995062535863*^9, 3.9689951007639933`*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"ea5729b2-323b-4b55-aad4-b1461aef30fa"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.968993994659152*^9, 3.968993994660247*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"a9997b8e-9352-4844-86ac-1e364b70967b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"EQII", ",", " ", "EQIII", ",", " ", "EQIV"}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Theta]1", "[", "t", "]"}], ",", " ", 
     RowBox[{"\[Theta]2", "[", "t", "]"}], ",", " ", 
     RowBox[{"L", "[", "t", "]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9689942340081377`*^9, 3.968994279462326*^9}, {
  3.96899501487107*^9, 3.9689950465831947`*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"a398ddd9-f43e-490d-b174-cebad7749dc1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"L", "[", "t", "]"}], "\[Rule]", 
      RowBox[{"h", "-", "zd"}]}], ",", 
     RowBox[{
      RowBox[{"\[Theta]1", "[", "t", "]"}], "\[Rule]", 
      TemplateBox[{
        RowBox[{
          RowBox[{"ArcTan", "[", 
            RowBox[{
              FractionBox[
               RowBox[{
                 RowBox[{
                   SuperscriptBox["L1", "3"], " ", "xd"}], "-", 
                 RowBox[{"L1", " ", 
                   SuperscriptBox["L2", "2"], " ", "xd"}], "+", 
                 RowBox[{"L1", " ", 
                   SuperscriptBox["xd", "3"]}], "+", 
                 RowBox[{"L1", " ", "xd", " ", 
                   SuperscriptBox["yd", "2"]}], "-", 
                 SqrtBox[
                  RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["L1", "6"]}], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "4"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "4"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["yd", "4"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["yd", "4"]}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "4"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "6"]}]}]]}], 
               RowBox[{"2", " ", 
                 RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}], ")"}]}]], ",", 
              RowBox[{"-", 
                RowBox[{
                  FractionBox["1", 
                   RowBox[{"2", " ", "L1", " ", "yd"}]], 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["L1", "2"]}], "+", 
                    SuperscriptBox["L2", "2"], "-", 
                    SuperscriptBox["xd", "2"], "-", 
                    SuperscriptBox["yd", "2"], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["xd", "2"]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "4"]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "-", 
                    FractionBox[
                    RowBox[{"L1", " ", "xd", " ", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["L1", "6"]}], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "4"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "4"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["yd", "4"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["yd", "4"]}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "4"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "6"]}]}]]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]]}], ")"}]}]}]}], "]"}], "+", 
          RowBox[{"2", " ", "\[Pi]", " ", 
            TemplateBox[{"1"}, "C"]}]}], 
        RowBox[{
          TemplateBox[{"1"}, "C"], "\[Element]", 
          TemplateBox[{}, "Integers"]}]},
       "ConditionalExpression"]}], ",", 
     RowBox[{
      RowBox[{"\[Theta]2", "[", "t", "]"}], "\[Rule]", 
      TemplateBox[{
        RowBox[{
          RowBox[{"ArcTan", "[", 
            RowBox[{
              FractionBox[
               RowBox[{
                 RowBox[{"-", 
                   SuperscriptBox["L1", "2"]}], "-", 
                 SuperscriptBox["L2", "2"], "+", 
                 SuperscriptBox["xd", "2"], "+", 
                 SuperscriptBox["yd", "2"]}], 
               RowBox[{"2", " ", "L1", " ", "L2"}]], ",", 
              RowBox[{
                FractionBox["1", 
                 RowBox[{"2", " ", "L1", " ", "L2", " ", "yd"}]], 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["L1", "2"]}], " ", "xd"}], "+", 
                    RowBox[{
                    SuperscriptBox["L2", "2"], " ", "xd"}], "-", 
                    SuperscriptBox["xd", "3"], "-", 
                    RowBox[{"xd", " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["xd", "3"]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["xd", "3"]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "5"]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["L1", "4"], " ", "xd", " ", 
                    SuperscriptBox["yd", "2"]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "2"], " ", "xd", " ", 
                    SuperscriptBox["yd", "2"]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "+", 
                    FractionBox[
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "3"], " ", 
                    SuperscriptBox["yd", "2"]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", "xd", " ", 
                    SuperscriptBox["yd", "4"]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "-", 
                    FractionBox[
                    RowBox[{"L1", " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["L1", "6"]}], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "4"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "4"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["yd", "4"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["yd", "4"]}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "4"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "6"]}]}]]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "-", 
                    FractionBox[
                    RowBox[{"L1", " ", 
                    SuperscriptBox["yd", "2"], " ", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["L1", "6"]}], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "4"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "4"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["yd", "4"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["yd", "4"]}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "4"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "6"]}]}]]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]]}], ")"}]}]}], "]"}], "+", 
          RowBox[{"2", " ", "\[Pi]", " ", 
            TemplateBox[{"2"}, "C"]}]}], 
        RowBox[{
          TemplateBox[{"2"}, "C"], "\[Element]", 
          TemplateBox[{}, "Integers"]}]},
       "ConditionalExpression"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"L", "[", "t", "]"}], "\[Rule]", 
      RowBox[{"h", "-", "zd"}]}], ",", 
     RowBox[{
      RowBox[{"\[Theta]1", "[", "t", "]"}], "\[Rule]", 
      TemplateBox[{
        RowBox[{
          RowBox[{"ArcTan", "[", 
            RowBox[{
              FractionBox[
               RowBox[{
                 RowBox[{
                   SuperscriptBox["L1", "3"], " ", "xd"}], "-", 
                 RowBox[{"L1", " ", 
                   SuperscriptBox["L2", "2"], " ", "xd"}], "+", 
                 RowBox[{"L1", " ", 
                   SuperscriptBox["xd", "3"]}], "+", 
                 RowBox[{"L1", " ", "xd", " ", 
                   SuperscriptBox["yd", "2"]}], "+", 
                 SqrtBox[
                  RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["L1", "6"]}], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "4"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "4"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["yd", "4"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["yd", "4"]}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "4"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "6"]}]}]]}], 
               RowBox[{"2", " ", 
                 RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}], ")"}]}]], ",", 
              RowBox[{"-", 
                RowBox[{
                  FractionBox["1", 
                   RowBox[{"2", " ", "L1", " ", "yd"}]], 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["L1", "2"]}], "+", 
                    SuperscriptBox["L2", "2"], "-", 
                    SuperscriptBox["xd", "2"], "-", 
                    SuperscriptBox["yd", "2"], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["xd", "2"]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "4"]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "+", 
                    FractionBox[
                    RowBox[{"L1", " ", "xd", " ", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["L1", "6"]}], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "4"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "4"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["yd", "4"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["yd", "4"]}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "4"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "6"]}]}]]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]]}], ")"}]}]}]}], "]"}], "+", 
          RowBox[{"2", " ", "\[Pi]", " ", 
            TemplateBox[{"1"}, "C"]}]}], 
        RowBox[{
          TemplateBox[{"1"}, "C"], "\[Element]", 
          TemplateBox[{}, "Integers"]}]},
       "ConditionalExpression"]}], ",", 
     RowBox[{
      RowBox[{"\[Theta]2", "[", "t", "]"}], "\[Rule]", 
      TemplateBox[{
        RowBox[{
          RowBox[{"ArcTan", "[", 
            RowBox[{
              FractionBox[
               RowBox[{
                 RowBox[{"-", 
                   SuperscriptBox["L1", "2"]}], "-", 
                 SuperscriptBox["L2", "2"], "+", 
                 SuperscriptBox["xd", "2"], "+", 
                 SuperscriptBox["yd", "2"]}], 
               RowBox[{"2", " ", "L1", " ", "L2"}]], ",", 
              RowBox[{
                FractionBox["1", 
                 RowBox[{"2", " ", "L1", " ", "L2", " ", "yd"}]], 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["L1", "2"]}], " ", "xd"}], "+", 
                    RowBox[{
                    SuperscriptBox["L2", "2"], " ", "xd"}], "-", 
                    SuperscriptBox["xd", "3"], "-", 
                    RowBox[{"xd", " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["xd", "3"]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["xd", "3"]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "5"]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["L1", "4"], " ", "xd", " ", 
                    SuperscriptBox["yd", "2"]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "2"], " ", "xd", " ", 
                    SuperscriptBox["yd", "2"]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "+", 
                    FractionBox[
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "3"], " ", 
                    SuperscriptBox["yd", "2"]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", "xd", " ", 
                    SuperscriptBox["yd", "4"]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "+", 
                    FractionBox[
                    RowBox[{"L1", " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["L1", "6"]}], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "4"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "4"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["yd", "4"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["yd", "4"]}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "4"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "6"]}]}]]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]], "+", 
                    FractionBox[
                    RowBox[{"L1", " ", 
                    SuperscriptBox["yd", "2"], " ", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["L1", "6"]}], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "4"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "2"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "4"], " ", 
                    SuperscriptBox["yd", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "4"], " ", 
                    SuperscriptBox["yd", "4"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["L2", "2"], " ", 
                    SuperscriptBox["yd", "4"]}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"], " ", 
                    SuperscriptBox["yd", "4"]}], "-", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "6"]}]}]]}], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["xd", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["L1", "2"], " ", 
                    SuperscriptBox["yd", "2"]}]}]]}], ")"}]}]}], "]"}], "+", 
          RowBox[{"2", " ", "\[Pi]", " ", 
            TemplateBox[{"2"}, "C"]}]}], 
        RowBox[{
          TemplateBox[{"2"}, "C"], "\[Element]", 
          TemplateBox[{}, "Integers"]}]},
       "ConditionalExpression"]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.968994290294361*^9, 3.968994678606064*^9, {3.968995017289476*^9, 
   3.968995023474276*^9}, 3.968995107418907*^9, 3.9690014424489727`*^9, {
   3.969593129540489*^9, 3.969593147973234*^9}, 3.969595269079123*^9, 
   3.970111574337461*^9},
 CellLabel->"Out[50]=",ExpressionUUID->"24718898-d07d-4d39-a6fa-0ea481b15968"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Data2", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"L1", " ", "->", " ", "0.3"}], ",", " ", 
      RowBox[{"L2", " ", "->", " ", "0.3"}], ",", " ", 
      RowBox[{"h", " ", "->", " ", "1"}], ",", " ", 
      RowBox[{"xd", " ", "->", " ", "0.4"}], ",", " ", 
      RowBox[{"yd", " ", "->", " ", "0.4"}], ",", " ", 
      RowBox[{"zd", " ", "->", " ", "0.4"}]}], "}"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{"xd", ",", " ", "yd", ",", " ", 
    RowBox[{
    "zd", " ", "are", " ", "the", " ", "coordinates", " ", "we", " ", "want", 
     " ", "to", " ", "achieve", " ", "for", " ", "the", " ", "ee"}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"KinSol2", " ", "=", " ", 
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"EQII", ",", " ", "EQIII", ",", " ", "EQIV"}], "}"}], " ", "/.",
      " ", "Data2"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\[Theta]1", "[", "t", "]"}], ",", " ", 
      RowBox[{"\[Theta]2", "[", "t", "]"}], ",", " ", 
      RowBox[{"L", "[", "t", "]"}]}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "We", " ", "can", " ", "achieve", " ", "the", " ", "same", " ", "ee", " ", 
    "position", " ", "with", " ", "2", " ", "different", " ", 
    "configurations"}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.968994317673078*^9, 3.968994412124226*^9}, {
  3.9689945485255623`*^9, 3.968994562889659*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"3395c8e8-b71e-466b-98cc-1424d42b8e42"],

Cell[BoxData[
 TemplateBox[{
  "Solve", "ifun", 
   "\"Inverse functions are being used by \
\\!\\(\\*RowBox[{\\\"Solve\\\"}]\\), so some solutions may not be found; use \
Reduce for complete solution information.\"", 2, 52, 1, 23475038692557968610, 
   "Local"},
  "MessageTemplate",
  BaseStyle->"MSG"]], "Message",
 CellChangeTimes->{
  3.968994429393591*^9, 3.9689951118211403`*^9, 3.968995242346059*^9, 
   3.96900144250835*^9, {3.969593129620481*^9, 3.9695931480025797`*^9}, 
   3.9695952691147823`*^9, 3.9701115743980207`*^9},
 CellLabel->
  "During evaluation of \
In[51]:=",ExpressionUUID->"0c7398af-ab8b-4c13-a9f8-4eca90f8f4f9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Theta]1", "[", "t", "]"}], "\[Rule]", 
      "0.44556125394332635`"}], ",", 
     RowBox[{
      RowBox[{"\[Theta]2", "[", "t", "]"}], "\[Rule]", 
      "0.6796738189082439`"}], ",", 
     RowBox[{
      RowBox[{"L", "[", "t", "]"}], "\[Rule]", "0.6`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Theta]1", "[", "t", "]"}], "\[Rule]", 
      "1.1252350728515703`"}], ",", 
     RowBox[{
      RowBox[{"\[Theta]2", "[", "t", "]"}], "\[Rule]", 
      RowBox[{"-", "0.6796738189082439`"}]}], ",", 
     RowBox[{
      RowBox[{"L", "[", "t", "]"}], "\[Rule]", "0.6`"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.96899442939961*^9, 3.9689951118277187`*^9, 3.968995242349922*^9, 
   3.969001442512418*^9, {3.9695931296239767`*^9, 3.969593148005967*^9}, 
   3.9695952691185837`*^9, 3.970111574401495*^9},
 CellLabel->"Out[52]=",ExpressionUUID->"22508177-e832-4475-a0b7-fa1190830059"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KinSol", " ", "=", " ", 
  RowBox[{"KinSol2", "[", 
   RowBox[{"[", "2", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.968994879795987*^9, 3.968994886973485*^9}, {
  3.968995200384377*^9, 3.9689952087917347`*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"274d2640-2b1e-40d4-b449-245c48179daf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"\[Theta]1", "[", "t", "]"}], "\[Rule]", "1.1252350728515703`"}], 
   ",", 
   RowBox[{
    RowBox[{"\[Theta]2", "[", "t", "]"}], "\[Rule]", 
    RowBox[{"-", "0.6796738189082439`"}]}], ",", 
   RowBox[{
    RowBox[{"L", "[", "t", "]"}], "\[Rule]", "0.6`"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.9689952093722563`*^9, 3.968995244536038*^9, 3.96900144252948*^9, {
   3.9695931296402893`*^9, 3.969593148022768*^9}, 3.9695952691372213`*^9, 
   3.9701115744130697`*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"2b55a18a-2b4e-407d-a82e-d37eb407dd67"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{"EQI", "/.", 
     RowBox[{"KinSol2", "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", "\[Psi]d"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{"EQII", " ", "/.", " ", 
      RowBox[{"KinSol2", "[", 
       RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", "\[Psi]d"}], "]"}], ";"}], 
  " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Let", "'"}], "s", " ", "pick", " ", "one", " ", "of", " ", "the",
     " ", "2", " ", "configurations"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"A", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"L1", " ", "*", " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], ",", " ", 
     RowBox[{"L1", " ", "*", " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], ",", " ", "h", ",", " ",
      "1"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"P1", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"L2", " ", "*", " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"\[Theta]2", "[", "t", "]"}], "]"}]}], ",", " ", 
     RowBox[{"L2", " ", "*", " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"\[Theta]2", "[", "t", "]"}], "]"}]}], ",", " ", "0", ",", " ",
      "1"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"P", " ", "=", " ", 
   RowBox[{"M01", ".", "P"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AN", " ", "=", " ", 
   RowBox[{"N", "[", 
    RowBox[{
     RowBox[{"A", " ", "/.", " ", "KinSol"}], " ", "/.", "Data2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PN", " ", "=", " ", 
    RowBox[{"N", "[", 
     RowBox[{
      RowBox[{"P", " ", "/.", " ", "KinSol"}], " ", "/.", "Data2"}], "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", " ", "0"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"AN", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
       RowBox[{"AN", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"PN", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
       RowBox[{"PN", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], ",", " ", 
   RowBox[{"Frame", " ", "->", " ", "True"}], ",", " ", 
   RowBox[{"AspectRatio", "->", " ", "1"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.9689945946468697`*^9, 3.968994638999196*^9}, {
  3.9689947114009657`*^9, 3.968994985135638*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"275e5f11-e315-4958-a0e6-b9785bc5bde8"],

Cell[BoxData[
 GraphicsBox[{{}, 
   InterpretationBox[{
     TagBox[{{}, {}, 
       TagBox[
        {RGBColor[0.24, 0.6, 0.8], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[2], 
         LineBox[{{0., 0.}, {0.1292893218813452, 
          0.27071067811865474`}, {-0.059272486435067606`, 
          0.804044011451988}}]},
        Annotation[#, "Charting`Private`Tag#1"]& ]},
      {"WolframDynamicHighlight", <|
       "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
     StyleBox[
      DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
        Slot["HighlightElements"], 
        Slot["LayoutOptions"], 
        Slot["Meta"], 
        Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
           Annotation[{
             Hue[0.67, 0.6, 0.6], 
             Directive[
              PointSize[
               Rational[7, 360]], 
              RGBColor[0.24, 0.6, 0.8], 
              AbsoluteThickness[2]], 
             
             Line[{{0., 0.}, {0.1292893218813452, 
              0.27071067811865474`}, {-0.059272486435067606`, 
              0.804044011451988}}]}, "Charting`Private`Tag#1"]}}, <|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, 
            "PlotRange" -> {{-0.059272486435067606`, 0.1292893218813452}, {
              0, 0.804044011451988}}, "Frame" -> {{True, True}, {True, True}},
             "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360}, 
            "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 1, 
            "DefaultStyle" -> {
              Directive[
               PointSize[
                Rational[7, 360]], 
               RGBColor[0.24, 0.6, 0.8], 
               AbsoluteThickness[2]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                (Identity[#]& )[
                 Part[#, 1]], 
                (Identity[#]& )[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            ListLinePlot, "GroupHighlight" -> False|>|>]]& )[<|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
         "LayoutOptions" -> <|
          "PanelPlotLayout" -> <||>, 
           "PlotRange" -> {{-0.059272486435067606`, 0.1292893218813452}, {
             0, 0.804044011451988}}, "Frame" -> {{True, True}, {True, True}}, 
           "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360}, 
           "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 1, 
           "DefaultStyle" -> {
             Directive[
              PointSize[
               Rational[7, 360]], 
              RGBColor[0.24, 0.6, 0.8], 
              AbsoluteThickness[2]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               (Identity[#]& )[
                Part[#, 1]], 
               (Identity[#]& )[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           ListLinePlot, "GroupHighlight" -> False|>|>],
       ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
        4.503599627370496*^15, -4.503599627370496*^15}}],
      Selectable->False]},
    Annotation[{{{}, {}, 
       Annotation[{
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[
           Rational[7, 360]], 
          RGBColor[0.24, 0.6, 0.8], 
          AbsoluteThickness[2]], 
         Line[{{0., 0.}, {0.1292893218813452, 
          0.27071067811865474`}, {-0.059272486435067606`, 
          0.804044011451988}}]}, "Charting`Private`Tag#1"]}}, <|
     "HighlightElements" -> <|
       "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
      "LayoutOptions" -> <|
       "PanelPlotLayout" -> <||>, 
        "PlotRange" -> {{-0.059272486435067606`, 0.1292893218813452}, {
          0, 0.804044011451988}}, "Frame" -> {{True, True}, {True, True}}, 
        "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360}, 
        "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 1, 
        "DefaultStyle" -> {
          Directive[
           PointSize[
            Rational[7, 360]], 
           RGBColor[0.24, 0.6, 0.8], 
           AbsoluteThickness[2]]}, 
        "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), 
          "ScalingFunctions" -> {{Identity, Identity}, {
            Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
      "Meta" -> <|
       "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
        ListLinePlot, "GroupHighlight" -> False|>|>, 
     "DynamicHighlight"]], {{}, {}}},
  AspectRatio->1,
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DefaultBaseStyle->{"PlotGraphics", "Graphics"},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.24, 0.6, 0.8], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.95, 0.627, 0.1425], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.455, 0.7, 0.21], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.578, 0.51, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.4, 0.64, 1.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[1., 0.75, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.8, 0.4, 0.76], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.637, 0.65, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
    "IncludeHighlighting" -> Automatic, "HighlightStyle" -> Automatic, 
    "OptimizePlotMarkers" -> True, "IncludeHighlighting" -> "CurrentSet", 
    "HighlightStyle" -> Automatic, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotInteractivity:>True,
  PlotRange->{{-0.059272486435067606`, 0.1292893218813452}, {
    0, 0.804044011451988}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.968994986920437*^9, {3.9689950942801437`*^9, 3.9689951168727818`*^9}, {
   3.9689951870838413`*^9, 3.9689952463506203`*^9}, {3.969001442688333*^9, 
   3.969001494478527*^9}, {3.969593129778079*^9, 3.9695931480543003`*^9}, 
   3.9695952691738358`*^9, 3.970111574497786*^9},
 CellLabel->"Out[61]=",ExpressionUUID->"e64e6ee0-c4ae-4d6c-a338-3d92d7c1d66b"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.968993720205262*^9, 3.968993755984208*^9}, {
  3.968993789616346*^9, 3.968993843152169*^9}, {3.968993907089758*^9, 
  3.968993934852087*^9}, {3.9689939971498938`*^9, 3.968994004327942*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"de42a8db-4e3c-462c-8cb7-69f53173eb57"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.969593108101233*^9, 3.969593109900941*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"adf2a667-24ce-4a2e-820f-af2609f8e4f2"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.968991756018114*^9, 3.9689917587971582`*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"12163958-7d75-43de-bad2-f77fd6bc0b40"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.968991428943221*^9, 3.9689914299755487`*^9}, {
  3.96959308912356*^9, 3.969593089586932*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"b06722e4-1b7a-4924-a6f6-dda1634666ef"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Force Ellipsoid - 16/10/2025", "Section",
 CellChangeTimes->{{3.969593179581005*^9, 3.969593182252365*^9}, {
  3.969593658694199*^9, 
  3.969593668360984*^9}},ExpressionUUID->"d80482bf-3b6a-4d46-a37c-\
e46b5520c0f7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"EEc", " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"EE", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
        RowBox[{"EE", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "}"}], " ", "/.", " ", 
      RowBox[{
       RowBox[{"\[Theta]1", "[", "t", "]"}], " ", "->", " ", "\[Theta]1"}]}], 
     " ", "/.", " ", 
     RowBox[{
      RowBox[{"\[Theta]2", "[", "t", "]"}], " ", "->", " ", "\[Theta]2"}]}]}],
    ";"}], "  ", 
  RowBox[{"(*", 
   RowBox[{
   "we", " ", "work", " ", "on", " ", "the", " ", "plane", " ", "for", " ", 
    "semplicity", " ", "and", " ", "use", " ", "not", " ", "time", " ", 
    "dipendent", " ", "parameters"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"EEc", " ", "//", " ", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.969593188431005*^9, 3.969593286869628*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"0f8b4c41-db52-4530-86e6-600bced4a8cd"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{
        RowBox[{"L1", " ", 
         RowBox[{"Cos", "[", "\[Theta]1", "]"}]}], "+", 
        RowBox[{"L2", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}]}]},
      {
       RowBox[{
        RowBox[{"L1", " ", 
         RowBox[{"Sin", "[", "\[Theta]1", "]"}]}], "+", 
        RowBox[{"L2", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}]}]}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.969593287271744*^9, 3.969595269255068*^9, 
  3.970111574562009*^9},
 CellLabel->
  "Out[67]//MatrixForm=",ExpressionUUID->"a7bf4775-87f4-4a3b-85e9-\
581c079deff2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Jac", " ", "=", " ", 
    RowBox[{"D", "[", 
     RowBox[{"EEc", ",", " ", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"\[Theta]1", ",", " ", "\[Theta]2"}], "}"}], "}"}]}], "]"}]}],
    ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"let", "'"}], "s", " ", "use", " ", "it", " ", "to", " ", 
    "understand", " ", "in", " ", "which", " ", "directions", " ", "the", " ",
     "robot", " ", "looses", " ", "mobility"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"Jac", " ", "//", " ", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.969593302440269*^9, 3.969593401038677*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"292f6ded-b4dc-441c-99ca-362e98f0e2fd"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       RowBox[{
        RowBox[{"-", "L1"}], " ", 
        RowBox[{"Sin", "[", "\[Theta]1", "]"}]}], "-", 
       RowBox[{"L2", " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}]}], 
      RowBox[{
       RowBox[{"-", "L2"}], " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}]},
     {
      RowBox[{
       RowBox[{"L1", " ", 
        RowBox[{"Cos", "[", "\[Theta]1", "]"}]}], "+", 
       RowBox[{"L2", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}]}], 
      RowBox[{"L2", " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.969593338177561*^9, 3.969593374683219*^9}, 
   3.96959526927463*^9, 3.970111574574912*^9},
 CellLabel->
  "Out[69]//MatrixForm=",ExpressionUUID->"c4126ae9-fc8d-4c12-9a0a-\
04a7c830cfde"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"DetJac", " ", "=", " ", 
   RowBox[{"Simplify", "[", 
    RowBox[{"Det", "[", "Jac", "]"}], "]"}]}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "The", " ", "only", " ", "joint", " ", "that", " ", "can", " ", "cause", " ",
      "problems", " ", "of", " ", "mobility", " ", "is", " ", "theta2"}], ",",
     " ", 
    RowBox[{
     RowBox[{"it", "'"}], "s", " ", "impossible", " ", "to", " ", "loose", " ",
      "mobility", " ", "cause", " ", "of", " ", "theta1"}]}], "*)"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.969593406352213*^9, 3.9695934395450068`*^9}, {
  3.969593469963272*^9, 3.969593498403613*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"173f50e0-8d57-4160-8f27-db9951e413a8"],

Cell[BoxData[
 RowBox[{"L1", " ", "L2", " ", 
  RowBox[{"Sin", "[", "\[Theta]2", "]"}]}]], "Output",
 CellChangeTimes->{3.9695934993030653`*^9, 3.969595269293153*^9, 
  3.970111574588381*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"189333bb-b21d-42a9-a1e0-d4818621cb99"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[Theta]1singular", " ", "=", " ", 
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{"Simplify", "[", 
      RowBox[{
       RowBox[{"Det", "[", "Jac", "]"}], " ", "==", " ", "0"}], "]"}], ",", 
     " ", "\[Theta]1"}], "]"}]}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "there", " ", "is", " ", "no", " ", "solution", " ", "because", " ", "no", 
    " ", "matter", " ", "theta1", " ", "and", " ", "we", " ", 
    RowBox[{"don", "'"}], "t", " ", "fall", " ", "in", " ", "a", " ", 
    "singular", " ", "position"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"\[Theta]2singular", " ", "=", " ", 
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{"Simplify", "[", 
     RowBox[{
      RowBox[{"Det", "[", "Jac", "]"}], " ", "==", " ", "0"}], "]"}], ",", 
    " ", "\[Theta]2"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.9695935036859293`*^9, 3.969593606061091*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"3ea1a48c-b471-4c87-b821-708c0d60c6c5"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{{3.969593552143196*^9, 3.969593560352662*^9}, 
   3.9695936077832317`*^9, 3.969595269311078*^9, 3.9701115746016912`*^9},
 CellLabel->"Out[71]=",ExpressionUUID->"85ad7b50-9d02-4bbc-b5d0-1efd665798f9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\[Theta]2", "\[Rule]", 
     TemplateBox[{
       RowBox[{"2", " ", "\[Pi]", " ", 
         TemplateBox[{"1"}, "C"]}], 
       RowBox[{
         TemplateBox[{"1"}, "C"], "\[Element]", 
         TemplateBox[{}, "Integers"]}]},
      "ConditionalExpression"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]2", "\[Rule]", 
     TemplateBox[{
       RowBox[{"\[Pi]", "+", 
         RowBox[{"2", " ", "\[Pi]", " ", 
           TemplateBox[{"1"}, "C"]}]}], 
       RowBox[{
         TemplateBox[{"1"}, "C"], "\[Element]", 
         TemplateBox[{}, "Integers"]}]},
      "ConditionalExpression"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.969593552143196*^9, 3.969593560352662*^9}, 
   3.9695936077832317`*^9, 3.969595269311078*^9, 3.970111574602542*^9},
 CellLabel->"Out[72]=",ExpressionUUID->"e6f5e8bb-aa68-46be-80b0-cf477511fcdd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Data", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"L1", " ", "->", " ", "0.3"}], ",", " ", 
     RowBox[{"L2", " ", "->", " ", "0.3"}], ",", " ", 
     RowBox[{"\[Theta]1", " ", "->", " ", 
      RowBox[{"\[Pi]", "/", "6"}]}], ",", " ", 
     RowBox[{"\[Theta]2", " ", "->", " ", 
      RowBox[{"\[Pi]", "/", "3"}]}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"A2", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"A", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
       RowBox[{"A", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], "}"}], " ", "/.", " ", 
     RowBox[{
      RowBox[{"\[Theta]1", "[", "t", "]"}], " ", "->", " ", "\[Theta]1"}]}], 
    " ", "/.", " ", 
    RowBox[{
     RowBox[{"\[Theta]2", "[", "t", "]"}], " ", "->", " ", "\[Theta]2"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"P2", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"P", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
       RowBox[{"P", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], "}"}], " ", "/.", " ", 
     RowBox[{
      RowBox[{"\[Theta]1", "[", "t", "]"}], " ", "->", " ", "\[Theta]1"}]}], 
    " ", "/.", " ", 
    RowBox[{
     RowBox[{"\[Theta]2", "[", "t", "]"}], " ", "->", " ", "\[Theta]2"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AN2", " ", "=", " ", 
   RowBox[{"N", "[", 
    RowBox[{"A2", " ", "/.", " ", "Data"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PN2", " ", "=", " ", 
    RowBox[{"N", "[", 
     RowBox[{"P2", " ", "/.", " ", "Data"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", " ", "0"}], "}"}], ",", " ", "AN2", ",", " ", "PN2"}],
     "}"}], ",", " ", 
   RowBox[{"Frame", "->", "True"}], ",", " ", 
   RowBox[{"AspectRatio", "->", "1"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.9695936721215343`*^9, 3.9695937608636303`*^9}, {
  3.969593799730979*^9, 3.969593952197832*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"0c6b4545-f738-4290-8110-2c2d91efdf02"],

Cell[BoxData[
 GraphicsBox[{{}, 
   InterpretationBox[{
     TagBox[{{}, {}, 
       TagBox[
        {RGBColor[0.24, 0.6, 0.8], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[2], 
         LineBox[{{0., 0.}, {0.25980762113533157`, 0.15}, {0.2598076211353316,
           0.6696152422706632}}]},
        Annotation[#, "Charting`Private`Tag#1"]& ]},
      {"WolframDynamicHighlight", <|
       "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
     StyleBox[
      DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
        Slot["HighlightElements"], 
        Slot["LayoutOptions"], 
        Slot["Meta"], 
        Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
           Annotation[{
             Hue[0.67, 0.6, 0.6], 
             Directive[
              PointSize[
               Rational[7, 360]], 
              RGBColor[0.24, 0.6, 0.8], 
              AbsoluteThickness[2]], 
             
             Line[{{0., 0.}, {0.25980762113533157`, 0.15}, {
              0.2598076211353316, 0.6696152422706632}}]}, 
            "Charting`Private`Tag#1"]}}, <|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, 
            "PlotRange" -> {{0, 0.2598076211353316}, {0, 0.6696152422706632}},
             "Frame" -> {{True, True}, {True, True}}, "AxesOrigin" -> {0, 0}, 
            "ImageSize" -> {360, 360}, "Axes" -> {True, True}, 
            "LabelStyle" -> {}, "AspectRatio" -> 1, "DefaultStyle" -> {
              Directive[
               PointSize[
                Rational[7, 360]], 
               RGBColor[0.24, 0.6, 0.8], 
               AbsoluteThickness[2]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                (Identity[#]& )[
                 Part[#, 1]], 
                (Identity[#]& )[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            ListLinePlot, "GroupHighlight" -> False|>|>]]& )[<|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
         "LayoutOptions" -> <|
          "PanelPlotLayout" -> <||>, 
           "PlotRange" -> {{0, 0.2598076211353316}, {0, 0.6696152422706632}}, 
           "Frame" -> {{True, True}, {True, True}}, "AxesOrigin" -> {0, 0}, 
           "ImageSize" -> {360, 360}, "Axes" -> {True, True}, 
           "LabelStyle" -> {}, "AspectRatio" -> 1, "DefaultStyle" -> {
             Directive[
              PointSize[
               Rational[7, 360]], 
              RGBColor[0.24, 0.6, 0.8], 
              AbsoluteThickness[2]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               (Identity[#]& )[
                Part[#, 1]], 
               (Identity[#]& )[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           ListLinePlot, "GroupHighlight" -> False|>|>],
       ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
        4.503599627370496*^15, -4.503599627370496*^15}}],
      Selectable->False]},
    Annotation[{{{}, {}, 
       Annotation[{
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[
           Rational[7, 360]], 
          RGBColor[0.24, 0.6, 0.8], 
          AbsoluteThickness[2]], 
         Line[{{0., 0.}, {0.25980762113533157`, 0.15}, {0.2598076211353316, 
          0.6696152422706632}}]}, "Charting`Private`Tag#1"]}}, <|
     "HighlightElements" -> <|
       "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
      "LayoutOptions" -> <|
       "PanelPlotLayout" -> <||>, 
        "PlotRange" -> {{0, 0.2598076211353316}, {0, 0.6696152422706632}}, 
        "Frame" -> {{True, True}, {True, True}}, "AxesOrigin" -> {0, 0}, 
        "ImageSize" -> {360, 360}, "Axes" -> {True, True}, "LabelStyle" -> {},
         "AspectRatio" -> 1, "DefaultStyle" -> {
          Directive[
           PointSize[
            Rational[7, 360]], 
           RGBColor[0.24, 0.6, 0.8], 
           AbsoluteThickness[2]]}, 
        "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), 
          "ScalingFunctions" -> {{Identity, Identity}, {
            Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
      "Meta" -> <|
       "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
        ListLinePlot, "GroupHighlight" -> False|>|>, 
     "DynamicHighlight"]], {{}, {}}},
  AspectRatio->1,
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DefaultBaseStyle->{"PlotGraphics", "Graphics"},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.24, 0.6, 0.8], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.95, 0.627, 0.1425], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.455, 0.7, 0.21], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.578, 0.51, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.4, 0.64, 1.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[1., 0.75, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.8, 0.4, 0.76], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.637, 0.65, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
    "IncludeHighlighting" -> Automatic, "HighlightStyle" -> Automatic, 
    "OptimizePlotMarkers" -> True, "IncludeHighlighting" -> "CurrentSet", 
    "HighlightStyle" -> Automatic, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotInteractivity:>True,
  PlotRange->{{0, 0.2598076211353316}, {0, 0.6696152422706632}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.969594064279462*^9, 3.969595269345521*^9, 
  3.970111574628827*^9},
 CellLabel->"Out[78]=",ExpressionUUID->"b2b8f2ff-8e9e-4197-adb7-0df04ca478a4"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.969594060265716*^9, 3.969594067016026*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"6d716807-9afb-4474-b0f9-b0bd28ce9a5b"],

Cell["\<\
Typically the budget consists in the torque limit of the motor that is \
choosen for the application. Now let\[CloseCurlyQuote]s find the ellipsoid.
The ellipsoid comes from the quadratic form and the eigenvalues indicate how \
much the ellipsoid is stretched, so the axis of its\
\>", "Text",
 CellChangeTimes->{{3.96959409121395*^9, 3.969594108218548*^9}, {
  3.969594270938909*^9, 
  3.969594313059969*^9}},ExpressionUUID->"75a3fff9-4019-4b6a-981b-\
647bf28a9fd9"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"F", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"Fx", ",", " ", "Fy"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"FM", " ", "=", " ", 
   RowBox[{"Simplify", "[", 
    RowBox[{"Jac", ".", 
     RowBox[{"Transpose", "[", "Jac", "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"FM", " ", "//", " ", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.9695943186349487`*^9, 3.969594388429597*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"1815f594-1825-4baf-a818-18c0438fa78c"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       RowBox[{
        SuperscriptBox["L2", "2"], " ", 
        SuperscriptBox[
         RowBox[{"Sin", "[", 
          RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], "2"]}], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"L1", " ", 
           RowBox[{"Sin", "[", "\[Theta]1", "]"}]}], "+", 
          RowBox[{"L2", " ", 
           RowBox[{"Sin", "[", 
            RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}]}], ")"}], "2"]}], 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         SuperscriptBox["L1", "2"]}], " ", 
        RowBox[{"Cos", "[", "\[Theta]1", "]"}], " ", 
        RowBox[{"Sin", "[", "\[Theta]1", "]"}]}], "-", 
       RowBox[{"L2", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"L2", " ", 
           RowBox[{"Sin", "[", 
            RowBox[{"2", " ", 
             RowBox[{"(", 
              RowBox[{"\[Theta]1", "+", "\[Theta]2"}], ")"}]}], "]"}]}], "+", 
          
          RowBox[{"L1", " ", 
           RowBox[{"Sin", "[", 
            RowBox[{
             RowBox[{"2", " ", "\[Theta]1"}], "+", "\[Theta]2"}], "]"}]}]}], 
         ")"}]}]}]},
     {
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         SuperscriptBox["L1", "2"]}], " ", 
        RowBox[{"Cos", "[", "\[Theta]1", "]"}], " ", 
        RowBox[{"Sin", "[", "\[Theta]1", "]"}]}], "-", 
       RowBox[{"L2", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"L2", " ", 
           RowBox[{"Sin", "[", 
            RowBox[{"2", " ", 
             RowBox[{"(", 
              RowBox[{"\[Theta]1", "+", "\[Theta]2"}], ")"}]}], "]"}]}], "+", 
          
          RowBox[{"L1", " ", 
           RowBox[{"Sin", "[", 
            RowBox[{
             RowBox[{"2", " ", "\[Theta]1"}], "+", "\[Theta]2"}], "]"}]}]}], 
         ")"}]}]}], 
      RowBox[{
       RowBox[{
        SuperscriptBox["L2", "2"], " ", 
        SuperscriptBox[
         RowBox[{"Cos", "[", 
          RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], "2"]}], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"L1", " ", 
           RowBox[{"Cos", "[", "\[Theta]1", "]"}]}], "+", 
          RowBox[{"L2", " ", 
           RowBox[{"Cos", "[", 
            RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}]}], ")"}], 
        "2"]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.969594394968268*^9, 3.9695952693830967`*^9, 
  3.970111574721092*^9},
 CellLabel->
  "Out[82]//MatrixForm=",ExpressionUUID->"869f75b2-aaa9-454e-a249-\
326c21f463e5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Fellipse", " ", "=", " ", 
  RowBox[{"Simplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Transpose", "[", "F", "]"}], ".", "FM", ".", "F"}], " ", "-", 
    " ", 
    RowBox[{"Kf", "^", "2"}]}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "This", " ", "is", " ", "the", " ", "function", " ", "of", " ", "the", " ",
     "ellipsoid"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.969594419781661*^9, 3.969594496011383*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"d63f32e1-5354-4c84-b218-da5dc19893e5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   SuperscriptBox["Kf", "2"]}], "+", 
  RowBox[{
   SuperscriptBox["Fy", "2"], " ", 
   SuperscriptBox["L1", "2"], " ", 
   SuperscriptBox[
    RowBox[{"Cos", "[", "\[Theta]1", "]"}], "2"]}], "+", 
  RowBox[{"2", " ", 
   SuperscriptBox["Fy", "2"], " ", 
   SuperscriptBox["L2", "2"], " ", 
   SuperscriptBox[
    RowBox[{"Cos", "[", 
     RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], "2"]}], "+", 
  RowBox[{
   SuperscriptBox["Fx", "2"], " ", 
   SuperscriptBox["L1", "2"], " ", 
   SuperscriptBox[
    RowBox[{"Sin", "[", "\[Theta]1", "]"}], "2"]}], "+", 
  RowBox[{"2", " ", "Fy", " ", "L1", " ", 
   RowBox[{"Cos", "[", "\[Theta]1", "]"}], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Fy", " ", "L2", " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}], "-", 
     RowBox[{"Fx", " ", "L1", " ", 
      RowBox[{"Sin", "[", "\[Theta]1", "]"}]}]}], ")"}]}], "+", 
  RowBox[{"2", " ", 
   SuperscriptBox["Fx", "2"], " ", "L1", " ", "L2", " ", 
   RowBox[{"Sin", "[", "\[Theta]1", "]"}], " ", 
   RowBox[{"Sin", "[", 
    RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}], "+", 
  RowBox[{"2", " ", 
   SuperscriptBox["Fx", "2"], " ", 
   SuperscriptBox["L2", "2"], " ", 
   SuperscriptBox[
    RowBox[{"Sin", "[", 
     RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], "2"]}], "-", 
  RowBox[{"2", " ", "Fx", " ", "Fy", " ", 
   SuperscriptBox["L2", "2"], " ", 
   RowBox[{"Sin", "[", 
    RowBox[{"2", " ", 
     RowBox[{"(", 
      RowBox[{"\[Theta]1", "+", "\[Theta]2"}], ")"}]}], "]"}]}], "-", 
  RowBox[{"2", " ", "Fx", " ", "Fy", " ", "L1", " ", "L2", " ", 
   RowBox[{"Sin", "[", 
    RowBox[{
     RowBox[{"2", " ", "\[Theta]1"}], "+", "\[Theta]2"}], "]"}]}]}]], "Output",\

 CellChangeTimes->{3.969594482641814*^9, 3.969595269465966*^9, 
  3.970111574912858*^9},
 CellLabel->"Out[83]=",ExpressionUUID->"0193f538-14c0-427b-af89-fd3afb9a2c6f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"NumericalMatF", " ", "=", " ", 
    RowBox[{"Simplify", "[", 
     RowBox[{
      RowBox[{"FM", " ", "/.", " ", "Data"}], " ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{"Kf", " ", "->", " ", "1"}], "}"}]}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "tipically", " ", "we", " ", "have", " ", "real", " ", "numbers", " ", 
     "for", " ", "the", " ", "bufget", " ", "Kf"}], ",", " ", 
    RowBox[{
    "but", " ", "here", " ", "we", " ", "normalize", " ", "it", " ", "with", " ",
      "1"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"NumericalMatF", " ", "//", " ", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.969594517233281*^9, 3.969594578011718*^9}, {
  3.969594613928824*^9, 3.969594623432515*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"676b532e-4737-4ee9-863a-0c88f2eb3502"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0.2925`", 
      RowBox[{"-", "0.1169134295108992`"}]},
     {
      RowBox[{"-", "0.1169134295108992`"}], "0.06749999999999999`"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.969594624325945*^9, 3.969595269479244*^9, 
  3.97011157492528*^9},
 CellLabel->
  "Out[85]//MatrixForm=",ExpressionUUID->"45f0b8bb-db90-4847-9cd8-\
dbcd590da6bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"EigVecF", " ", "=", " ", 
   RowBox[{"Eigenvectors", "[", "NumericalMatF", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"EigVecF", " ", "//", " ", "MatrixForm"}], "\[IndentingNewLine]", 
 RowBox[{"EigValF", " ", "=", " ", 
  RowBox[{"Eigenvalues", "[", "NumericalMatF", "]"}]}]}], "Input",
 CellChangeTimes->{{3.969594686587511*^9, 3.969594735612548*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"29afe6a4-2ca3-40f1-866d-9f8cbda06b14"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"-", "0.9201563033750128`"}], "0.391551244869981`"},
     {
      RowBox[{"-", "0.391551244869981`"}], 
      RowBox[{"-", "0.9201563033750128`"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.9695947125280657`*^9, 3.969594739091354*^9}, 
   3.969595269494351*^9, 3.970111574938847*^9},
 CellLabel->
  "Out[87]//MatrixForm=",ExpressionUUID->"be1c0365-1047-4b9b-b538-\
706381e389d6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.3422498073958795`", ",", "0.01775019260412048`"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.9695947125280657`*^9, 3.969594739091354*^9}, 
   3.969595269494351*^9, 3.970111574939651*^9},
 CellLabel->"Out[88]=",ExpressionUUID->"4833de63-abab-43d8-99ce-1a80f4918df3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"USEFUL", " ", "COMMANDS"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Re", "[", 
    RowBox[{"EigValF", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "]"}], "\[IndentingNewLine]", 
   RowBox[{"Norm", "[", 
    RowBox[{"EigVecF", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "]"}], "\[IndentingNewLine]", 
   RowBox[{"(*", "FINISH", "*)"}]}]}]], "Input",
 CellChangeTimes->{{3.969594868377514*^9, 3.969594903815031*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"588371df-dd5e-468c-b205-b1836cbed200"],

Cell[BoxData["0.3422498073958795`"], "Output",
 CellChangeTimes->{3.969595269510026*^9, 3.970111574952353*^9},
 CellLabel->"Out[89]=",ExpressionUUID->"7fd16310-c736-4f65-8355-6d8092030950"],

Cell[BoxData["1.`"], "Output",
 CellChangeTimes->{3.969595269510026*^9, 3.970111574953038*^9},
 CellLabel->"Out[90]=",ExpressionUUID->"00c7249b-6db4-466c-876e-9802047c62b2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Fellipse", " ", "/.", "Data"}], " ", "/.", " ", 
  RowBox[{"{", 
   RowBox[{"Kf", " ", "->", " ", "1"}], "}"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "numerical", " ", "expression", " ", "in", " ", "terms", " ", "of", " ", 
    "x", " ", "and", " ", "y", " ", "of", " ", "the", " ", "ellipsoid"}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.969594909676478*^9, 3.969594939308177*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"40eb8f98-5e5c-4926-b9e6-3ab7a238ff1c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "1.`"}], "+", 
  RowBox[{"0.2925`", " ", 
   SuperscriptBox["Fx", "2"]}], "+", 
  RowBox[{"0.5196152422706631`", " ", 
   RowBox[{"(", 
    RowBox[{"0.`", "\[VeryThinSpace]", "-", 
     RowBox[{"0.15`", " ", "Fx"}]}], ")"}], " ", "Fy"}], "-", 
  RowBox[{"0.15588457268119893`", " ", "Fx", " ", "Fy"}], "+", 
  RowBox[{"0.0675`", " ", 
   SuperscriptBox["Fy", "2"]}]}]], "Output",
 CellChangeTimes->{3.96959492495289*^9, 3.969595269525085*^9, 
  3.9701115749653893`*^9},
 CellLabel->"Out[91]=",ExpressionUUID->"4e253ffb-5281-4a34-9e48-d787b820c630"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"plContourF", " ", "=", " ", 
  RowBox[{"ContourPlot", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Fellipse", " ", "/.", "Data"}], " ", "/.", " ", 
       RowBox[{"{", 
        RowBox[{"Kf", " ", "->", " ", "1"}], "}"}]}], ")"}], " ", "==", " ", 
     "0"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"Fx", ",", " ", 
      RowBox[{"-", "10"}], ",", " ", "10"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"Fy", ",", " ", 
      RowBox[{"-", "10"}], ",", " ", "10"}], "}"}], ",", " ", 
    RowBox[{"GridLines", "->", "Automatic"}]}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"For", " ", "curve", " ", "levels"}], ",", " ", 
    RowBox[{
    "round", " ", "brackets", " ", "for", " ", "deciding", " ", "what", " ", 
     "to", " ", "plot"}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.9695949491996737`*^9, 3.969595104940502*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"2f59f4e4-6d5e-4dd9-a47a-d6c6db395f87"],

Cell[BoxData[
 GraphicsBox[{GraphicsComplexBox[CompressedData["
1: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
kG+40jfw//9f9H9M1JDN
    "], {{}, {}, 
     TagBox[
      TooltipBox[
       {RGBColor[0.24, 0.6, 0.8], AbsoluteThickness[2], 
        LineBox[CompressedData["
1:eJwl1WVbEAYUBWCwwG4MMLDFxG6xu1BsRRE7UOzA7u5WBF3ows7NWJjrNDdd
6Dp1oZu6l2cf3nN/wTk3PC4hekxgQEDAHpF205GeDGQkE0EEk5ksZCUb2clB
TnKRmzzkJR/5CaEABSlEYUIJowhFKUZxwilBSUpRmjKUpRzliaACFalEZapQ
lUiqUZ0a1KQWtalDXepRnwY0pBGNiaIJTWlGc1rQkla0pg1taUd7OtCRTnSm
C9F0pRsxdKcHPelFb/rQl370J5YBDCSOQcQzmCEMZRjDGcFIRjGaMSQwlnEk
Mp4JTGQSk5nCVKYxnRkkMZNZzGYOc5nHfBawkEUsZglLWcZyVrCSVaxmDWtZ
x3o2sJFNbGYLW9nGdnawk2R2kUIqu9nDMzzLczzPXvbxAi/yEi+znwMc5BCH
OcJRjnGcE5zkFK/wKqc5w1nO8Rqv8wZvcp4LXOQSl7nCW7zNO7zLe7zPB3zI
R3zMJ3zKVa5xnRvc5Baf8Tm3ucMXfMlXfM1d7vEN3/Id3/MDP/ITP/MLv/Ib
v3OfB/zBn/zF3zzkEf/wL495wlPSyh9IOtKTgYxkIohgMpOFrGQjOznISS5y
k4e85CM/IRSgIIUoTChhFKEoxShOOCUoSSlKU4aylKM8EVSgIpWoTBWqEkk1
qlODmtSiNnWoSz3q04CGNKIxUTShKc1oTgta0orWtKEt7WhPBzrSic50IZqu
dCOG7vSgJ73oTR/60o/+xDKAgcQxiHgGM4ShDGM4IxjJKEaTNt4JjGUciYxn
AhOZxGSmMJVpTGcGScxkFrOZw1zmMZ8FLGQRi1nCUpaxnBWsZBWrWcNa1rGe
DWxkE5vZwla2sZ0d7CSZXaSQyu7A///Rf4Tat1g=
         "]]},
       RowBox[{
         RowBox[{
           RowBox[{"-", "1.`"}], "+", 
           RowBox[{"0.2925`", " ", 
             SuperscriptBox[
              TagBox["Fx", HoldForm], "2"]}], "+", 
           RowBox[{"0.5196152422706631`", " ", 
             RowBox[{"(", 
               RowBox[{
                 RowBox[{"0.`", "\[VeryThinSpace]"}], "-", 
                 RowBox[{"0.15`", " ", 
                   TagBox["Fx", HoldForm]}]}], ")"}], " ", 
             TagBox["Fy", HoldForm]}], "-", 
           RowBox[{"0.15588457268119893`", " ", 
             TagBox["Fx", HoldForm], " ", 
             TagBox["Fy", HoldForm]}], "+", 
           RowBox[{"0.0675`", " ", 
             SuperscriptBox[
              TagBox["Fy", HoldForm], "2"]}]}], "\[Equal]", "0"}]],
      Annotation[#, -1. + 0.2925 HoldForm[$CellContext`Fx]^2 + 
        0.5196152422706631 (0. - 0.15 HoldForm[$CellContext`Fx]) 
         HoldForm[$CellContext`Fy] - 0.15588457268119893` 
        HoldForm[$CellContext`Fx] HoldForm[$CellContext`Fy] + 
        0.0675 HoldForm[$CellContext`Fy]^2 == 0, "Tooltip"]& ]}], {}},
  AspectRatio->1,
  AxesLabel->{None, None},
  AxesOrigin->{0., 0.},
  DefaultBaseStyle->{"PlotGraphics", "Graphics"},
  DisplayFunction->Identity,
  Frame->True,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{Automatic, Automatic},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "GridLinesInFront" -> 
    True},
  PlotInteractivity:>True,
  PlotRange->{{-10, 10}, {-10, 10}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.969595107308755*^9, 3.969595269620408*^9, 
  3.970111575087366*^9},
 CellLabel->"Out[92]=",ExpressionUUID->"58c0db25-6516-4a80-b4c9-fc61c46a6840"]
}, Open  ]],

Cell["\<\
The ellipsoid tells us in which direction the robot can provide how much \
force. For the same amount of torque/force, we can get the maximum force \
among the direction of the major eigenvalue\
\>", "Text",
 CellChangeTimes->{{3.969595158430278*^9, 
  3.969595237604219*^9}},ExpressionUUID->"6f271f4d-f5ca-4a6d-89d6-\
556186c153ae"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"point1", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"point2", " ", "=", " ", 
   RowBox[{
    RowBox[{"1", "/", 
     RowBox[{"Sqrt", "[", 
      RowBox[{"Re", "[", 
       RowBox[{"EigValF", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Re", "[", 
       RowBox[{"EigVecF", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", " ", "1"}], "]"}], "]"}], "]"}], ",", " ", 
      RowBox[{"Re", "[", 
       RowBox[{"EigVecF", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", " ", "2"}], "]"}], "]"}], "]"}]}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"plEigVecF1", " ", "=", " ", 
  RowBox[{"ListLinePlot", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"point1", ",", " ", "point2"}], "}"}], ",", " ", 
    RowBox[{"PlotStyle", "->", "Red"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.969596119497467*^9, 3.9695962213352203`*^9}, {
  3.9695962549683237`*^9, 3.969596260384153*^9}, {3.969596298697639*^9, 
  3.969596331104439*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"c449deb3-299b-4042-b583-035485b4827f"],

Cell[BoxData[
 GraphicsBox[{{}, 
   InterpretationBox[{
     TagBox[{{}, {}, 
       TagBox[
        {RGBColor[1, 0, 0], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[2], 
         LineBox[{{0., 0.}, {-1.5728597517734149`, 0.6692941096571243}}]},
        Annotation[#, "Charting`Private`Tag#1"]& ]},
      {"WolframDynamicHighlight", <|
       "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
     StyleBox[
      DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
        Slot["HighlightElements"], 
        Slot["LayoutOptions"], 
        Slot["Meta"], 
        Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
           Annotation[{
             Hue[0.67, 0.6, 0.6], 
             Directive[
              PointSize[
               Rational[7, 360]], 
              AbsoluteThickness[2], 
              RGBColor[1, 0, 0]], 
             Line[{{0., 0.}, {-1.5728597517734149`, 0.6692941096571243}}]}, 
            "Charting`Private`Tag#1"]}}, <|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, 
            "PlotRange" -> {{-1.5728597517734149`, 0}, {
              0, 0.6692941096571243}}, 
            "Frame" -> {{False, False}, {False, False}}, 
            "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
            "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
            GoldenRatio^(-1), "DefaultStyle" -> {
              Directive[
               PointSize[
                Rational[7, 360]], 
               AbsoluteThickness[2], 
               RGBColor[1, 0, 0]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                (Identity[#]& )[
                 Part[#, 1]], 
                (Identity[#]& )[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            ListLinePlot, "GroupHighlight" -> False|>|>]]& )[<|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
         "LayoutOptions" -> <|
          "PanelPlotLayout" -> <||>, 
           "PlotRange" -> {{-1.5728597517734149`, 0}, {
             0, 0.6692941096571243}}, 
           "Frame" -> {{False, False}, {False, False}}, 
           "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
           "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
           GoldenRatio^(-1), "DefaultStyle" -> {
             Directive[
              PointSize[
               Rational[7, 360]], 
              AbsoluteThickness[2], 
              RGBColor[1, 0, 0]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               (Identity[#]& )[
                Part[#, 1]], 
               (Identity[#]& )[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           ListLinePlot, "GroupHighlight" -> False|>|>],
       ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
        4.503599627370496*^15, -4.503599627370496*^15}}],
      Selectable->False]},
    Annotation[{{{}, {}, 
       Annotation[{
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[
           Rational[7, 360]], 
          AbsoluteThickness[2], 
          RGBColor[1, 0, 0]], 
         Line[{{0., 0.}, {-1.5728597517734149`, 0.6692941096571243}}]}, 
        "Charting`Private`Tag#1"]}}, <|
     "HighlightElements" -> <|
       "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
      "LayoutOptions" -> <|
       "PanelPlotLayout" -> <||>, 
        "PlotRange" -> {{-1.5728597517734149`, 0}, {0, 0.6692941096571243}}, 
        "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
        "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
        "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), "DefaultStyle" -> {
          Directive[
           PointSize[
            Rational[7, 360]], 
           AbsoluteThickness[2], 
           RGBColor[1, 0, 0]]}, 
        "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), 
          "ScalingFunctions" -> {{Identity, Identity}, {
            Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
      "Meta" -> <|
       "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
        ListLinePlot, "GroupHighlight" -> False|>|>, 
     "DynamicHighlight"]], {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DefaultBaseStyle->{"PlotGraphics", "Graphics"},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.24, 0.6, 0.8], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.95, 0.627, 0.1425], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.455, 0.7, 0.21], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.578, 0.51, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.4, 0.64, 1.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[1., 0.75, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.8, 0.4, 0.76], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.637, 0.65, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
    "IncludeHighlighting" -> Automatic, "HighlightStyle" -> Automatic, 
    "OptimizePlotMarkers" -> True, "IncludeHighlighting" -> "CurrentSet", 
    "HighlightStyle" -> Automatic, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotInteractivity:>True,
  PlotRange->{{-1.5728597517734149`, 0}, {0, 0.6692941096571243}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.969596331809805*^9, 3.9701115751167316`*^9},
 CellLabel->"Out[95]=",ExpressionUUID->"e3a8f1b6-68b2-4eae-8ac8-cfa694cacbb7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"point3", " ", "=", " ", 
   RowBox[{
    RowBox[{"1", "/", 
     RowBox[{"Sqrt", "[", 
      RowBox[{"Re", "[", 
       RowBox[{"EigValF", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}], 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Re", "[", 
       RowBox[{"EigVecF", "[", 
        RowBox[{"[", 
         RowBox[{"2", ",", " ", "1"}], "]"}], "]"}], "]"}], ",", " ", 
      RowBox[{"Re", "[", 
       RowBox[{"EigVecF", "[", 
        RowBox[{"[", 
         RowBox[{"2", ",", " ", "2"}], "]"}], "]"}], "]"}]}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"plEigVecF2", " ", "=", " ", 
  RowBox[{"ListLinePlot", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"point1", ",", " ", "point3"}], "}"}], ",", " ", 
    RowBox[{"PlotStyle", "->", "Green"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.9695963352073383`*^9, 3.969596372133192*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"c1d4553b-b078-44d4-adf0-c05c6fa679eb"],

Cell[BoxData[
 GraphicsBox[{{}, 
   InterpretationBox[{
     TagBox[{{}, {}, 
       TagBox[
        {RGBColor[0, 1, 0], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[2], 
         LineBox[{{0., 0.}, {-2.9389153292264796`, -6.906532671531095}}]},
        Annotation[#, "Charting`Private`Tag#1"]& ]},
      {"WolframDynamicHighlight", <|
       "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
     StyleBox[
      DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
        Slot["HighlightElements"], 
        Slot["LayoutOptions"], 
        Slot["Meta"], 
        Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
           Annotation[{
             Hue[0.67, 0.6, 0.6], 
             Directive[
              PointSize[
               Rational[7, 360]], 
              AbsoluteThickness[2], 
              RGBColor[0, 1, 0]], 
             Line[{{0., 0.}, {-2.9389153292264796`, -6.906532671531095}}]}, 
            "Charting`Private`Tag#1"]}}, <|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, 
            "PlotRange" -> {{-2.9389153292264796`, 0}, {-6.906532671531095, 
               0}}, "Frame" -> {{False, False}, {False, False}}, 
            "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
            "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
            GoldenRatio^(-1), "DefaultStyle" -> {
              Directive[
               PointSize[
                Rational[7, 360]], 
               AbsoluteThickness[2], 
               RGBColor[0, 1, 0]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                (Identity[#]& )[
                 Part[#, 1]], 
                (Identity[#]& )[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            ListLinePlot, "GroupHighlight" -> False|>|>]]& )[<|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
         "LayoutOptions" -> <|
          "PanelPlotLayout" -> <||>, 
           "PlotRange" -> {{-2.9389153292264796`, 0}, {-6.906532671531095, 
              0}}, "Frame" -> {{False, False}, {False, False}}, 
           "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
           "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
           GoldenRatio^(-1), "DefaultStyle" -> {
             Directive[
              PointSize[
               Rational[7, 360]], 
              AbsoluteThickness[2], 
              RGBColor[0, 1, 0]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               (Identity[#]& )[
                Part[#, 1]], 
               (Identity[#]& )[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           ListLinePlot, "GroupHighlight" -> False|>|>],
       ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
        4.503599627370496*^15, -4.503599627370496*^15}}],
      Selectable->False]},
    Annotation[{{{}, {}, 
       Annotation[{
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[
           Rational[7, 360]], 
          AbsoluteThickness[2], 
          RGBColor[0, 1, 0]], 
         Line[{{0., 0.}, {-2.9389153292264796`, -6.906532671531095}}]}, 
        "Charting`Private`Tag#1"]}}, <|
     "HighlightElements" -> <|
       "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
      "LayoutOptions" -> <|
       "PanelPlotLayout" -> <||>, 
        "PlotRange" -> {{-2.9389153292264796`, 0}, {-6.906532671531095, 0}}, 
        "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
        "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
        "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), "DefaultStyle" -> {
          Directive[
           PointSize[
            Rational[7, 360]], 
           AbsoluteThickness[2], 
           RGBColor[0, 1, 0]]}, 
        "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), 
          "ScalingFunctions" -> {{Identity, Identity}, {
            Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
      "Meta" -> <|
       "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
        ListLinePlot, "GroupHighlight" -> False|>|>, 
     "DynamicHighlight"]], {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DefaultBaseStyle->{"PlotGraphics", "Graphics"},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.24, 0.6, 0.8], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.95, 0.627, 0.1425], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.455, 0.7, 0.21], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.578, 0.51, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.4, 0.64, 1.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[1., 0.75, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.8, 0.4, 0.76], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.637, 0.65, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
    "IncludeHighlighting" -> Automatic, "HighlightStyle" -> Automatic, 
    "OptimizePlotMarkers" -> True, "IncludeHighlighting" -> "CurrentSet", 
    "HighlightStyle" -> Automatic, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotInteractivity:>True,
  PlotRange->{{-2.9389153292264796`, 0}, {-6.906532671531095, 0}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.969596374192816*^9, 3.9701115751490393`*^9},
 CellLabel->"Out[97]=",ExpressionUUID->"e755ae7c-6da7-4e14-b2ff-9d62ea4fa37a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"plContourF", ",", " ", "plEigVecF1", ",", " ", "plEigVecF2"}], 
    "}"}], ",", " ", 
   RowBox[{"PlotRange", " ", "->", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "7"}], ",", " ", "7"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "7"}], ",", " ", "7"}], "}"}]}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.9695963852574997`*^9, 3.969596424184288*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"d2abfe4f-ee41-4e18-86a1-d3448f9f94d1"],

Cell[BoxData[
 GraphicsBox[{{GraphicsComplexBox[CompressedData["
1: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
kG+40jfw//9f9H9M1JDN
     "], {{}, {}, 
      TagBox[
       TooltipBox[
        {RGBColor[0.24, 0.6, 0.8], AbsoluteThickness[2], 
         LineBox[CompressedData["
1:eJwl1WVbEAYUBWCwwG4MMLDFxG6xu1BsRRE7UOzA7u5WBF3ows7NWJjrNDdd
6Dp1oZu6l2cf3nN/wTk3PC4hekxgQEDAHpF205GeDGQkE0EEk5ksZCUb2clB
TnKRmzzkJR/5CaEABSlEYUIJowhFKUZxwilBSUpRmjKUpRzliaACFalEZapQ
lUiqUZ0a1KQWtalDXepRnwY0pBGNiaIJTWlGc1rQkla0pg1taUd7OtCRTnSm
C9F0pRsxdKcHPelFb/rQl370J5YBDCSOQcQzmCEMZRjDGcFIRjGaMSQwlnEk
Mp4JTGQSk5nCVKYxnRkkMZNZzGYOc5nHfBawkEUsZglLWcZyVrCSVaxmDWtZ
x3o2sJFNbGYLW9nGdnawk2R2kUIqu9nDMzzLczzPXvbxAi/yEi+znwMc5BCH
OcJRjnGcE5zkFK/wKqc5w1nO8Rqv8wZvcp4LXOQSl7nCW7zNO7zLe7zPB3zI
R3zMJ3zKVa5xnRvc5Baf8Tm3ucMXfMlXfM1d7vEN3/Id3/MDP/ITP/MLv/Ib
v3OfB/zBn/zF3zzkEf/wL495wlPSyh9IOtKTgYxkIohgMpOFrGQjOznISS5y
k4e85CM/IRSgIIUoTChhFKEoxShOOCUoSSlKU4aylKM8EVSgIpWoTBWqEkk1
qlODmtSiNnWoSz3q04CGNKIxUTShKc1oTgta0orWtKEt7WhPBzrSic50IZqu
dCOG7vSgJ73oTR/60o/+xDKAgcQxiHgGM4ShDGM4IxjJKEaTNt4JjGUciYxn
AhOZxGSmMJVpTGcGScxkFrOZw1zmMZ8FLGQRi1nCUpaxnBWsZBWrWcNa1rGe
DWxkE5vZwla2sZ0d7CSZXaSQyu7A///Rf4Tat1g=
          "]]},
        RowBox[{
          RowBox[{
            RowBox[{"-", "1.`"}], "+", 
            RowBox[{"0.2925`", " ", 
              SuperscriptBox[
               TagBox["Fx", HoldForm], "2"]}], "+", 
            RowBox[{"0.5196152422706631`", " ", 
              RowBox[{"(", 
                RowBox[{
                  RowBox[{"0.`", "\[VeryThinSpace]"}], "-", 
                  RowBox[{"0.15`", " ", 
                    TagBox["Fx", HoldForm]}]}], ")"}], " ", 
              TagBox["Fy", HoldForm]}], "-", 
            RowBox[{"0.15588457268119893`", " ", 
              TagBox["Fx", HoldForm], " ", 
              TagBox["Fy", HoldForm]}], "+", 
            RowBox[{"0.0675`", " ", 
              SuperscriptBox[
               TagBox["Fy", HoldForm], "2"]}]}], "\[Equal]", "0"}]],
       Annotation[#, -1. + 0.2925 HoldForm[$CellContext`Fx]^2 + 
         0.5196152422706631 (0. - 0.15 HoldForm[$CellContext`Fx]) 
          HoldForm[$CellContext`Fy] - 0.15588457268119893` 
         HoldForm[$CellContext`Fx] HoldForm[$CellContext`Fy] + 
         0.0675 HoldForm[$CellContext`Fy]^2 == 0, "Tooltip"]& ]}], {}}, {{}, 
    InterpretationBox[{
      TagBox[{{}, {}, 
        TagBox[
         {RGBColor[1, 0, 0], PointSize[
           NCache[
            Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[2], 
          LineBox[{{0., 0.}, {-1.5728597517734149`, 0.6692941096571243}}]},
         Annotation[#, "Charting`Private`Tag#1"]& ]},
       {"WolframDynamicHighlight", <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
      StyleBox[
       DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
         Slot["HighlightElements"], 
         Slot["LayoutOptions"], 
         Slot["Meta"], 
         Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
            Annotation[{
              Hue[0.67, 0.6, 0.6], 
              Directive[
               PointSize[
                Rational[7, 360]], 
               AbsoluteThickness[2], 
               RGBColor[1, 0, 0]], 
              Line[{{0., 0.}, {-1.5728597517734149`, 0.6692941096571243}}]}, 
             "Charting`Private`Tag#1"]}}, <|
          "HighlightElements" -> <|
            "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
           "LayoutOptions" -> <|
            "PanelPlotLayout" -> <||>, 
             "PlotRange" -> {{-1.5728597517734149`, 0}, {
               0, 0.6692941096571243}}, 
             "Frame" -> {{False, False}, {False, False}}, 
             "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
             "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
             GoldenRatio^(-1), "DefaultStyle" -> {
               Directive[
                PointSize[
                 Rational[7, 360]], 
                AbsoluteThickness[2], 
                RGBColor[1, 0, 0]]}, 
             "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                 (Identity[#]& )[
                  Part[#, 1]], 
                 (Identity[#]& )[
                  Part[#, 2]]}& ), 
               "ScalingFunctions" -> {{Identity, Identity}, {
                 Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
             False|>, 
           "Meta" -> <|
            "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
             "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>]]& )[<|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, 
            "PlotRange" -> {{-1.5728597517734149`, 0}, {
              0, 0.6692941096571243}}, 
            "Frame" -> {{False, False}, {False, False}}, 
            "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
            "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
            GoldenRatio^(-1), "DefaultStyle" -> {
              Directive[
               PointSize[
                Rational[7, 360]], 
               AbsoluteThickness[2], 
               RGBColor[1, 0, 0]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                (Identity[#]& )[
                 Part[#, 1]], 
                (Identity[#]& )[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            ListLinePlot, "GroupHighlight" -> False|>|>],
        ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
         4.503599627370496*^15, -4.503599627370496*^15}}],
       Selectable->False]},
     Annotation[{{{}, {}, 
        Annotation[{
          Hue[0.67, 0.6, 0.6], 
          Directive[
           PointSize[
            Rational[7, 360]], 
           AbsoluteThickness[2], 
           RGBColor[1, 0, 0]], 
          Line[{{0., 0.}, {-1.5728597517734149`, 0.6692941096571243}}]}, 
         "Charting`Private`Tag#1"]}}, <|
      "HighlightElements" -> <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
       "LayoutOptions" -> <|
        "PanelPlotLayout" -> <||>, 
         "PlotRange" -> {{-1.5728597517734149`, 0}, {0, 0.6692941096571243}}, 
         "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
         "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
         "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
         "DefaultStyle" -> {
           Directive[
            PointSize[
             Rational[7, 360]], 
            AbsoluteThickness[2], 
            RGBColor[1, 0, 0]]}, 
         "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), 
           "ScalingFunctions" -> {{Identity, Identity}, {
             Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
       "Meta" -> <|
        "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
         ListLinePlot, "GroupHighlight" -> False|>|>, 
      "DynamicHighlight"]], {{}, {}}}, {{}, 
    InterpretationBox[{
      TagBox[{{}, {}, 
        TagBox[
         {RGBColor[0, 1, 0], PointSize[
           NCache[
            Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[2], 
          LineBox[{{0., 0.}, {-2.9389153292264796`, -6.906532671531095}}]},
         Annotation[#, "Charting`Private`Tag#1"]& ]},
       {"WolframDynamicHighlight", <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
      StyleBox[
       DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
         Slot["HighlightElements"], 
         Slot["LayoutOptions"], 
         Slot["Meta"], 
         Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
            Annotation[{
              Hue[0.67, 0.6, 0.6], 
              Directive[
               PointSize[
                Rational[7, 360]], 
               AbsoluteThickness[2], 
               RGBColor[0, 1, 0]], 
              Line[{{0., 0.}, {-2.9389153292264796`, -6.906532671531095}}]}, 
             "Charting`Private`Tag#1"]}}, <|
          "HighlightElements" -> <|
            "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
           "LayoutOptions" -> <|
            "PanelPlotLayout" -> <||>, 
             "PlotRange" -> {{-2.9389153292264796`, 0}, {-6.906532671531095, 
                0}}, "Frame" -> {{False, False}, {False, False}}, 
             "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
             "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
             GoldenRatio^(-1), "DefaultStyle" -> {
               Directive[
                PointSize[
                 Rational[7, 360]], 
                AbsoluteThickness[2], 
                RGBColor[0, 1, 0]]}, 
             "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                 (Identity[#]& )[
                  Part[#, 1]], 
                 (Identity[#]& )[
                  Part[#, 2]]}& ), 
               "ScalingFunctions" -> {{Identity, Identity}, {
                 Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
             False|>, 
           "Meta" -> <|
            "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
             "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>]]& )[<|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, 
            "PlotRange" -> {{-2.9389153292264796`, 0}, {-6.906532671531095, 
               0}}, "Frame" -> {{False, False}, {False, False}}, 
            "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
            "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
            GoldenRatio^(-1), "DefaultStyle" -> {
              Directive[
               PointSize[
                Rational[7, 360]], 
               AbsoluteThickness[2], 
               RGBColor[0, 1, 0]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                (Identity[#]& )[
                 Part[#, 1]], 
                (Identity[#]& )[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            ListLinePlot, "GroupHighlight" -> False|>|>],
        ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
         4.503599627370496*^15, -4.503599627370496*^15}}],
       Selectable->False]},
     Annotation[{{{}, {}, 
        Annotation[{
          Hue[0.67, 0.6, 0.6], 
          Directive[
           PointSize[
            Rational[7, 360]], 
           AbsoluteThickness[2], 
           RGBColor[0, 1, 0]], 
          Line[{{0., 0.}, {-2.9389153292264796`, -6.906532671531095}}]}, 
         "Charting`Private`Tag#1"]}}, <|
      "HighlightElements" -> <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
       "LayoutOptions" -> <|
        "PanelPlotLayout" -> <||>, 
         "PlotRange" -> {{-2.9389153292264796`, 0}, {-6.906532671531095, 0}}, 
         "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
         "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
         "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
         "DefaultStyle" -> {
           Directive[
            PointSize[
             Rational[7, 360]], 
            AbsoluteThickness[2], 
            RGBColor[0, 1, 0]]}, 
         "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), 
           "ScalingFunctions" -> {{Identity, Identity}, {
             Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
       "Meta" -> <|
        "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
         ListLinePlot, "GroupHighlight" -> False|>|>, 
      "DynamicHighlight"]], {{}, {}}}},
  AspectRatio->1,
  AxesLabel->{None, None},
  AxesOrigin->{0., 0.},
  DefaultBaseStyle->{"PlotGraphics", "Graphics"},
  DisplayFunction->Identity,
  Frame->True,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{Automatic, Automatic},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{290.25, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "GridLinesInFront" -> 
    True},
  PlotInteractivity:>True,
  PlotRange->{{-7, 7}, {-7, 7}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.969596427381155*^9, 3.970111575174643*^9},
 CellLabel->"Out[98]=",ExpressionUUID->"5d260964-bd0a-4ffa-a7a0-5b02e8ec4758"]
}, Open  ]],

Cell["\<\
Let\[CloseCurlyQuote]s suppose to apply the force to the ee in a specific \
direction, so we want to know the intensity of this force by finding the \
distance between the ellipsoid center and the corrispondent point on the \
ellipsoid\
\>", "Text",
 CellChangeTimes->{{3.969596561394404*^9, 
  3.969596621762833*^9}},ExpressionUUID->"786d26ff-2ac3-4b0a-8b0d-\
396fd43d047f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Fparam", " ", "=", " ", 
  RowBox[{"s", "*", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cos", "[", 
      RowBox[{"\[Pi]", "/", "3"}], "]"}], ",", " ", 
     RowBox[{"Sin", "[", 
      RowBox[{"\[Pi]", "/", "3"}], "]"}]}], 
    "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"eqdir", " ", "=", " ", 
  RowBox[{"Simplify", "[", 
   RowBox[{
    RowBox[{"Fellipse", " ", "/.", "Data"}], " ", "/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Kf", " ", "->", " ", "1"}], ",", " ", 
      RowBox[{"Fx", " ", "->", " ", 
       RowBox[{"Fparam", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", 
      RowBox[{"Fy", " ", "->", " ", 
       RowBox[{"Fparam", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "instead", " ", "of", " ", "having", " ", "a", " ", "generic", " ", 
     "force"}], ",", " ", 
    RowBox[{
    "we", " ", "have", " ", "a", " ", "parametrized", " ", "function"}]}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.969596626065792*^9, 3.969596649261366*^9}, {
  3.969596698491219*^9, 3.9695968202885437`*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"c7560d91-3ca1-4a77-9de8-7786429a4e89"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["s", "2"], ",", 
   FractionBox[
    RowBox[{
     SqrtBox["3"], " ", "s"}], "2"]}], "}"}]], "Output",
 CellChangeTimes->{3.969596787952045*^9, 3.970111575198718*^9},
 CellLabel->"Out[99]=",ExpressionUUID->"6ea66c5b-d230-4791-989d-2988f5c9ad02"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "1.`"}], "+", 
  RowBox[{"0.022500000000000013`", " ", 
   SuperscriptBox["s", "2"]}]}]], "Output",
 CellChangeTimes->{3.969596787952045*^9, 3.970111575199627*^9},
 CellLabel->
  "Out[100]=",ExpressionUUID->"281ed654-3601-41dd-8c45-6aa61dc93759"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"let", "'"}], "s", " ", "find", " ", "hte", " ", "intersection", " ",
     "of", " ", "the", " ", "force", " ", "with", " ", "the", " ", 
    "ellipsoid", " ", "and", " ", "it", " ", "gives", " ", "me", " ", "the", " ",
     "max", " ", "force", " ", "that", " ", "the", " ", "manipulator", " ", 
    "can", " ", "support", " ", "on", " ", "that", " ", "direction"}], "*)"}],
   "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"sintersect", " ", "=", " ", 
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{"eqdir", " ", "==", " ", "0"}], ",", " ", "s"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Fmax1", ",", " ", "Fmax2"}], "}"}], " ", "=", " ", 
     RowBox[{"Fparam", " ", "/.", " ", "sintersect"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"point0", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"point1", " ", "=", " ", "Fmax1"}], ";"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{"point2", " ", "=", " ", "Fmax2"}], ";"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{"plF1", " ", "=", " ", 
     RowBox[{"ListLinePlot", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"point0", ",", " ", "point1"}], "}"}], ",", " ", 
       RowBox[{"PlotStyle", "->", "Red"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"plF2", " ", "=", " ", 
     RowBox[{"ListLinePlot", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"point0", ",", " ", "point2"}], "}"}], ",", " ", 
       RowBox[{"PlotStyle", "->", "Green"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"Show", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"plContourF", ",", " ", "plF1", ",", " ", "plF2"}], "}"}], ",", 
     " ", 
     RowBox[{"PlotRange", "->", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "10"}], ",", " ", "10"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "}"}]}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.969596825496653*^9, 3.9695968753004093`*^9}, {
  3.96959691113411*^9, 3.969597046454896*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"30eefa82-9263-467d-9730-df75fa9076a7"],

Cell[BoxData[
 GraphicsBox[{{GraphicsComplexBox[CompressedData["
1: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
kG+40jfw//9f9H9M1JDN
     "], {{}, {}, 
      TagBox[
       TooltipBox[
        {RGBColor[0.24, 0.6, 0.8], AbsoluteThickness[2], 
         LineBox[CompressedData["
1:eJwl1WVbEAYUBWCwwG4MMLDFxG6xu1BsRRE7UOzA7u5WBF3ows7NWJjrNDdd
6Dp1oZu6l2cf3nN/wTk3PC4hekxgQEDAHpF205GeDGQkE0EEk5ksZCUb2clB
TnKRmzzkJR/5CaEABSlEYUIJowhFKUZxwilBSUpRmjKUpRzliaACFalEZapQ
lUiqUZ0a1KQWtalDXepRnwY0pBGNiaIJTWlGc1rQkla0pg1taUd7OtCRTnSm
C9F0pRsxdKcHPelFb/rQl370J5YBDCSOQcQzmCEMZRjDGcFIRjGaMSQwlnEk
Mp4JTGQSk5nCVKYxnRkkMZNZzGYOc5nHfBawkEUsZglLWcZyVrCSVaxmDWtZ
x3o2sJFNbGYLW9nGdnawk2R2kUIqu9nDMzzLczzPXvbxAi/yEi+znwMc5BCH
OcJRjnGcE5zkFK/wKqc5w1nO8Rqv8wZvcp4LXOQSl7nCW7zNO7zLe7zPB3zI
R3zMJ3zKVa5xnRvc5Baf8Tm3ucMXfMlXfM1d7vEN3/Id3/MDP/ITP/MLv/Ib
v3OfB/zBn/zF3zzkEf/wL495wlPSyh9IOtKTgYxkIohgMpOFrGQjOznISS5y
k4e85CM/IRSgIIUoTChhFKEoxShOOCUoSSlKU4aylKM8EVSgIpWoTBWqEkk1
qlODmtSiNnWoSz3q04CGNKIxUTShKc1oTgta0orWtKEt7WhPBzrSic50IZqu
dCOG7vSgJ73oTR/60o/+xDKAgcQxiHgGM4ShDGM4IxjJKEaTNt4JjGUciYxn
AhOZxGSmMJVpTGcGScxkFrOZw1zmMZ8FLGQRi1nCUpaxnBWsZBWrWcNa1rGe
DWxkE5vZwla2sZ0d7CSZXaSQyu7A///Rf4Tat1g=
          "]]},
        RowBox[{
          RowBox[{
            RowBox[{"-", "1.`"}], "+", 
            RowBox[{"0.2925`", " ", 
              SuperscriptBox[
               TagBox["Fx", HoldForm], "2"]}], "+", 
            RowBox[{"0.5196152422706631`", " ", 
              RowBox[{"(", 
                RowBox[{
                  RowBox[{"0.`", "\[VeryThinSpace]"}], "-", 
                  RowBox[{"0.15`", " ", 
                    TagBox["Fx", HoldForm]}]}], ")"}], " ", 
              TagBox["Fy", HoldForm]}], "-", 
            RowBox[{"0.15588457268119893`", " ", 
              TagBox["Fx", HoldForm], " ", 
              TagBox["Fy", HoldForm]}], "+", 
            RowBox[{"0.0675`", " ", 
              SuperscriptBox[
               TagBox["Fy", HoldForm], "2"]}]}], "\[Equal]", "0"}]],
       Annotation[#, -1. + 0.2925 HoldForm[$CellContext`Fx]^2 + 
         0.5196152422706631 (0. - 0.15 HoldForm[$CellContext`Fx]) 
          HoldForm[$CellContext`Fy] - 0.15588457268119893` 
         HoldForm[$CellContext`Fx] HoldForm[$CellContext`Fy] + 
         0.0675 HoldForm[$CellContext`Fy]^2 == 0, "Tooltip"]& ]}], {}}, {{}, 
    InterpretationBox[{
      TagBox[{{}, {}, 
        TagBox[
         {RGBColor[1, 0, 0], PointSize[
           NCache[
            Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[2], 
          LineBox[{{0., 0.}, {-3.3333333333333326`, -5.773502691896256}}]},
         Annotation[#, "Charting`Private`Tag#1"]& ]},
       {"WolframDynamicHighlight", <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
      StyleBox[
       DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
         Slot["HighlightElements"], 
         Slot["LayoutOptions"], 
         Slot["Meta"], 
         Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
            Annotation[{
              Hue[0.67, 0.6, 0.6], 
              Directive[
               PointSize[
                Rational[7, 360]], 
               AbsoluteThickness[2], 
               RGBColor[1, 0, 0]], 
              Line[{{0., 0.}, {-3.3333333333333326`, -5.773502691896256}}]}, 
             "Charting`Private`Tag#1"]}}, <|
          "HighlightElements" -> <|
            "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
           "LayoutOptions" -> <|
            "PanelPlotLayout" -> <||>, 
             "PlotRange" -> {{-3.3333333333333326`, 0}, {-5.773502691896256, 
                0}}, "Frame" -> {{False, False}, {False, False}}, 
             "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
             "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
             GoldenRatio^(-1), "DefaultStyle" -> {
               Directive[
                PointSize[
                 Rational[7, 360]], 
                AbsoluteThickness[2], 
                RGBColor[1, 0, 0]]}, 
             "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                 (Identity[#]& )[
                  Part[#, 1]], 
                 (Identity[#]& )[
                  Part[#, 2]]}& ), 
               "ScalingFunctions" -> {{Identity, Identity}, {
                 Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
             False|>, 
           "Meta" -> <|
            "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
             "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>]]& )[<|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, 
            "PlotRange" -> {{-3.3333333333333326`, 0}, {-5.773502691896256, 
               0}}, "Frame" -> {{False, False}, {False, False}}, 
            "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
            "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
            GoldenRatio^(-1), "DefaultStyle" -> {
              Directive[
               PointSize[
                Rational[7, 360]], 
               AbsoluteThickness[2], 
               RGBColor[1, 0, 0]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                (Identity[#]& )[
                 Part[#, 1]], 
                (Identity[#]& )[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            ListLinePlot, "GroupHighlight" -> False|>|>],
        ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
         4.503599627370496*^15, -4.503599627370496*^15}}],
       Selectable->False]},
     Annotation[{{{}, {}, 
        Annotation[{
          Hue[0.67, 0.6, 0.6], 
          Directive[
           PointSize[
            Rational[7, 360]], 
           AbsoluteThickness[2], 
           RGBColor[1, 0, 0]], 
          Line[{{0., 0.}, {-3.3333333333333326`, -5.773502691896256}}]}, 
         "Charting`Private`Tag#1"]}}, <|
      "HighlightElements" -> <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
       "LayoutOptions" -> <|
        "PanelPlotLayout" -> <||>, 
         "PlotRange" -> {{-3.3333333333333326`, 0}, {-5.773502691896256, 0}}, 
         "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
         "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
         "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
         "DefaultStyle" -> {
           Directive[
            PointSize[
             Rational[7, 360]], 
            AbsoluteThickness[2], 
            RGBColor[1, 0, 0]]}, 
         "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), 
           "ScalingFunctions" -> {{Identity, Identity}, {
             Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
       "Meta" -> <|
        "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
         ListLinePlot, "GroupHighlight" -> False|>|>, 
      "DynamicHighlight"]], {{}, {}}}, {{}, 
    InterpretationBox[{
      TagBox[{{}, {}, 
        TagBox[
         {RGBColor[0, 1, 0], PointSize[
           NCache[
            Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[2], 
          LineBox[{{0., 0.}, {3.333333333333332, 5.7735026918962555`}}]},
         Annotation[#, "Charting`Private`Tag#1"]& ]},
       {"WolframDynamicHighlight", <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
      StyleBox[
       DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
         Slot["HighlightElements"], 
         Slot["LayoutOptions"], 
         Slot["Meta"], 
         Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
            Annotation[{
              Hue[0.67, 0.6, 0.6], 
              Directive[
               PointSize[
                Rational[7, 360]], 
               AbsoluteThickness[2], 
               RGBColor[0, 1, 0]], 
              Line[{{0., 0.}, {3.333333333333332, 5.7735026918962555`}}]}, 
             "Charting`Private`Tag#1"]}}, <|
          "HighlightElements" -> <|
            "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
           "LayoutOptions" -> <|
            "PanelPlotLayout" -> <||>, 
             "PlotRange" -> {{0, 3.333333333333332}, {
               0, 5.7735026918962555`}}, 
             "Frame" -> {{False, False}, {False, False}}, 
             "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
             "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
             GoldenRatio^(-1), "DefaultStyle" -> {
               Directive[
                PointSize[
                 Rational[7, 360]], 
                AbsoluteThickness[2], 
                RGBColor[0, 1, 0]]}, 
             "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                 (Identity[#]& )[
                  Part[#, 1]], 
                 (Identity[#]& )[
                  Part[#, 2]]}& ), 
               "ScalingFunctions" -> {{Identity, Identity}, {
                 Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
             False|>, 
           "Meta" -> <|
            "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
             "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>]]& )[<|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, 
            "PlotRange" -> {{0, 3.333333333333332}, {0, 5.7735026918962555`}},
             "Frame" -> {{False, False}, {False, False}}, 
            "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
            "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
            GoldenRatio^(-1), "DefaultStyle" -> {
              Directive[
               PointSize[
                Rational[7, 360]], 
               AbsoluteThickness[2], 
               RGBColor[0, 1, 0]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                (Identity[#]& )[
                 Part[#, 1]], 
                (Identity[#]& )[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            ListLinePlot, "GroupHighlight" -> False|>|>],
        ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
         4.503599627370496*^15, -4.503599627370496*^15}}],
       Selectable->False]},
     Annotation[{{{}, {}, 
        Annotation[{
          Hue[0.67, 0.6, 0.6], 
          Directive[
           PointSize[
            Rational[7, 360]], 
           AbsoluteThickness[2], 
           RGBColor[0, 1, 0]], 
          Line[{{0., 0.}, {3.333333333333332, 5.7735026918962555`}}]}, 
         "Charting`Private`Tag#1"]}}, <|
      "HighlightElements" -> <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
       "LayoutOptions" -> <|
        "PanelPlotLayout" -> <||>, 
         "PlotRange" -> {{0, 3.333333333333332}, {0, 5.7735026918962555`}}, 
         "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
         "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
         "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
         "DefaultStyle" -> {
           Directive[
            PointSize[
             Rational[7, 360]], 
            AbsoluteThickness[2], 
            RGBColor[0, 1, 0]]}, 
         "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), 
           "ScalingFunctions" -> {{Identity, Identity}, {
             Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
       "Meta" -> <|
        "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
         ListLinePlot, "GroupHighlight" -> False|>|>, 
      "DynamicHighlight"]], {{}, {}}}},
  AspectRatio->1,
  AxesLabel->{None, None},
  AxesOrigin->{0., 0.},
  DefaultBaseStyle->{"PlotGraphics", "Graphics"},
  DisplayFunction->Identity,
  Frame->True,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{Automatic, Automatic},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "GridLinesInFront" -> 
    True},
  PlotInteractivity:>True,
  PlotRange->{{-10, 10}, {-10, 10}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.969597049520521*^9, 3.970111575236341*^9},
 CellLabel->
  "Out[108]=",ExpressionUUID->"98bf389b-a2c2-4873-a686-6b84be14ab61"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Velocity ellipsoid", "Section",
 CellChangeTimes->{{3.969597282022333*^9, 
  3.969597286273003*^9}},ExpressionUUID->"3f6a24ef-6567-44ab-8c73-\
e8fcc01ec14e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"VM", " ", "=", " ", 
   RowBox[{"Inverse", "[", 
    RowBox[{"Jac", ".", 
     RowBox[{"Transpose", "[", "Jac", "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"VM", " ", "//", " ", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.9695973424517508`*^9, 3.969597373104697*^9}},
 CellLabel->
  "In[109]:=",ExpressionUUID->"b6034421-7f63-462f-aad4-a6fa15805a7c"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      FractionBox[
       RowBox[{
        RowBox[{
         SuperscriptBox["L2", "2"], " ", 
         SuperscriptBox[
          RowBox[{"Cos", "[", 
           RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], "2"]}], "+", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"L1", " ", 
            RowBox[{"Cos", "[", "\[Theta]1", "]"}]}], "+", 
           RowBox[{"L2", " ", 
            RowBox[{"Cos", "[", 
             RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}]}], ")"}], 
         "2"]}], 
       RowBox[{
        RowBox[{
         SuperscriptBox["L1", "2"], " ", 
         SuperscriptBox["L2", "2"], " ", 
         SuperscriptBox[
          RowBox[{"Cos", "[", 
           RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], "2"], " ", 
         SuperscriptBox[
          RowBox[{"Sin", "[", "\[Theta]1", "]"}], "2"]}], "-", 
        RowBox[{"2", " ", 
         SuperscriptBox["L1", "2"], " ", 
         SuperscriptBox["L2", "2"], " ", 
         RowBox[{"Cos", "[", "\[Theta]1", "]"}], " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], " ", 
         RowBox[{"Sin", "[", "\[Theta]1", "]"}], " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}], "+", 
        RowBox[{
         SuperscriptBox["L1", "2"], " ", 
         SuperscriptBox["L2", "2"], " ", 
         SuperscriptBox[
          RowBox[{"Cos", "[", "\[Theta]1", "]"}], "2"], " ", 
         SuperscriptBox[
          RowBox[{"Sin", "[", 
           RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], "2"]}]}]], 
      FractionBox[
       RowBox[{
        RowBox[{
         SuperscriptBox["L2", "2"], " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}], "-", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"L1", " ", 
            RowBox[{"Cos", "[", "\[Theta]1", "]"}]}], "+", 
           RowBox[{"L2", " ", 
            RowBox[{"Cos", "[", 
             RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "L1"}], " ", 
            RowBox[{"Sin", "[", "\[Theta]1", "]"}]}], "-", 
           RowBox[{"L2", " ", 
            RowBox[{"Sin", "[", 
             RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}]}], ")"}]}]}], 
       RowBox[{
        RowBox[{
         SuperscriptBox["L1", "2"], " ", 
         SuperscriptBox["L2", "2"], " ", 
         SuperscriptBox[
          RowBox[{"Cos", "[", 
           RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], "2"], " ", 
         SuperscriptBox[
          RowBox[{"Sin", "[", "\[Theta]1", "]"}], "2"]}], "-", 
        RowBox[{"2", " ", 
         SuperscriptBox["L1", "2"], " ", 
         SuperscriptBox["L2", "2"], " ", 
         RowBox[{"Cos", "[", "\[Theta]1", "]"}], " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], " ", 
         RowBox[{"Sin", "[", "\[Theta]1", "]"}], " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}], "+", 
        RowBox[{
         SuperscriptBox["L1", "2"], " ", 
         SuperscriptBox["L2", "2"], " ", 
         SuperscriptBox[
          RowBox[{"Cos", "[", "\[Theta]1", "]"}], "2"], " ", 
         SuperscriptBox[
          RowBox[{"Sin", "[", 
           RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], "2"]}]}]]},
     {
      FractionBox[
       RowBox[{
        RowBox[{
         SuperscriptBox["L2", "2"], " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}], "-", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"L1", " ", 
            RowBox[{"Cos", "[", "\[Theta]1", "]"}]}], "+", 
           RowBox[{"L2", " ", 
            RowBox[{"Cos", "[", 
             RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "L1"}], " ", 
            RowBox[{"Sin", "[", "\[Theta]1", "]"}]}], "-", 
           RowBox[{"L2", " ", 
            RowBox[{"Sin", "[", 
             RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}]}], ")"}]}]}], 
       RowBox[{
        RowBox[{
         SuperscriptBox["L1", "2"], " ", 
         SuperscriptBox["L2", "2"], " ", 
         SuperscriptBox[
          RowBox[{"Cos", "[", 
           RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], "2"], " ", 
         SuperscriptBox[
          RowBox[{"Sin", "[", "\[Theta]1", "]"}], "2"]}], "-", 
        RowBox[{"2", " ", 
         SuperscriptBox["L1", "2"], " ", 
         SuperscriptBox["L2", "2"], " ", 
         RowBox[{"Cos", "[", "\[Theta]1", "]"}], " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], " ", 
         RowBox[{"Sin", "[", "\[Theta]1", "]"}], " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}], "+", 
        RowBox[{
         SuperscriptBox["L1", "2"], " ", 
         SuperscriptBox["L2", "2"], " ", 
         SuperscriptBox[
          RowBox[{"Cos", "[", "\[Theta]1", "]"}], "2"], " ", 
         SuperscriptBox[
          RowBox[{"Sin", "[", 
           RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], "2"]}]}]], 
      FractionBox[
       RowBox[{
        RowBox[{
         SuperscriptBox["L2", "2"], " ", 
         SuperscriptBox[
          RowBox[{"Sin", "[", 
           RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], "2"]}], "+", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "L1"}], " ", 
            RowBox[{"Sin", "[", "\[Theta]1", "]"}]}], "-", 
           RowBox[{"L2", " ", 
            RowBox[{"Sin", "[", 
             RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}]}], ")"}], 
         "2"]}], 
       RowBox[{
        RowBox[{
         SuperscriptBox["L1", "2"], " ", 
         SuperscriptBox["L2", "2"], " ", 
         SuperscriptBox[
          RowBox[{"Cos", "[", 
           RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], "2"], " ", 
         SuperscriptBox[
          RowBox[{"Sin", "[", "\[Theta]1", "]"}], "2"]}], "-", 
        RowBox[{"2", " ", 
         SuperscriptBox["L1", "2"], " ", 
         SuperscriptBox["L2", "2"], " ", 
         RowBox[{"Cos", "[", "\[Theta]1", "]"}], " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], " ", 
         RowBox[{"Sin", "[", "\[Theta]1", "]"}], " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}], "+", 
        RowBox[{
         SuperscriptBox["L1", "2"], " ", 
         SuperscriptBox["L2", "2"], " ", 
         SuperscriptBox[
          RowBox[{"Cos", "[", "\[Theta]1", "]"}], "2"], " ", 
         SuperscriptBox[
          RowBox[{"Sin", "[", 
           RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], "2"]}]}]]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.96959737405895*^9, 3.9701115752594347`*^9},
 CellLabel->
  "Out[110]//MatrixForm=",ExpressionUUID->"3f706e94-ba31-48bc-9a15-\
77e81fb8665b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"V", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"Vx", ",", " ", "Vy"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Vellipse", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Transpose", "[", "V", "]"}], ".", "VM", ".", "V"}], " ", "-", 
    " ", 
    RowBox[{"Kv", "^", "2"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.9695973897116117`*^9, 3.9695974494508657`*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"bb19684e-d040-49d4-a1e4-0eac83150fbb"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", 
   RowBox[{
    SuperscriptBox["L1", "2"], " ", 
    SuperscriptBox["L2", "2"]}]], 
  RowBox[{
   SuperscriptBox[
    RowBox[{"Csc", "[", "\[Theta]2", "]"}], "2"], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"2", " ", "L1", " ", "L2", " ", "Vx", " ", "Vy", " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], " ", 
      RowBox[{"Sin", "[", "\[Theta]1", "]"}]}], "+", 
     RowBox[{
      SuperscriptBox["L2", "2"], " ", 
      SuperscriptBox[
       RowBox[{"Cos", "[", 
        RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"2", " ", 
         SuperscriptBox["Vx", "2"]}], "-", 
        RowBox[{
         SuperscriptBox["Kv", "2"], " ", 
         SuperscriptBox["L1", "2"], " ", 
         SuperscriptBox[
          RowBox[{"Sin", "[", "\[Theta]1", "]"}], "2"]}]}], ")"}]}], "+", 
     RowBox[{
      SuperscriptBox["L1", "2"], " ", 
      SuperscriptBox[
       RowBox[{"Cos", "[", "\[Theta]1", "]"}], "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["Vx", "2"], "-", 
        RowBox[{
         SuperscriptBox["Kv", "2"], " ", 
         SuperscriptBox["L2", "2"], " ", 
         SuperscriptBox[
          RowBox[{"Sin", "[", 
           RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], "2"]}]}], ")"}]}], 
     "+", 
     RowBox[{"2", " ", "L1", " ", "L2", " ", 
      RowBox[{"Cos", "[", "\[Theta]1", "]"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Vx", " ", "Vy", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"Cos", "[", 
          RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["Vx", "2"], "+", 
           RowBox[{
            SuperscriptBox["Kv", "2"], " ", "L1", " ", "L2", " ", 
            RowBox[{"Sin", "[", "\[Theta]1", "]"}], " ", 
            RowBox[{"Sin", "[", 
             RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}]}], ")"}]}]}], 
       ")"}]}], "+", 
     RowBox[{"Vy", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         SuperscriptBox["L1", "2"], " ", "Vy", " ", 
         SuperscriptBox[
          RowBox[{"Sin", "[", "\[Theta]1", "]"}], "2"]}], "+", 
        RowBox[{
         SuperscriptBox["L1", "2"], " ", "Vx", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"2", " ", "\[Theta]1"}], "]"}]}], "+", 
        RowBox[{"2", " ", "L1", " ", "L2", " ", "Vy", " ", 
         RowBox[{"Sin", "[", "\[Theta]1", "]"}], " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}]}], "+", 
        RowBox[{"2", " ", 
         SuperscriptBox["L2", "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Vy", " ", 
            SuperscriptBox[
             RowBox[{"Sin", "[", 
              RowBox[{"\[Theta]1", "+", "\[Theta]2"}], "]"}], "2"]}], "+", 
           RowBox[{"Vx", " ", 
            RowBox[{"Sin", "[", 
             RowBox[{"2", " ", 
              RowBox[{"(", 
               RowBox[{"\[Theta]1", "+", "\[Theta]2"}], ")"}]}], "]"}]}]}], 
          ")"}]}]}], ")"}]}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{{3.969597431243475*^9, 3.969597451954646*^9}, 
   3.9701115772487383`*^9},
 CellLabel->
  "Out[112]=",ExpressionUUID->"f8495eb4-6db0-4b74-ab21-310bbaffa9a7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"NumericalMatV", " ", "=", " ", 
   RowBox[{"Simplify", "[", 
    RowBox[{
     RowBox[{"VM", " ", "/.", " ", "Data"}], " ", "/.", " ", 
     RowBox[{"{", 
      RowBox[{"Kv", " ", "->", " ", "1"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"EigVecV", " ", "=", " ", 
   RowBox[{"Eigenvectors", "[", "NumericalMatV", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"EigVecV", " ", "//", " ", "MatrixForm"}], "\[IndentingNewLine]", 
 RowBox[{"EigValV", " ", "=", " ", 
  RowBox[{
  "Eigenvalues", "[", "NumericalMatV", 
   "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.969597486768161*^9, 3.969597588405795*^9}, {
  3.969597878140297*^9, 3.969597878381205*^9}},
 CellLabel->
  "In[113]:=",ExpressionUUID->"fbdf5ed4-7c1b-4a86-89e6-24490ee20654"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0.391551244869981`", "0.9201563033750128`"},
     {
      RowBox[{"-", "0.9201563033750128`"}], "0.391551244869981`"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.969597585148781*^9, 3.969597588734892*^9}, 
   3.970111577305938*^9},
 CellLabel->
  "Out[115]//MatrixForm=",ExpressionUUID->"7d9b98d7-52be-41b6-acfe-\
2e67634cb0f3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"56.33741685528881`", ",", "2.92184240397045`"}], "}"}]], "Output",
 CellChangeTimes->{{3.969597585148781*^9, 3.969597588734892*^9}, 
   3.970111577306765*^9},
 CellLabel->
  "Out[116]=",ExpressionUUID->"23d75ce7-3d52-40e7-b86e-a8e10a7c546d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"point1", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"point2", " ", "=", " ", 
   RowBox[{
    RowBox[{"1", " ", "/", 
     RowBox[{"Sqrt", "[", 
      RowBox[{"Re", "[", 
       RowBox[{"EigValV", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Re", "[", 
       RowBox[{"EigVecV", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", " ", "1"}], "]"}], "]"}], "]"}], ",", " ", 
      RowBox[{"Re", "[", 
       RowBox[{"EigVecV", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", " ", "2"}], "]"}], "]"}], "]"}]}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"plEigVecV1", " ", "=", " ", 
    RowBox[{"ListLinePlot", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"point1", ",", " ", "point2"}], "}"}], ",", " ", 
      RowBox[{"PlotStyle", "->", " ", "Red"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"point3", " ", "=", " ", 
   RowBox[{
    RowBox[{"1", " ", "/", 
     RowBox[{"Sqrt", "[", 
      RowBox[{"Re", "[", 
       RowBox[{"EigValV", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}], 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Re", "[", 
       RowBox[{"EigVecV", "[", 
        RowBox[{"[", 
         RowBox[{"2", ",", " ", "1"}], "]"}], "]"}], "]"}], ",", " ", 
      RowBox[{"Re", "[", 
       RowBox[{"EigVecV", "[", 
        RowBox[{"[", 
         RowBox[{"2", ",", " ", "2"}], "]"}], "]"}], "]"}]}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"plEigVecV2", " ", "=", " ", 
    RowBox[{"ListLinePlot", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"point1", ",", " ", "point3"}], "}"}], ",", " ", 
      RowBox[{"PlotStyle", "->", "Green"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"plContourV", " ", "=", " ", 
   RowBox[{"ContourPlot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Vellipse", " ", "/.", " ", "Data"}], " ", "/.", " ", 
        RowBox[{"{", 
         RowBox[{"Kv", " ", "->", " ", "1"}], "}"}]}], "}"}], " ", "==", " ", 
      "0"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"Vx", ",", " ", 
       RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"Vy", ",", " ", 
       RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], ",", " ", 
     RowBox[{"GridLines", "->", "Automatic"}], ",", " ", 
     RowBox[{"ContourStyle", "->", "Cyan"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"plContourV", ",", " ", "plEigVecV1", ",", " ", "plEigVecV2"}], 
    "}"}], ",", " ", 
   RowBox[{"PlotRange", " ", "->", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], "}"}]}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.969597629648252*^9, 3.9695977938063374`*^9}, {
  3.969597833939975*^9, 3.96959799880497*^9}, {3.9695980384622583`*^9, 
  3.969598042424367*^9}},
 CellLabel->
  "In[117]:=",ExpressionUUID->"d89a96db-e72b-4673-a112-2bd20b65ab4f"],

Cell[BoxData[
 GraphicsBox[{{GraphicsComplexBox[CompressedData["
1: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
aLCl/A==
     "], {{}, {}, 
      TagBox[
       TooltipBox[
        {RGBColor[0, 1, 1], AbsoluteThickness[2], LineBox[CompressedData["
1:eJwl1GeYCAQcBvAbnHXLmeeGu7P3ur1w545sEkkRGQ2dFFnJaA+jyCqzEDJT
ocysFKUdoqVhVJQVqt89Pvze//f3ed5/4oBh3YsCAwICbhLFN4hgSlCSEEpR
mjKUpRyhhBFOBJGUJ4oKVKQSlalCVaKpRgyxxBFPdRJIJIka1KQWtalDXepR
nwY0pBGNaUJTmtGcFiSTQipppJNBJllkk0MuLWlFa/LIpw0FFNKWdsUd0Z4O
dKQTnelCV7rRnZvpwS30pBe30pvb6MPt3EFf+nEn/RnAXQxkEIMZwt3cw73c
x1Dup4hhPMBwHuQhRjCShxnFaMYwlnE8wngeZQITmcRkHuNxnuBJnuJpnuFZ
nuN5pjCVaUznBV5kBjN5iVnMZg5zmcfLvMJ8FrCQRSxmCa/yGktZxnJeZwUr
WcUbrGYNa1nHejbwJht5i7d5h01sZgvv8h5b2cZ2drCTXbzPbvawl33s5wMO
8CEfcZBDfMwnHOZTPuNzvuBLvuJrvuEIRznGtxznBN/xPT/wIz9xkp/5hV/5
jVOc5gxn+Z0/+JNznOcv/uYCF7nEZa7wD1e5xnX+5T+Kxx9IEMGUoCQhlKI0
ZShLOUIJI5wIIilPFBWoSCUqU4WqRFONGGKJI57qJJBIEjWoSS1qU4e61KM+
DWhIIxrThKY0ozktSCaFVNJIJ4NMssgmh1xa0orW5JFPGwoopC3tAm/8yP8B
xKqMVQ==
          "]]},
        RowBox[{
          RowBox[{"{", 
            RowBox[{"164.60905349794237`", " ", 
              RowBox[{"(", 
                RowBox[{
                  RowBox[{"0.`", "\[VeryThinSpace]"}], "+", 
                  RowBox[{"0.0675`", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "0.09`"}], "+", 
                    SuperscriptBox[
                    TagBox["Vx", HoldForm], "2"]}], ")"}]}], "+", 
                  RowBox[{"0.15588457268119893`", " ", 
                    TagBox["Vx", HoldForm], " ", 
                    TagBox["Vy", HoldForm]}], "+", 
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"0.07794228634059946`", " ", 
                    TagBox["Vx", HoldForm]}], "+", 
                    RowBox[{"0.2925`", " ", 
                    TagBox["Vy", HoldForm]}]}], ")"}], " ", 
                    TagBox["Vy", HoldForm]}]}], ")"}]}], "}"}], "\[Equal]", 
          "0"}]],
       Annotation[#, {
         164.60905349794237` (0. + 
           0.0675 (-0.09 + HoldForm[$CellContext`Vx]^2) + 
           0.15588457268119893` HoldForm[$CellContext`Vx] 
            HoldForm[$CellContext`Vy] + (
             0.07794228634059946 HoldForm[$CellContext`Vx] + 
             0.2925 HoldForm[$CellContext`Vy]) HoldForm[$CellContext`Vy])} == 
        0, "Tooltip"]& ]}], {}}, {{}, 
    InterpretationBox[{
      TagBox[{{}, {}, 
        TagBox[
         {RGBColor[1, 0, 0], PointSize[
           NCache[
            Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[2], 
          LineBox[{{0., 0.}, {0.05216631314097217, 0.12259228514632772`}}]},
         Annotation[#, "Charting`Private`Tag#1"]& ]},
       {"WolframDynamicHighlight", <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
      StyleBox[
       DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
         Slot["HighlightElements"], 
         Slot["LayoutOptions"], 
         Slot["Meta"], 
         Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
            Annotation[{
              Hue[0.67, 0.6, 0.6], 
              Directive[
               PointSize[
                Rational[7, 360]], 
               AbsoluteThickness[2], 
               RGBColor[1, 0, 0]], 
              Line[{{0., 0.}, {0.05216631314097217, 0.12259228514632772`}}]}, 
             "Charting`Private`Tag#1"]}}, <|
          "HighlightElements" -> <|
            "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
           "LayoutOptions" -> <|
            "PanelPlotLayout" -> <||>, 
             "PlotRange" -> {{0, 0.05216631314097217}, {
               0, 0.12259228514632772`}}, 
             "Frame" -> {{False, False}, {False, False}}, 
             "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
             "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
             GoldenRatio^(-1), "DefaultStyle" -> {
               Directive[
                PointSize[
                 Rational[7, 360]], 
                AbsoluteThickness[2], 
                RGBColor[1, 0, 0]]}, 
             "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                 (Identity[#]& )[
                  Part[#, 1]], 
                 (Identity[#]& )[
                  Part[#, 2]]}& ), 
               "ScalingFunctions" -> {{Identity, Identity}, {
                 Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
             False|>, 
           "Meta" -> <|
            "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
             "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>]]& )[<|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, 
            "PlotRange" -> {{0, 0.05216631314097217}, {
              0, 0.12259228514632772`}}, 
            "Frame" -> {{False, False}, {False, False}}, 
            "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
            "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
            GoldenRatio^(-1), "DefaultStyle" -> {
              Directive[
               PointSize[
                Rational[7, 360]], 
               AbsoluteThickness[2], 
               RGBColor[1, 0, 0]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                (Identity[#]& )[
                 Part[#, 1]], 
                (Identity[#]& )[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            ListLinePlot, "GroupHighlight" -> False|>|>],
        ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
         4.503599627370496*^15, -4.503599627370496*^15}}],
       Selectable->False]},
     Annotation[{{{}, {}, 
        Annotation[{
          Hue[0.67, 0.6, 0.6], 
          Directive[
           PointSize[
            Rational[7, 360]], 
           AbsoluteThickness[2], 
           RGBColor[1, 0, 0]], 
          Line[{{0., 0.}, {0.05216631314097217, 0.12259228514632772`}}]}, 
         "Charting`Private`Tag#1"]}}, <|
      "HighlightElements" -> <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
       "LayoutOptions" -> <|
        "PanelPlotLayout" -> <||>, 
         "PlotRange" -> {{0, 0.05216631314097217}, {0, 0.12259228514632772`}},
          "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0},
          "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
         "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
         "DefaultStyle" -> {
           Directive[
            PointSize[
             Rational[7, 360]], 
            AbsoluteThickness[2], 
            RGBColor[1, 0, 0]]}, 
         "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), 
           "ScalingFunctions" -> {{Identity, Identity}, {
             Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
       "Meta" -> <|
        "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
         ListLinePlot, "GroupHighlight" -> False|>|>, 
      "DynamicHighlight"]], {{}, {}}}, {{}, 
    InterpretationBox[{
      TagBox[{{}, {}, 
        TagBox[
         {RGBColor[0, 1, 0], PointSize[
           NCache[
            Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[2], 
          LineBox[{{0., 0.}, {-0.538310947105182, 0.22906578012134743`}}]},
         Annotation[#, "Charting`Private`Tag#1"]& ]},
       {"WolframDynamicHighlight", <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
      StyleBox[
       DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
         Slot["HighlightElements"], 
         Slot["LayoutOptions"], 
         Slot["Meta"], 
         Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
            Annotation[{
              Hue[0.67, 0.6, 0.6], 
              Directive[
               PointSize[
                Rational[7, 360]], 
               AbsoluteThickness[2], 
               RGBColor[0, 1, 0]], 
              Line[{{0., 0.}, {-0.538310947105182, 0.22906578012134743`}}]}, 
             "Charting`Private`Tag#1"]}}, <|
          "HighlightElements" -> <|
            "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
           "LayoutOptions" -> <|
            "PanelPlotLayout" -> <||>, 
             "PlotRange" -> {{-0.538310947105182, 0}, {
               0, 0.22906578012134743`}}, 
             "Frame" -> {{False, False}, {False, False}}, 
             "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
             "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
             GoldenRatio^(-1), "DefaultStyle" -> {
               Directive[
                PointSize[
                 Rational[7, 360]], 
                AbsoluteThickness[2], 
                RGBColor[0, 1, 0]]}, 
             "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                 (Identity[#]& )[
                  Part[#, 1]], 
                 (Identity[#]& )[
                  Part[#, 2]]}& ), 
               "ScalingFunctions" -> {{Identity, Identity}, {
                 Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
             False|>, 
           "Meta" -> <|
            "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
             "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>]]& )[<|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, 
            "PlotRange" -> {{-0.538310947105182, 0}, {
              0, 0.22906578012134743`}}, 
            "Frame" -> {{False, False}, {False, False}}, 
            "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
            "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
            GoldenRatio^(-1), "DefaultStyle" -> {
              Directive[
               PointSize[
                Rational[7, 360]], 
               AbsoluteThickness[2], 
               RGBColor[0, 1, 0]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                (Identity[#]& )[
                 Part[#, 1]], 
                (Identity[#]& )[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            ListLinePlot, "GroupHighlight" -> False|>|>],
        ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
         4.503599627370496*^15, -4.503599627370496*^15}}],
       Selectable->False]},
     Annotation[{{{}, {}, 
        Annotation[{
          Hue[0.67, 0.6, 0.6], 
          Directive[
           PointSize[
            Rational[7, 360]], 
           AbsoluteThickness[2], 
           RGBColor[0, 1, 0]], 
          Line[{{0., 0.}, {-0.538310947105182, 0.22906578012134743`}}]}, 
         "Charting`Private`Tag#1"]}}, <|
      "HighlightElements" -> <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
       "LayoutOptions" -> <|
        "PanelPlotLayout" -> <||>, 
         "PlotRange" -> {{-0.538310947105182, 0}, {0, 0.22906578012134743`}}, 
         "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
         "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
         "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
         "DefaultStyle" -> {
           Directive[
            PointSize[
             Rational[7, 360]], 
            AbsoluteThickness[2], 
            RGBColor[0, 1, 0]]}, 
         "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), 
           "ScalingFunctions" -> {{Identity, Identity}, {
             Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
       "Meta" -> <|
        "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
         ListLinePlot, "GroupHighlight" -> False|>|>, 
      "DynamicHighlight"]], {{}, {}}}},
  AspectRatio->1,
  AxesLabel->{None, None},
  AxesOrigin->{0., 0.},
  DefaultBaseStyle->{"PlotGraphics", "Graphics"},
  DisplayFunction->Identity,
  Frame->True,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{Automatic, Automatic},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "GridLinesInFront" -> 
    True},
  PlotInteractivity:>True,
  PlotRange->{{-1, 1}, {-1, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.969597972229906*^9, 3.9695979995557623`*^9}, 
   3.969598043654557*^9, 3.9701115774435377`*^9},
 CellLabel->
  "Out[123]=",ExpressionUUID->"aa7bc0f6-354b-47d7-87d6-43be4aa87bca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "plContourV", ",", " ", "plEigVecV1", ",", " ", "plEigVecV2", ",", " ", 
     "plContourF", ",", " ", "plEigVecF1", ",", " ", "plEigVecF2"}], "}"}], ",",
    " ", 
   RowBox[{"PlotRange", " ", "->", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "7"}], ",", " ", "7"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "7"}], ",", " ", "7"}], "}"}]}], "}"}]}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "The", " ", "directions", " ", "of", " ", "them", " ", "are", " ", 
     "shared"}], ",", " ", 
    RowBox[{"they", " ", "are", " ", "the", " ", 
     RowBox[{"same", ".", " ", "One"}], " ", "over", " ", "the", " ", "eig", " ",
      "of", " ", "the", " ", "force", " ", "ellipsoid", " ", "will", " ", 
     "give", " ", "an", " ", "eigenvalue", " ", "of", " ", "the", " ", 
     "velocity", " ", "ellipsoid"}]}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.969598047061577*^9, 3.9695981614563837`*^9}},
 CellLabel->
  "In[124]:=",ExpressionUUID->"744ad9aa-be1c-4530-9310-a534222d875c"],

Cell[BoxData[
 GraphicsBox[{{GraphicsComplexBox[CompressedData["
1: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
aLCl/A==
     "], {{}, {}, 
      TagBox[
       TooltipBox[
        {RGBColor[0, 1, 1], AbsoluteThickness[2], LineBox[CompressedData["
1:eJwl1GeYCAQcBvAbnHXLmeeGu7P3ur1w545sEkkRGQ2dFFnJaA+jyCqzEDJT
ocysFKUdoqVhVJQVqt89Pvze//f3ed5/4oBh3YsCAwICbhLFN4hgSlCSEEpR
mjKUpRyhhBFOBJGUJ4oKVKQSlalCVaKpRgyxxBFPdRJIJIka1KQWtalDXepR
nwY0pBGNaUJTmtGcFiSTQipppJNBJllkk0MuLWlFa/LIpw0FFNKWdsUd0Z4O
dKQTnelCV7rRnZvpwS30pBe30pvb6MPt3EFf+nEn/RnAXQxkEIMZwt3cw73c
x1Dup4hhPMBwHuQhRjCShxnFaMYwlnE8wngeZQITmcRkHuNxnuBJnuJpnuFZ
nuN5pjCVaUznBV5kBjN5iVnMZg5zmcfLvMJ8FrCQRSxmCa/yGktZxnJeZwUr
WcUbrGYNa1nHejbwJht5i7d5h01sZgvv8h5b2cZ2drCTXbzPbvawl33s5wMO
8CEfcZBDfMwnHOZTPuNzvuBLvuJrvuEIRznGtxznBN/xPT/wIz9xkp/5hV/5
jVOc5gxn+Z0/+JNznOcv/uYCF7nEZa7wD1e5xnX+5T+Kxx9IEMGUoCQhlKI0
ZShLOUIJI5wIIilPFBWoSCUqU4WqRFONGGKJI57qJJBIEjWoSS1qU4e61KM+
DWhIIxrThKY0ozktSCaFVNJIJ4NMssgmh1xa0orW5JFPGwoopC3tAm/8yP8B
xKqMVQ==
          "]]},
        RowBox[{
          RowBox[{"{", 
            RowBox[{"164.60905349794237`", " ", 
              RowBox[{"(", 
                RowBox[{
                  RowBox[{"0.`", "\[VeryThinSpace]"}], "+", 
                  RowBox[{"0.0675`", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "0.09`"}], "+", 
                    SuperscriptBox[
                    TagBox["Vx", HoldForm], "2"]}], ")"}]}], "+", 
                  RowBox[{"0.15588457268119893`", " ", 
                    TagBox["Vx", HoldForm], " ", 
                    TagBox["Vy", HoldForm]}], "+", 
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"0.07794228634059946`", " ", 
                    TagBox["Vx", HoldForm]}], "+", 
                    RowBox[{"0.2925`", " ", 
                    TagBox["Vy", HoldForm]}]}], ")"}], " ", 
                    TagBox["Vy", HoldForm]}]}], ")"}]}], "}"}], "\[Equal]", 
          "0"}]],
       Annotation[#, {
         164.60905349794237` (0. + 
           0.0675 (-0.09 + HoldForm[$CellContext`Vx]^2) + 
           0.15588457268119893` HoldForm[$CellContext`Vx] 
            HoldForm[$CellContext`Vy] + (
             0.07794228634059946 HoldForm[$CellContext`Vx] + 
             0.2925 HoldForm[$CellContext`Vy]) HoldForm[$CellContext`Vy])} == 
        0, "Tooltip"]& ]}], {}}, {{}, 
    InterpretationBox[{
      TagBox[{{}, {}, 
        TagBox[
         {RGBColor[1, 0, 0], PointSize[
           NCache[
            Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[2], 
          LineBox[{{0., 0.}, {0.05216631314097217, 0.12259228514632772`}}]},
         Annotation[#, "Charting`Private`Tag#1"]& ]},
       {"WolframDynamicHighlight", <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
      StyleBox[
       DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
         Slot["HighlightElements"], 
         Slot["LayoutOptions"], 
         Slot["Meta"], 
         Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
            Annotation[{
              Hue[0.67, 0.6, 0.6], 
              Directive[
               PointSize[
                Rational[7, 360]], 
               AbsoluteThickness[2], 
               RGBColor[1, 0, 0]], 
              Line[{{0., 0.}, {0.05216631314097217, 0.12259228514632772`}}]}, 
             "Charting`Private`Tag#1"]}}, <|
          "HighlightElements" -> <|
            "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
           "LayoutOptions" -> <|
            "PanelPlotLayout" -> <||>, 
             "PlotRange" -> {{0, 0.05216631314097217}, {
               0, 0.12259228514632772`}}, 
             "Frame" -> {{False, False}, {False, False}}, 
             "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
             "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
             GoldenRatio^(-1), "DefaultStyle" -> {
               Directive[
                PointSize[
                 Rational[7, 360]], 
                AbsoluteThickness[2], 
                RGBColor[1, 0, 0]]}, 
             "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                 (Identity[#]& )[
                  Part[#, 1]], 
                 (Identity[#]& )[
                  Part[#, 2]]}& ), 
               "ScalingFunctions" -> {{Identity, Identity}, {
                 Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
             False|>, 
           "Meta" -> <|
            "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
             "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>]]& )[<|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, 
            "PlotRange" -> {{0, 0.05216631314097217}, {
              0, 0.12259228514632772`}}, 
            "Frame" -> {{False, False}, {False, False}}, 
            "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
            "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
            GoldenRatio^(-1), "DefaultStyle" -> {
              Directive[
               PointSize[
                Rational[7, 360]], 
               AbsoluteThickness[2], 
               RGBColor[1, 0, 0]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                (Identity[#]& )[
                 Part[#, 1]], 
                (Identity[#]& )[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            ListLinePlot, "GroupHighlight" -> False|>|>],
        ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
         4.503599627370496*^15, -4.503599627370496*^15}}],
       Selectable->False]},
     Annotation[{{{}, {}, 
        Annotation[{
          Hue[0.67, 0.6, 0.6], 
          Directive[
           PointSize[
            Rational[7, 360]], 
           AbsoluteThickness[2], 
           RGBColor[1, 0, 0]], 
          Line[{{0., 0.}, {0.05216631314097217, 0.12259228514632772`}}]}, 
         "Charting`Private`Tag#1"]}}, <|
      "HighlightElements" -> <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
       "LayoutOptions" -> <|
        "PanelPlotLayout" -> <||>, 
         "PlotRange" -> {{0, 0.05216631314097217}, {0, 0.12259228514632772`}},
          "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0},
          "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
         "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
         "DefaultStyle" -> {
           Directive[
            PointSize[
             Rational[7, 360]], 
            AbsoluteThickness[2], 
            RGBColor[1, 0, 0]]}, 
         "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), 
           "ScalingFunctions" -> {{Identity, Identity}, {
             Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
       "Meta" -> <|
        "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
         ListLinePlot, "GroupHighlight" -> False|>|>, 
      "DynamicHighlight"]], {{}, {}}}, {{}, 
    InterpretationBox[{
      TagBox[{{}, {}, 
        TagBox[
         {RGBColor[0, 1, 0], PointSize[
           NCache[
            Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[2], 
          LineBox[{{0., 0.}, {-0.538310947105182, 0.22906578012134743`}}]},
         Annotation[#, "Charting`Private`Tag#1"]& ]},
       {"WolframDynamicHighlight", <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
      StyleBox[
       DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
         Slot["HighlightElements"], 
         Slot["LayoutOptions"], 
         Slot["Meta"], 
         Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
            Annotation[{
              Hue[0.67, 0.6, 0.6], 
              Directive[
               PointSize[
                Rational[7, 360]], 
               AbsoluteThickness[2], 
               RGBColor[0, 1, 0]], 
              Line[{{0., 0.}, {-0.538310947105182, 0.22906578012134743`}}]}, 
             "Charting`Private`Tag#1"]}}, <|
          "HighlightElements" -> <|
            "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
           "LayoutOptions" -> <|
            "PanelPlotLayout" -> <||>, 
             "PlotRange" -> {{-0.538310947105182, 0}, {
               0, 0.22906578012134743`}}, 
             "Frame" -> {{False, False}, {False, False}}, 
             "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
             "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
             GoldenRatio^(-1), "DefaultStyle" -> {
               Directive[
                PointSize[
                 Rational[7, 360]], 
                AbsoluteThickness[2], 
                RGBColor[0, 1, 0]]}, 
             "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                 (Identity[#]& )[
                  Part[#, 1]], 
                 (Identity[#]& )[
                  Part[#, 2]]}& ), 
               "ScalingFunctions" -> {{Identity, Identity}, {
                 Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
             False|>, 
           "Meta" -> <|
            "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
             "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>]]& )[<|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, 
            "PlotRange" -> {{-0.538310947105182, 0}, {
              0, 0.22906578012134743`}}, 
            "Frame" -> {{False, False}, {False, False}}, 
            "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
            "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
            GoldenRatio^(-1), "DefaultStyle" -> {
              Directive[
               PointSize[
                Rational[7, 360]], 
               AbsoluteThickness[2], 
               RGBColor[0, 1, 0]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                (Identity[#]& )[
                 Part[#, 1]], 
                (Identity[#]& )[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            ListLinePlot, "GroupHighlight" -> False|>|>],
        ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
         4.503599627370496*^15, -4.503599627370496*^15}}],
       Selectable->False]},
     Annotation[{{{}, {}, 
        Annotation[{
          Hue[0.67, 0.6, 0.6], 
          Directive[
           PointSize[
            Rational[7, 360]], 
           AbsoluteThickness[2], 
           RGBColor[0, 1, 0]], 
          Line[{{0., 0.}, {-0.538310947105182, 0.22906578012134743`}}]}, 
         "Charting`Private`Tag#1"]}}, <|
      "HighlightElements" -> <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
       "LayoutOptions" -> <|
        "PanelPlotLayout" -> <||>, 
         "PlotRange" -> {{-0.538310947105182, 0}, {0, 0.22906578012134743`}}, 
         "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
         "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
         "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
         "DefaultStyle" -> {
           Directive[
            PointSize[
             Rational[7, 360]], 
            AbsoluteThickness[2], 
            RGBColor[0, 1, 0]]}, 
         "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), 
           "ScalingFunctions" -> {{Identity, Identity}, {
             Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
       "Meta" -> <|
        "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
         ListLinePlot, "GroupHighlight" -> False|>|>, 
      "DynamicHighlight"]], {{}, {}}}, {GraphicsComplexBox[CompressedData["
1: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
kG+40jfw//9f9H9M1JDN
     "], {{}, {}, 
      TagBox[
       TooltipBox[
        {RGBColor[0.24, 0.6, 0.8], AbsoluteThickness[2], 
         LineBox[CompressedData["
1:eJwl1WVbEAYUBWCwwG4MMLDFxG6xu1BsRRE7UOzA7u5WBF3ows7NWJjrNDdd
6Dp1oZu6l2cf3nN/wTk3PC4hekxgQEDAHpF205GeDGQkE0EEk5ksZCUb2clB
TnKRmzzkJR/5CaEABSlEYUIJowhFKUZxwilBSUpRmjKUpRzliaACFalEZapQ
lUiqUZ0a1KQWtalDXepRnwY0pBGNiaIJTWlGc1rQkla0pg1taUd7OtCRTnSm
C9F0pRsxdKcHPelFb/rQl370J5YBDCSOQcQzmCEMZRjDGcFIRjGaMSQwlnEk
Mp4JTGQSk5nCVKYxnRkkMZNZzGYOc5nHfBawkEUsZglLWcZyVrCSVaxmDWtZ
x3o2sJFNbGYLW9nGdnawk2R2kUIqu9nDMzzLczzPXvbxAi/yEi+znwMc5BCH
OcJRjnGcE5zkFK/wKqc5w1nO8Rqv8wZvcp4LXOQSl7nCW7zNO7zLe7zPB3zI
R3zMJ3zKVa5xnRvc5Baf8Tm3ucMXfMlXfM1d7vEN3/Id3/MDP/ITP/MLv/Ib
v3OfB/zBn/zF3zzkEf/wL495wlPSyh9IOtKTgYxkIohgMpOFrGQjOznISS5y
k4e85CM/IRSgIIUoTChhFKEoxShOOCUoSSlKU4aylKM8EVSgIpWoTBWqEkk1
qlODmtSiNnWoSz3q04CGNKIxUTShKc1oTgta0orWtKEt7WhPBzrSic50IZqu
dCOG7vSgJ73oTR/60o/+xDKAgcQxiHgGM4ShDGM4IxjJKEaTNt4JjGUciYxn
AhOZxGSmMJVpTGcGScxkFrOZw1zmMZ8FLGQRi1nCUpaxnBWsZBWrWcNa1rGe
DWxkE5vZwla2sZ0d7CSZXaSQyu7A///Rf4Tat1g=
          "]]},
        RowBox[{
          RowBox[{
            RowBox[{"-", "1.`"}], "+", 
            RowBox[{"0.2925`", " ", 
              SuperscriptBox[
               TagBox["Fx", HoldForm], "2"]}], "+", 
            RowBox[{"0.5196152422706631`", " ", 
              RowBox[{"(", 
                RowBox[{
                  RowBox[{"0.`", "\[VeryThinSpace]"}], "-", 
                  RowBox[{"0.15`", " ", 
                    TagBox["Fx", HoldForm]}]}], ")"}], " ", 
              TagBox["Fy", HoldForm]}], "-", 
            RowBox[{"0.15588457268119893`", " ", 
              TagBox["Fx", HoldForm], " ", 
              TagBox["Fy", HoldForm]}], "+", 
            RowBox[{"0.0675`", " ", 
              SuperscriptBox[
               TagBox["Fy", HoldForm], "2"]}]}], "\[Equal]", "0"}]],
       Annotation[#, -1. + 0.2925 HoldForm[$CellContext`Fx]^2 + 
         0.5196152422706631 (0. - 0.15 HoldForm[$CellContext`Fx]) 
          HoldForm[$CellContext`Fy] - 0.15588457268119893` 
         HoldForm[$CellContext`Fx] HoldForm[$CellContext`Fy] + 
         0.0675 HoldForm[$CellContext`Fy]^2 == 0, "Tooltip"]& ]}], {}}, {{}, 
    InterpretationBox[{
      TagBox[{{}, {}, 
        TagBox[
         {RGBColor[1, 0, 0], PointSize[
           NCache[
            Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[2], 
          LineBox[{{0., 0.}, {-1.5728597517734149`, 0.6692941096571243}}]},
         Annotation[#, "Charting`Private`Tag#1"]& ]},
       {"WolframDynamicHighlight", <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
      StyleBox[
       DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
         Slot["HighlightElements"], 
         Slot["LayoutOptions"], 
         Slot["Meta"], 
         Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
            Annotation[{
              Hue[0.67, 0.6, 0.6], 
              Directive[
               PointSize[
                Rational[7, 360]], 
               AbsoluteThickness[2], 
               RGBColor[1, 0, 0]], 
              Line[{{0., 0.}, {-1.5728597517734149`, 0.6692941096571243}}]}, 
             "Charting`Private`Tag#1"]}}, <|
          "HighlightElements" -> <|
            "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
           "LayoutOptions" -> <|
            "PanelPlotLayout" -> <||>, 
             "PlotRange" -> {{-1.5728597517734149`, 0}, {
               0, 0.6692941096571243}}, 
             "Frame" -> {{False, False}, {False, False}}, 
             "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
             "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
             GoldenRatio^(-1), "DefaultStyle" -> {
               Directive[
                PointSize[
                 Rational[7, 360]], 
                AbsoluteThickness[2], 
                RGBColor[1, 0, 0]]}, 
             "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                 (Identity[#]& )[
                  Part[#, 1]], 
                 (Identity[#]& )[
                  Part[#, 2]]}& ), 
               "ScalingFunctions" -> {{Identity, Identity}, {
                 Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
             False|>, 
           "Meta" -> <|
            "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
             "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>]]& )[<|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, 
            "PlotRange" -> {{-1.5728597517734149`, 0}, {
              0, 0.6692941096571243}}, 
            "Frame" -> {{False, False}, {False, False}}, 
            "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
            "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
            GoldenRatio^(-1), "DefaultStyle" -> {
              Directive[
               PointSize[
                Rational[7, 360]], 
               AbsoluteThickness[2], 
               RGBColor[1, 0, 0]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                (Identity[#]& )[
                 Part[#, 1]], 
                (Identity[#]& )[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            ListLinePlot, "GroupHighlight" -> False|>|>],
        ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
         4.503599627370496*^15, -4.503599627370496*^15}}],
       Selectable->False]},
     Annotation[{{{}, {}, 
        Annotation[{
          Hue[0.67, 0.6, 0.6], 
          Directive[
           PointSize[
            Rational[7, 360]], 
           AbsoluteThickness[2], 
           RGBColor[1, 0, 0]], 
          Line[{{0., 0.}, {-1.5728597517734149`, 0.6692941096571243}}]}, 
         "Charting`Private`Tag#1"]}}, <|
      "HighlightElements" -> <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
       "LayoutOptions" -> <|
        "PanelPlotLayout" -> <||>, 
         "PlotRange" -> {{-1.5728597517734149`, 0}, {0, 0.6692941096571243}}, 
         "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
         "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
         "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
         "DefaultStyle" -> {
           Directive[
            PointSize[
             Rational[7, 360]], 
            AbsoluteThickness[2], 
            RGBColor[1, 0, 0]]}, 
         "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), 
           "ScalingFunctions" -> {{Identity, Identity}, {
             Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
       "Meta" -> <|
        "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
         ListLinePlot, "GroupHighlight" -> False|>|>, 
      "DynamicHighlight"]], {{}, {}}}, {{}, 
    InterpretationBox[{
      TagBox[{{}, {}, 
        TagBox[
         {RGBColor[0, 1, 0], PointSize[
           NCache[
            Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[2], 
          LineBox[{{0., 0.}, {-2.9389153292264796`, -6.906532671531095}}]},
         Annotation[#, "Charting`Private`Tag#1"]& ]},
       {"WolframDynamicHighlight", <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
      StyleBox[
       DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
         Slot["HighlightElements"], 
         Slot["LayoutOptions"], 
         Slot["Meta"], 
         Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
            Annotation[{
              Hue[0.67, 0.6, 0.6], 
              Directive[
               PointSize[
                Rational[7, 360]], 
               AbsoluteThickness[2], 
               RGBColor[0, 1, 0]], 
              Line[{{0., 0.}, {-2.9389153292264796`, -6.906532671531095}}]}, 
             "Charting`Private`Tag#1"]}}, <|
          "HighlightElements" -> <|
            "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
           "LayoutOptions" -> <|
            "PanelPlotLayout" -> <||>, 
             "PlotRange" -> {{-2.9389153292264796`, 0}, {-6.906532671531095, 
                0}}, "Frame" -> {{False, False}, {False, False}}, 
             "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
             "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
             GoldenRatio^(-1), "DefaultStyle" -> {
               Directive[
                PointSize[
                 Rational[7, 360]], 
                AbsoluteThickness[2], 
                RGBColor[0, 1, 0]]}, 
             "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                 (Identity[#]& )[
                  Part[#, 1]], 
                 (Identity[#]& )[
                  Part[#, 2]]}& ), 
               "ScalingFunctions" -> {{Identity, Identity}, {
                 Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
             False|>, 
           "Meta" -> <|
            "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
             "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>]]& )[<|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, 
            "PlotRange" -> {{-2.9389153292264796`, 0}, {-6.906532671531095, 
               0}}, "Frame" -> {{False, False}, {False, False}}, 
            "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
            "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
            GoldenRatio^(-1), "DefaultStyle" -> {
              Directive[
               PointSize[
                Rational[7, 360]], 
               AbsoluteThickness[2], 
               RGBColor[0, 1, 0]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                (Identity[#]& )[
                 Part[#, 1]], 
                (Identity[#]& )[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            ListLinePlot, "GroupHighlight" -> False|>|>],
        ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
         4.503599627370496*^15, -4.503599627370496*^15}}],
       Selectable->False]},
     Annotation[{{{}, {}, 
        Annotation[{
          Hue[0.67, 0.6, 0.6], 
          Directive[
           PointSize[
            Rational[7, 360]], 
           AbsoluteThickness[2], 
           RGBColor[0, 1, 0]], 
          Line[{{0., 0.}, {-2.9389153292264796`, -6.906532671531095}}]}, 
         "Charting`Private`Tag#1"]}}, <|
      "HighlightElements" -> <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
       "LayoutOptions" -> <|
        "PanelPlotLayout" -> <||>, 
         "PlotRange" -> {{-2.9389153292264796`, 0}, {-6.906532671531095, 0}}, 
         "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
         "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
         "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
         "DefaultStyle" -> {
           Directive[
            PointSize[
             Rational[7, 360]], 
            AbsoluteThickness[2], 
            RGBColor[0, 1, 0]]}, 
         "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), 
           "ScalingFunctions" -> {{Identity, Identity}, {
             Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
       "Meta" -> <|
        "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
         ListLinePlot, "GroupHighlight" -> False|>|>, 
      "DynamicHighlight"]], {{}, {}}}},
  AspectRatio->1,
  AxesLabel->{None, None},
  AxesOrigin->{0., 0.},
  DefaultBaseStyle->{"PlotGraphics", "Graphics"},
  DisplayFunction->Identity,
  Frame->True,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{Automatic, Automatic},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "GridLinesInFront" -> 
    True},
  PlotInteractivity:>True,
  PlotRange->{{-7, 7}, {-7, 7}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.969598115140224*^9, 3.96959816246375*^9, 
  3.970111577473899*^9},
 CellLabel->
  "Out[124]=",ExpressionUUID->"2cc1b312-3200-44de-b63a-da4d6ef85969"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Velocity analysis: direct kinematics 22/10/2025", "Section",
 CellChangeTimes->{{3.970111229277206*^9, 
  3.970111263797286*^9}},ExpressionUUID->"69303267-727f-49aa-bdc0-\
f941a4a12eac"],

Cell["\<\
we assume that joint velocities are well known. There are 2 ways to compute \
this velocity matrix. One is the following, and then there is also the \
helicoidal formulation\
\>", "Text",
 CellChangeTimes->{{3.9701113355491333`*^9, 3.970111343805236*^9}, {
  3.970111686730949*^9, 
  3.9701117161640053`*^9}},ExpressionUUID->"4993232e-7360-4fa6-b014-\
680145160d34"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"W01", " ", "=", " ", 
   RowBox[{"Simplify", "[", 
    RowBox[{
     RowBox[{"D", "[", 
      RowBox[{"M01", ",", " ", "t"}], "]"}], ".", 
     RowBox[{"Inverse", "[", "M01", "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"W01", " ", "//", " ", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.9701115124649467`*^9, 3.970111564752557*^9}},
 CellLabel->
  "In[125]:=",ExpressionUUID->"dd535659-dd57-467c-9e6d-fe44f2244643"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", 
      RowBox[{"-", 
       RowBox[{
        SuperscriptBox["\[Theta]1", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}], "0", "0"},
     {
      RowBox[{
       SuperscriptBox["\[Theta]1", "\[Prime]",
        MultilineFunction->None], "[", "t", "]"}], "0", "0", "0"},
     {"0", "0", "0", "0"},
     {"0", "0", "0", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.970111565631116*^9, 3.970111577502295*^9}},
 CellLabel->
  "Out[126]//MatrixForm=",ExpressionUUID->"d1e9ae65-911b-472f-9ec0-\
3f0bd504a5cc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Lrot", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", " ", 
        RowBox[{"-", "1"}], ",", " ", "0", ",", " ", "0"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"1", ",", " ", "0", ",", " ", "0", ",", " ", "0"}], "}"}], ",",
       " ", 
      RowBox[{"{", 
       RowBox[{"0", ",", " ", "0", ",", " ", "0", ",", " ", "0"}], "}"}], ",",
       " ", 
      RowBox[{"{", 
       RowBox[{"0", ",", " ", "0", ",", " ", "0", ",", " ", "0"}], "}"}]}], 
     "}"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "create", " ", "the", " ", "helicoidal", " ", "transformation", " ", 
    "manually"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"L01", " ", "=", " ", "Lrot"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"L01", " ", "*", " ", 
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"\[Theta]1", "[", "t", "]"}], ",", " ", "t"}], "]"}]}], " ", "//",
   " ", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.9701117229893847`*^9, 3.970111814784437*^9}},
 CellLabel->
  "In[131]:=",ExpressionUUID->"422bdf06-45f8-4a0a-82c3-c776a6ffd1e0"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", 
      RowBox[{"-", 
       RowBox[{
        SuperscriptBox["\[Theta]1", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}], "0", "0"},
     {
      RowBox[{
       SuperscriptBox["\[Theta]1", "\[Prime]",
        MultilineFunction->None], "[", "t", "]"}], "0", "0", "0"},
     {"0", "0", "0", "0"},
     {"0", "0", "0", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.970111815300235*^9},
 CellLabel->
  "Out[133]//MatrixForm=",ExpressionUUID->"58117c27-1a5d-4085-b259-\
9f002f7c448b"]
}, Open  ]],

Cell["\<\
In order to compute the velocities of point A with respect to the absolute \
reference frame is enough to compute W01 * A\
\>", "Text",
 CellChangeTimes->{{3.97011186265222*^9, 
  3.970111898931044*^9}},ExpressionUUID->"1b9d3344-95d1-4f6f-b6c0-\
d2b487d7ddc2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"A", " ", "//", " ", "MatrixForm"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"W01", ".", "A"}], " ", "//", " ", 
  "MatrixForm"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.970111872158703*^9, 3.9701119122544403`*^9}},
 CellLabel->
  "In[134]:=",ExpressionUUID->"1c1ae249-d571-4642-bf23-a22518f47e81"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{"L1", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}]},
      {
       RowBox[{"L1", " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}]},
      {"h"},
      {"1"}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.970111912874796*^9},
 CellLabel->
  "Out[134]//MatrixForm=",ExpressionUUID->"5e3b9e8c-0a53-4678-aba0-\
e5459ec6d381"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{
        RowBox[{"-", "L1"}], " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["\[Theta]1", "\[Prime]",
          MultilineFunction->None], "[", "t", "]"}]}]},
      {
       RowBox[{"L1", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["\[Theta]1", "\[Prime]",
          MultilineFunction->None], "[", "t", "]"}]}]},
      {"0"},
      {"0"}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.970111912875924*^9},
 CellLabel->
  "Out[135]//MatrixForm=",ExpressionUUID->"7c20b2c9-c260-474c-8f25-\
6ef9a989adb6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"W12F1", " ", "=", " ", 
   RowBox[{"Simplify", "[", 
    RowBox[{
     RowBox[{"D", "[", 
      RowBox[{"M12", ",", " ", "t"}], "]"}], ".", 
     RowBox[{"Inverse", "[", "M12", "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"W12F1", " ", "//", " ", "MatrixForm", "  ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "if", " ", "we", " ", "position", " ", "ourself", " ", "in", " ", "A"}], ",",
     " ", 
    RowBox[{
    "the", " ", "positino", " ", "of", " ", "B", " ", "depends", " ", "only", 
     " ", "on", " ", "theta2"}], ",", " ", 
    RowBox[{"so", " ", "it", " ", "is", " ", "ok"}]}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.970112145293765*^9, 
  3.970112214340043*^9}},ExpressionUUID->"ed733822-3ebf-4b9d-b982-\
fafcc903d2d7"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", 
      RowBox[{"-", 
       RowBox[{
        SuperscriptBox["\[Theta]2", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}], "0", "0"},
     {
      RowBox[{
       SuperscriptBox["\[Theta]2", "\[Prime]",
        MultilineFunction->None], "[", "t", "]"}], "0", "0", "0"},
     {"0", "0", "0", "0"},
     {"0", "0", "0", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.970112179193318*^9},
 CellLabel->
  "Out[137]//MatrixForm=",ExpressionUUID->"f3f65e3a-dc35-41af-b5c7-\
0805dfb917b8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"W12F1", ".", "P1"}], " ", "//", " ", "MatrixForm", " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "This", " ", "exactly", " ", "what", " ", "we", " ", "did", " ", 
     "before"}], " ", "->", " ", 
    RowBox[{
    "it", " ", "is", " ", "equivalent", " ", "ot", " ", "be", " ", "on", " ", 
     "0", " ", "and", " ", "check", " ", "the", " ", "position", " ", "of", " ",
      "A", " ", "and", " ", "being", " ", "on", " ", "A", " ", "and", " ", 
     "check", " ", "the", " ", "positino", " ", "of", " ", "B"}]}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.970112229245263*^9, 
  3.9701122929259644`*^9}},ExpressionUUID->"5522c651-cfbd-431f-915f-\
3296c5b807b0"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{
        RowBox[{"-", "L2"}], " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"\[Theta]2", "[", "t", "]"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["\[Theta]2", "\[Prime]",
          MultilineFunction->None], "[", "t", "]"}]}]},
      {
       RowBox[{"L2", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"\[Theta]2", "[", "t", "]"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["\[Theta]2", "\[Prime]",
          MultilineFunction->None], "[", "t", "]"}]}]},
      {"0"},
      {"0"}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.970112252636544*^9},
 CellLabel->
  "Out[138]//MatrixForm=",ExpressionUUID->"e06322a6-ddf8-4813-ba94-\
e5d51e1d9e9e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "relative", " ", "velocity", " ", "matrix", " ", "between", " ", "2", " ", 
    "and", " ", "1", " ", "with", " ", "respect", " ", "to", " ", "frame", " ",
     "0.", " ", "In", " ", "the", " ", "between", " ", "we", " ", "have", " ",
     "to", " ", "make", " ", "a", " ", "reference", " ", "change"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"W12", " ", "=", " ", 
     RowBox[{"Simplify", "[", 
      RowBox[{"M01", ".", "W12F1", ".", 
       RowBox[{"Inverse", "[", "M01", "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"W12", " ", "//", " ", "MatrixForm"}]}]}]], "Input",
 CellChangeTimes->{{3.9701124136196012`*^9, 3.970112471280054*^9}, {
  3.9701125130142193`*^9, 
  3.970112564433414*^9}},ExpressionUUID->"6cffe8db-5197-48fa-90fc-\
04fffc96e2bf"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", 
      RowBox[{"-", 
       RowBox[{
        SuperscriptBox["\[Theta]2", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}], "0", 
      RowBox[{"L1", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["\[Theta]2", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}]},
     {
      RowBox[{
       SuperscriptBox["\[Theta]2", "\[Prime]",
        MultilineFunction->None], "[", "t", "]"}], "0", "0", 
      RowBox[{
       RowBox[{"-", "L1"}], " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["\[Theta]2", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}]},
     {"0", "0", "0", "0"},
     {"0", "0", "0", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.97011247191092*^9},
 CellLabel->
  "Out[140]//MatrixForm=",ExpressionUUID->"31d8159d-539e-4fc8-9156-\
fac914a8c95a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "As", " ", "before", " ", "we", " ", "can", " ", "formulate", " ", "it", " ",
     "using", " ", "the", " ", "helicoidal", " ", "transformation"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"L12F1", " ", "=", " ", "Lrot"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"L12F1d", " ", "=", " ", 
     RowBox[{"L12F1", " ", "*", " ", 
      RowBox[{"D", "[", 
       RowBox[{
        RowBox[{"\[Theta]2", "[", "t", "]"}], ",", " ", "t"}], "]"}]}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"L12F1d", " ", "//", " ", "MatrixForm"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"L12", " ", "=", " ", 
     RowBox[{"Simplify", "[", 
      RowBox[{"M01", ".", "L12F1d", ".", 
       RowBox[{"Inverse", "[", "M01", "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"L12", " ", "//", " ", "MatrixForm"}]}]}]], "Input",
 CellChangeTimes->{{3.9701126240391617`*^9, 3.970112726500382*^9}, {
  3.970112764392151*^9, 3.970112775488027*^9}, {3.970112813922056*^9, 
  3.970112823814679*^9}},
 CellLabel->
  "In[154]:=",ExpressionUUID->"4dfc7fbd-6f28-4ac0-835c-055050a0fcf6"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", 
      RowBox[{"-", 
       RowBox[{
        SuperscriptBox["\[Theta]2", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}], "0", "0"},
     {
      RowBox[{
       SuperscriptBox["\[Theta]2", "\[Prime]",
        MultilineFunction->None], "[", "t", "]"}], "0", "0", "0"},
     {"0", "0", "0", "0"},
     {"0", "0", "0", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.970112727866138*^9, 3.970112783883819*^9, {3.970112820800415*^9, 
   3.970112824201479*^9}},
 CellLabel->
  "Out[156]//MatrixForm=",ExpressionUUID->"f3379d90-bb8a-43f2-836f-\
b4ad2265b9d6"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", 
      RowBox[{"-", 
       RowBox[{
        SuperscriptBox["\[Theta]2", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}], "0", 
      RowBox[{"L1", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["\[Theta]2", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}]},
     {
      RowBox[{
       SuperscriptBox["\[Theta]2", "\[Prime]",
        MultilineFunction->None], "[", "t", "]"}], "0", "0", 
      RowBox[{
       RowBox[{"-", "L1"}], " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["\[Theta]2", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}]},
     {"0", "0", "0", "0"},
     {"0", "0", "0", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.970112727866138*^9, 3.970112783883819*^9, {3.970112820800415*^9, 
   3.9701128242025337`*^9}},
 CellLabel->
  "Out[158]//MatrixForm=",ExpressionUUID->"47ca7274-51a8-4b6f-959c-\
80a2db9cfb93"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"W02", " ", "=", " ", 
     RowBox[{"Simplify", "[", 
      RowBox[{"W01", " ", "+", " ", "W12"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"W02", " ", "//", " ", "MatrixForm"}], " ", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "this", " ", "is", " ", "what", " ", "allow", " ", "us", " ", "to", " ", 
      "compute", " ", "the", " ", "velocity", " ", "of", " ", "point", " ", 
      "P", " ", "with", " ", "respect", " ", "to", " ", "absolute", " ", 
      "reference", " ", "frame"}], ",", " ", 
     RowBox[{
     "so", " ", "the", " ", "absolute", " ", "velocity", " ", "of", " ", 
      "P"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Simplify", "[", 
     RowBox[{"W02", ".", "P"}], "]"}], " ", "//", " ", 
    "MatrixForm"}]}]}]], "Input",
 CellChangeTimes->{{3.97011293167855*^9, 3.970113007281906*^9}},
 CellLabel->
  "In[161]:=",ExpressionUUID->"ffbd5c4d-333d-4423-8a63-23cf586d2565"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{
         SuperscriptBox["\[Theta]1", "\[Prime]",
          MultilineFunction->None], "[", "t", "]"}]}], "-", 
       RowBox[{
        SuperscriptBox["\[Theta]2", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}], "0", 
      RowBox[{"L1", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["\[Theta]2", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}]},
     {
      RowBox[{
       RowBox[{
        SuperscriptBox["\[Theta]1", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}], "+", 
       RowBox[{
        SuperscriptBox["\[Theta]2", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}], "0", "0", 
      RowBox[{
       RowBox[{"-", "L1"}], " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["\[Theta]2", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}]},
     {"0", "0", "0", "0"},
     {"0", "0", "0", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.970112953054866*^9, 3.970113008183441*^9},
 CellLabel->
  "Out[162]//MatrixForm=",ExpressionUUID->"e6a2a5cf-bd07-49b3-a6dc-\
b602f4e986ad"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{
        RowBox[{"-", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"L1", " ", 
              RowBox[{"Sin", "[", 
               RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
             RowBox[{"L1", " ", 
              RowBox[{"Sin", "[", 
               RowBox[{"2", " ", 
                RowBox[{"\[Theta]1", "[", "t", "]"}]}], "]"}]}], "+", 
             RowBox[{"L2", " ", 
              RowBox[{"Sin", "[", 
               RowBox[{
                RowBox[{"2", " ", 
                 RowBox[{"\[Theta]1", "[", "t", "]"}]}], "+", 
                RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}], ")"}], " ", 
           RowBox[{
            SuperscriptBox["\[Theta]1", "\[Prime]",
             MultilineFunction->None], "[", "t", "]"}]}], ")"}]}], "-", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"L1", " ", 
            RowBox[{"Sin", "[", 
             RowBox[{"2", " ", 
              RowBox[{"\[Theta]1", "[", "t", "]"}]}], "]"}]}], "+", 
           RowBox[{"L2", " ", 
            RowBox[{"Sin", "[", 
             RowBox[{
              RowBox[{"2", " ", 
               RowBox[{"\[Theta]1", "[", "t", "]"}]}], "+", 
              RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}], ")"}], " ", 
         RowBox[{
          SuperscriptBox["\[Theta]2", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}]}]}]},
      {
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"L1", " ", 
            RowBox[{"Cos", "[", 
             RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
           RowBox[{"L1", " ", 
            RowBox[{"Cos", "[", 
             RowBox[{"2", " ", 
              RowBox[{"\[Theta]1", "[", "t", "]"}]}], "]"}]}], "+", 
           RowBox[{"L2", " ", 
            RowBox[{"Cos", "[", 
             RowBox[{
              RowBox[{"2", " ", 
               RowBox[{"\[Theta]1", "[", "t", "]"}]}], "+", 
              RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}], ")"}], " ", 
         RowBox[{
          SuperscriptBox["\[Theta]1", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"L1", " ", 
            RowBox[{"Cos", "[", 
             RowBox[{"2", " ", 
              RowBox[{"\[Theta]1", "[", "t", "]"}]}], "]"}]}], "+", 
           RowBox[{"L2", " ", 
            RowBox[{"Cos", "[", 
             RowBox[{
              RowBox[{"2", " ", 
               RowBox[{"\[Theta]1", "[", "t", "]"}]}], "+", 
              RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}], ")"}], " ", 
         RowBox[{
          SuperscriptBox["\[Theta]2", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}]}]}]},
      {"0"},
      {"0"}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.970112953054866*^9, 3.97011300824129*^9},
 CellLabel->
  "Out[163]//MatrixForm=",ExpressionUUID->"f0a1e78a-9f8e-470b-bfdb-\
9764abebe66a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"W23F2", " ", "=", " ", 
   RowBox[{
    RowBox[{"D", "[", 
     RowBox[{"M23", ",", " ", "t"}], "]"}], ".", 
    RowBox[{"Inverse", "[", "M23", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"W23F2", " ", "//", " ", "MatrixForm"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"W23", " ", "=", " ", 
   RowBox[{"M02", ".", "W23F2", ".", 
    RowBox[{"Inverse", "[", "M02", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"W23", " ", "//", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.970113235065292*^9, 3.970113368776456*^9}},
 CellLabel->
  "In[186]:=",ExpressionUUID->"e0a2b308-8423-4562-a768-8204d60c941a"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0", "0", "0"},
     {"0", "0", "0", "0"},
     {"0", "0", "0", 
      RowBox[{"-", 
       RowBox[{
        SuperscriptBox["L", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}]},
     {"0", "0", "0", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.970113300710825*^9, 3.970113310665472*^9}, {
  3.970113342537239*^9, 3.970113369668065*^9}},
 CellLabel->
  "Out[187]//MatrixForm=",ExpressionUUID->"e551574d-1a3a-4c27-b249-\
6c2248cc522c"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0", "0", "0"},
     {"0", "0", "0", "0"},
     {"0", "0", "0", 
      RowBox[{"-", 
       RowBox[{
        SuperscriptBox["L", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}]},
     {"0", "0", "0", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.970113300710825*^9, 3.970113310665472*^9}, {
  3.970113342537239*^9, 3.970113369669244*^9}},
 CellLabel->
  "Out[189]//MatrixForm=",ExpressionUUID->"a8e7e028-6d05-4ba1-99d5-\
0106f262dc43"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "We", " ", "can", " ", "do", " ", "the", " ", "same", " ", "with", " ", 
    "the", " ", "helicoidal", " ", "transformation"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Ltranslz", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "0", ",", " ", "0", ",", " ", "0"}], "}"}], ",",
        " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "0", ",", " ", "0", ",", " ", "0"}], "}"}], ",",
        " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "0", ",", " ", "0", ",", " ", "1"}], "}"}], ",",
        " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "0", ",", " ", "0", ",", " ", "0"}], "}"}]}], 
      "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"Ltranslz", " ", "//", " ", "MatrixForm"}], " ", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"We", " ", "are", " ", "translating", " ", "along", " ", 
      RowBox[{"z", ".", " ", "in"}], " ", "our", " ", "specific", " ", "case",
       " ", "it", " ", "is", " ", "not", " ", "1", " ", "but"}], " ", "-", 
     "Ltranslz"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"L23F2", " ", "=", " ", 
     RowBox[{"-", "Ltranslz"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"L23F2", " ", "*", " ", 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{"L", "[", "t", "]"}], ",", " ", "t"}], "]"}]}], " ", "//", " ",
     "MatrixForm"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"W03", " ", "=", " ", 
     RowBox[{"W01", " ", "+", " ", "W12", " ", "+", " ", "W23"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"W03", " ", "//", " ", "MatrixForm"}]}]}]], "Input",
 CellChangeTimes->{{3.9701133767813168`*^9, 3.970113487162367*^9}, {
  3.9701135312250853`*^9, 3.9701135875638113`*^9}},
 CellLabel->
  "In[190]:=",ExpressionUUID->"51368442-c70a-483c-8466-ddcec446f6a4"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0", "0", "0"},
     {"0", "0", "0", "0"},
     {"0", "0", "0", "1"},
     {"0", "0", "0", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.970113588512936*^9},
 CellLabel->
  "Out[191]//MatrixForm=",ExpressionUUID->"e8d0d9ff-b62f-495d-b85b-\
4a845e57ccbf"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0", "0", "0"},
     {"0", "0", "0", "0"},
     {"0", "0", "0", 
      RowBox[{"-", 
       RowBox[{
        SuperscriptBox["L", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}]},
     {"0", "0", "0", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.970113588514817*^9},
 CellLabel->
  "Out[193]//MatrixForm=",ExpressionUUID->"af50e392-8658-4c13-8022-\
bd360f386136"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{
         SuperscriptBox["\[Theta]1", "\[Prime]",
          MultilineFunction->None], "[", "t", "]"}]}], "-", 
       RowBox[{
        SuperscriptBox["\[Theta]2", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}], "0", 
      RowBox[{"L1", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["\[Theta]2", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}]},
     {
      RowBox[{
       RowBox[{
        SuperscriptBox["\[Theta]1", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}], "+", 
       RowBox[{
        SuperscriptBox["\[Theta]2", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}], "0", "0", 
      RowBox[{
       RowBox[{"-", "L1"}], " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["\[Theta]2", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}]},
     {"0", "0", "0", 
      RowBox[{"-", 
       RowBox[{
        SuperscriptBox["L", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}]},
     {"0", "0", "0", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.970113588515881*^9},
 CellLabel->
  "Out[195]//MatrixForm=",ExpressionUUID->"f8b59082-c222-4671-ae4c-\
f7506ebc2e45"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"VE", " ", "=", " ", 
   RowBox[{"Simplify", "[", 
    RowBox[{"W03", ".", "EE"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"VE", " ", "//", " ", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.9701136005494556`*^9, 3.970113643789731*^9}},
 CellLabel->
  "In[196]:=",ExpressionUUID->"9465b75b-9d49-4a55-bf77-4bf84820ea00"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{
        RowBox[{"-", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"L1", " ", 
              RowBox[{"Sin", "[", 
               RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
             RowBox[{"L2", " ", 
              RowBox[{"Sin", "[", 
               RowBox[{
                RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
                RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}], ")"}], " ", 
           RowBox[{
            SuperscriptBox["\[Theta]1", "\[Prime]",
             MultilineFunction->None], "[", "t", "]"}]}], ")"}]}], "-", 
        RowBox[{"L2", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{
           RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
           RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["\[Theta]2", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}]}]}]},
      {
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"L1", " ", 
            RowBox[{"Cos", "[", 
             RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
           RowBox[{"L2", " ", 
            RowBox[{"Cos", "[", 
             RowBox[{
              RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
              RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}], ")"}], " ", 
         RowBox[{
          SuperscriptBox["\[Theta]1", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}]}], "+", 
        RowBox[{"L2", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{
           RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
           RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["\[Theta]2", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}]}]}]},
      {
       RowBox[{"-", 
        RowBox[{
         SuperscriptBox["L", "\[Prime]",
          MultilineFunction->None], "[", "t", "]"}]}]},
      {"0"}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.970113644657721*^9},
 CellLabel->
  "Out[197]//MatrixForm=",ExpressionUUID->"40b40f12-45c0-4ad1-bd23-\
42f39a142257"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.970113877324543*^9, 
  3.970113955238731*^9}},ExpressionUUID->"86765755-7abd-4853-b50d-\
b1981439fa0a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Data", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"L1", " ", "->", " ", "0.3"}], ",", " ", 
     RowBox[{"L2", " ", "->", " ", "0.3"}], ",", " ", 
     RowBox[{"h", " ", "->", " ", "1"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"UnitVel", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"\[Theta]1", "[", "t", "]"}], ",", " ", "t"}], "]"}], " ", "->",
        " ", "1"}], ",", " ", 
      RowBox[{
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"\[Theta]2", "[", "t", "]"}], ",", " ", "t"}], "]"}], " ", "->",
        " ", "1"}], ",", " ", 
      RowBox[{
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"L", "[", "t", "]"}], ",", " ", "t"}], "]"}], " ", "->", " ",
        "1"}]}], "}"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "We", " ", "symulating", " ", "an", " ", "effective", " ", "motion"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"VE", " ", "/.", "KinSol"}], " ", "/.", "Data"}], " ", "/.", 
  "UnitVel"}]}], "Input",
 CellChangeTimes->{{3.970113768165558*^9, 3.970113874395549*^9}, {
  3.970113935107682*^9, 3.970113962550743*^9}},
 CellLabel->
  "In[200]:=",ExpressionUUID->"1d5547dd-e759-42e5-b367-041a792795a2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "0.5292893218813453`"}], ",", "0.6707106781186547`", ",", 
   RowBox[{"-", "1"}], ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{{3.970113937117845*^9, 3.970113963549355*^9}},
 CellLabel->
  "Out[202]=",ExpressionUUID->"13f6bce4-9a6d-4261-ab26-2e07b9837142"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Velocity analysis: Inverse kinematics", "Subsection",
 CellChangeTimes->{{3.970115345110417*^9, 
  3.9701153520154963`*^9}},ExpressionUUID->"896f6a50-8fd6-4dde-9b99-\
420229300c83"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"VE", " ", "//", " ", "MatrixForm"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"vars", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{"\[Theta]1", "[", "t", "]"}], ",", " ", "t"}], "]"}], ",", " ", 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{"\[Theta]2", "[", "t", "]"}], ",", " ", "t"}], "]"}], ",", " ", 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{"L", "[", "t", "]"}], ",", " ", "t"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"vars", " ", "//", " ", "MatrixForm"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"invProblem", " ", "=", " ", 
   RowBox[{"Simplify", "[", 
    RowBox[{"Solve", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"VE", "[", 
          RowBox[{"[", "1", "]"}], "]"}], " ", "==", " ", "VX"}], ",", " ", 
        RowBox[{
         RowBox[{"VE", "[", 
          RowBox[{"[", "2", "]"}], "]"}], " ", "==", " ", "VY"}], ",", " ", 
        RowBox[{
         RowBox[{"VE", "[", 
          RowBox[{"[", "3", "]"}], "]"}], " ", "==", " ", "VZ"}]}], "}"}], ",",
       " ", "vars"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"invProblem", " ", "//", " ", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.970115399856783*^9, 3.970115404317761*^9}, {
  3.970115476646886*^9, 3.970115511213447*^9}, {3.970115578156499*^9, 
  3.970115646448948*^9}},
 CellLabel->
  "In[203]:=",ExpressionUUID->"0f4ed346-912d-418f-adb3-7ed15979f66b"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{
        RowBox[{"-", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"L1", " ", 
              RowBox[{"Sin", "[", 
               RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
             RowBox[{"L2", " ", 
              RowBox[{"Sin", "[", 
               RowBox[{
                RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
                RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}], ")"}], " ", 
           RowBox[{
            SuperscriptBox["\[Theta]1", "\[Prime]",
             MultilineFunction->None], "[", "t", "]"}]}], ")"}]}], "-", 
        RowBox[{"L2", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{
           RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
           RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["\[Theta]2", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}]}]}]},
      {
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"L1", " ", 
            RowBox[{"Cos", "[", 
             RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
           RowBox[{"L2", " ", 
            RowBox[{"Cos", "[", 
             RowBox[{
              RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
              RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}], ")"}], " ", 
         RowBox[{
          SuperscriptBox["\[Theta]1", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}]}], "+", 
        RowBox[{"L2", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{
           RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
           RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["\[Theta]2", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}]}]}]},
      {
       RowBox[{"-", 
        RowBox[{
         SuperscriptBox["L", "\[Prime]",
          MultilineFunction->None], "[", "t", "]"}]}]},
      {"0"}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.9701156469614973`*^9},
 CellLabel->
  "Out[203]//MatrixForm=",ExpressionUUID->"dc0fd1e1-86d5-49a2-8ac3-\
a6aabaed3b8c"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{
        SuperscriptBox["\[Theta]1", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]},
      {
       RowBox[{
        SuperscriptBox["\[Theta]2", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]},
      {
       RowBox[{
        SuperscriptBox["L", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.970115646963469*^9},
 CellLabel->
  "Out[205]//MatrixForm=",ExpressionUUID->"aecbb5e8-b48d-4272-b407-\
0a041845f21a"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       RowBox[{
        SuperscriptBox["\[Theta]1", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}], "\[Rule]", 
       FractionBox[
        RowBox[{
         RowBox[{"Csc", "[", 
          RowBox[{"\[Theta]2", "[", "t", "]"}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"VX", " ", 
            RowBox[{"Cos", "[", 
             RowBox[{
              RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
              RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}], "+", 
           RowBox[{"VY", " ", 
            RowBox[{"Sin", "[", 
             RowBox[{
              RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
              RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}], ")"}]}], 
        "L1"]}], 
      RowBox[{
       RowBox[{
        SuperscriptBox["\[Theta]2", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}], "\[Rule]", 
       RowBox[{"-", 
        FractionBox[
         RowBox[{
          RowBox[{"Csc", "[", 
           RowBox[{"\[Theta]2", "[", "t", "]"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"L1", " ", "VX", " ", 
             RowBox[{"Cos", "[", 
              RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
            RowBox[{"L2", " ", "VX", " ", 
             RowBox[{"Cos", "[", 
              RowBox[{
               RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
               RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}], "+", 
            RowBox[{"L1", " ", "VY", " ", 
             RowBox[{"Sin", "[", 
              RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
            RowBox[{"L2", " ", "VY", " ", 
             RowBox[{"Sin", "[", 
              RowBox[{
               RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
               RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}], ")"}]}], 
         RowBox[{"L1", " ", "L2"}]]}]}], 
      RowBox[{
       RowBox[{
        SuperscriptBox["L", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}], "\[Rule]", 
       RowBox[{"-", "VZ"}]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.9701156470374813`*^9},
 CellLabel->
  "Out[207]//MatrixForm=",ExpressionUUID->"f8fba10d-b7c2-4c01-9f06-\
18e571f0cf78"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"invProblem", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", " ", "1"}], "]"}], "]"}], " ", "/.", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"VX", " ", "->", " ", "1"}], ",", " ", 
      RowBox[{"VY", " ", "->", " ", "1"}], ",", " ", 
      RowBox[{"VZ", " ", "->", " ", "1"}]}], "}"}]}], " ", "/.", " ", 
   "Data"}], " ", "/.", "KinSol"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"invProblem", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", " ", "2"}], "]"}], "]"}], " ", "/.", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"VX", " ", "->", " ", "1"}], ",", " ", 
      RowBox[{"VY", " ", "->", " ", "1"}], ",", " ", 
      RowBox[{"VZ", " ", "->", " ", "1"}]}], "}"}]}], " ", "/.", " ", 
   "Data"}], " ", "/.", "KinSol"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"invProblem", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", " ", "3"}], "]"}], "]"}], " ", "/.", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"VX", " ", "->", " ", "1"}], ",", " ", 
      RowBox[{"VY", " ", "->", " ", "1"}], ",", " ", 
      RowBox[{"VZ", " ", "->", " ", "1"}]}], "}"}]}], " ", "/.", " ", 
   "Data"}], " ", "/.", "KinSol", " "}]}], "Input",
 CellChangeTimes->{{3.970115686097657*^9, 3.970115755991847*^9}, {
  3.970115789132802*^9, 3.9701157973528433`*^9}, {3.970116079849121*^9, 
  3.970116084345744*^9}},ExpressionUUID->"602e980a-2149-4718-9b5e-\
6ecb53487569"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["\[Theta]1", "\[Prime]",
    MultilineFunction->None], "[", "t", "]"}], "\[Rule]", 
  RowBox[{"-", "7.071067811865477`"}]}]], "Output",
 CellChangeTimes->{3.9701157590186567`*^9, 3.9701157981429167`*^9},
 CellLabel->
  "Out[211]=",ExpressionUUID->"dd6acde3-d1fb-4cec-bf4f-a67f3776086b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["\[Theta]2", "\[Prime]",
    MultilineFunction->None], "[", "t", "]"}], "\[Rule]", 
  "14.142135623730953`"}]], "Output",
 CellChangeTimes->{3.9701157590186567`*^9, 3.970115798144166*^9},
 CellLabel->
  "Out[212]=",ExpressionUUID->"a14920d4-197f-46ef-8def-f5b4503ef1db"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["L", "\[Prime]",
    MultilineFunction->None], "[", "t", "]"}], "\[Rule]", 
  RowBox[{"-", "1"}]}]], "Output",
 CellChangeTimes->{3.9701157590186567`*^9, 3.970115798144964*^9},
 CellLabel->
  "Out[213]=",ExpressionUUID->"d95fa7d5-bbaf-47c0-8706-a52a2d5e2c38"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"eqs", " ", "=", " ", 
   RowBox[{"Simplify", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"VE", "[", 
        RowBox[{"[", "1", "]"}], "]"}], " ", "-", " ", "VX"}], ",", " ", 
      RowBox[{
       RowBox[{"VE", "[", 
        RowBox[{"[", "2", "]"}], "]"}], " ", "-", "VY"}], ",", " ", 
      RowBox[{
       RowBox[{"VE", "[", 
        RowBox[{"[", "3", "]"}], "]"}], " ", "-", " ", "VZ"}], ",", " ", 
      RowBox[{
       RowBox[{"W03", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", " ", "2"}], "]"}], "]"}], "-", " ", 
       RowBox[{"(", 
        RowBox[{"-", " ", "\[Omega]z"}], ")"}]}]}], "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"eqs", " ", "//", " ", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.970115889672242*^9, 3.970115936949689*^9}, {
  3.970116010688138*^9, 3.970116113540957*^9}},
 CellLabel->
  "In[214]:=",ExpressionUUID->"25f0d253-82bc-4386-b9e4-508255cfca7e"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{
        RowBox[{"-", "VX"}], "-", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"L1", " ", 
            RowBox[{"Sin", "[", 
             RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
           RowBox[{"L2", " ", 
            RowBox[{"Sin", "[", 
             RowBox[{
              RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
              RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}], ")"}], " ", 
         RowBox[{
          SuperscriptBox["\[Theta]1", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}]}], "-", 
        RowBox[{"L2", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{
           RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
           RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["\[Theta]2", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}]}]}]},
      {
       RowBox[{
        RowBox[{"-", "VY"}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"L1", " ", 
            RowBox[{"Cos", "[", 
             RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
           RowBox[{"L2", " ", 
            RowBox[{"Cos", "[", 
             RowBox[{
              RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
              RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}], ")"}], " ", 
         RowBox[{
          SuperscriptBox["\[Theta]1", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}]}], "+", 
        RowBox[{"L2", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{
           RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
           RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["\[Theta]2", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}]}]}]},
      {
       RowBox[{
        RowBox[{"-", "VZ"}], "-", 
        RowBox[{
         SuperscriptBox["L", "\[Prime]",
          MultilineFunction->None], "[", "t", "]"}]}]},
      {
       RowBox[{"\[Omega]z", "-", 
        RowBox[{
         SuperscriptBox["\[Theta]1", "\[Prime]",
          MultilineFunction->None], "[", "t", "]"}], "-", 
        RowBox[{
         SuperscriptBox["\[Theta]2", "\[Prime]",
          MultilineFunction->None], "[", "t", "]"}]}]}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.970116097638934*^9},
 CellLabel->
  "Out[215]//MatrixForm=",ExpressionUUID->"4911d205-99e8-49cb-ad47-\
f70da657ccfe"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Jac", " ", "=", " ", 
    RowBox[{
     RowBox[{"Normal", "[", 
      RowBox[{"CoefficientArrays", "[", 
       RowBox[{"eqs", ",", " ", "vars"}], "]"}], "]"}], "[", 
     RowBox[{"[", "2", "]"}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "We", " ", "are", " ", "going", " ", "to", " ", "do", " ", "the", " ", 
     "inverse", " ", "kinematics", " ", "problem", " ", "but", " ", "instead",
      " ", "of", " ", "doein", " ", "and", " ", "explicit", " ", "problem", " ",
      "with", " ", "carteisian", " ", "velocities"}], ",", " ", 
    RowBox[{
    "we", " ", "try", " ", "to", " ", "generalize", " ", "by", " ", "setting",
      " ", "a", " ", "linear", " ", "problem"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"Jac", " ", "//", " ", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.970116102771111*^9, 3.970116165846588*^9}, {
  3.970116216162032*^9, 3.970116220248075*^9}},
 CellLabel->
  "In[216]:=",ExpressionUUID->"a627fbb4-169a-4021-8c80-d70d0a678edd"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       RowBox[{
        RowBox[{"-", "L1"}], " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "-", 
       RowBox[{"L2", " ", 
        RowBox[{"Sin", "[", 
         RowBox[{
          RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
          RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}], 
      RowBox[{
       RowBox[{"-", "L2"}], " ", 
       RowBox[{"Sin", "[", 
        RowBox[{
         RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
         RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}], "0"},
     {
      RowBox[{
       RowBox[{"L1", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
       RowBox[{"L2", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{
          RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
          RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}], 
      RowBox[{"L2", " ", 
       RowBox[{"Cos", "[", 
        RowBox[{
         RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
         RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}], "0"},
     {"0", "0", 
      RowBox[{"-", "1"}]},
     {
      RowBox[{"-", "1"}], 
      RowBox[{"-", "1"}], "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.970116221270628*^9},
 CellLabel->
  "Out[217]//MatrixForm=",ExpressionUUID->"fa8e2440-4962-45c3-a65e-\
48d603d25bdc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"CoefficientArrays", "[", 
    RowBox[{"eqs", ",", " ", "vars"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}], " ", "//", " ", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.970116260038187*^9, 3.9701162762858963`*^9}},
 CellLabel->
  "In[218]:=",ExpressionUUID->"35d9dcdc-58b5-4f8a-ab25-27e8747c71c1"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{"-", "VX"}]},
      {
       RowBox[{"-", "VY"}]},
      {
       RowBox[{"-", "VZ"}]},
      {"\[Omega]z"}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[
   SparseArray[
    Automatic, {4}, 0, {
     1, {{0, 4}, {{1}, {2}, {3}, {
       4}}}, {-$CellContext`VX, -$CellContext`VY, -$CellContext`VZ, \
$CellContext`\[Omega]z}}]]]]], "Output",
 CellChangeTimes->{3.970116277417563*^9},
 CellLabel->
  "Out[218]//MatrixForm=",ExpressionUUID->"d029d4ae-22cd-4b3b-934a-\
c24196d5a0df"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"Jac", " ", "//", " ", "MatrixForm"}], ")"}], ".", 
   RowBox[{"(", 
    RowBox[{"vars", " ", "//", " ", "MatrixForm"}], ")"}]}], " ", "==", " ", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{"{", 
    RowBox[{"VX", ",", " ", "VY", ",", " ", "VZ", ",", " ", "\[Omega]z"}], 
    "}"}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Let", "'"}], "s", " ", "visualize", " ", "better", " ", "the", " ",
     "linear", " ", "problem", " ", "we", " ", "are", " ", "going", " ", "to",
     " ", 
    RowBox[{"do", ".", " ", 
     RowBox[{"Let", "'"}]}], "s", " ", "drop", " ", "the", " ", "rotational", 
    " ", "speed", " ", "in", " ", "order", " ", "to", " ", "have", " ", "3", " ",
     "quations", " ", "and", " ", "3", " ", "unknowns"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.9701163274407883`*^9, 3.9701164003950987`*^9}},
 CellLabel->
  "In[220]:=",ExpressionUUID->"9c17902c-ad50-4654-9381-4db8dc54d167"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        RowBox[{
         RowBox[{
          RowBox[{"-", "L1"}], " ", 
          RowBox[{"Sin", "[", 
           RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "-", 
         RowBox[{"L2", " ", 
          RowBox[{"Sin", "[", 
           RowBox[{
            RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
            RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}], 
        RowBox[{
         RowBox[{"-", "L2"}], " ", 
         RowBox[{"Sin", "[", 
          RowBox[{
           RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
           RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}], "0"},
       {
        RowBox[{
         RowBox[{"L1", " ", 
          RowBox[{"Cos", "[", 
           RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
         RowBox[{"L2", " ", 
          RowBox[{"Cos", "[", 
           RowBox[{
            RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
            RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}], 
        RowBox[{"L2", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{
           RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
           RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}], "0"},
       {"0", "0", 
        RowBox[{"-", "1"}]},
       {
        RowBox[{"-", "1"}], 
        RowBox[{"-", "1"}], "0"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ".", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", 
     TagBox[GridBox[{
        {
         RowBox[{
          SuperscriptBox["\[Theta]1", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}]},
        {
         RowBox[{
          SuperscriptBox["\[Theta]2", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}]},
        {
         RowBox[{
          SuperscriptBox["L", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}]}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.5599999999999999]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}],
      Column], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "\[Equal]", 
  TagBox[
   RowBox[{"(", "\[NoBreak]", 
    TagBox[GridBox[{
       {"VX"},
       {"VY"},
       {"VZ"},
       {"\[Omega]z"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Column], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]]}]], "Output",
 CellChangeTimes->{3.9701163674108458`*^9, 3.970116401959475*^9},
 CellLabel->
  "Out[220]=",ExpressionUUID->"fb4aaf58-a791-4707-86fa-4b9d6b61c7ae"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"RotJac", " ", "=", " ", 
   RowBox[{"Jac", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"1", ";;", "3"}], ",", " ", ";;"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RotJac", " ", "//", " ", "MatrixForm"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"RotJac", " ", "//", " ", "MatrixForm"}], ")"}], ".", 
   RowBox[{"(", 
    RowBox[{"vars", " ", "//", " ", "MatrixForm"}], ")"}]}], " ", "==", " ", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{"{", 
    RowBox[{"VX", ",", " ", "VY", ",", " ", "VZ"}], "}"}], "]"}], 
  " "}]}], "Input",
 CellChangeTimes->{{3.9695948198665667`*^9, 3.969594832515709*^9}, {
  3.970116411705666*^9, 3.970116475356532*^9}, {3.9701165179345007`*^9, 
  3.970116540918227*^9}},
 CellLabel->
  "In[226]:=",ExpressionUUID->"baadeb17-f9da-480e-a56b-e4ab5f201e77"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        RowBox[{
         RowBox[{
          RowBox[{"-", "L1"}], " ", 
          RowBox[{"Sin", "[", 
           RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "-", 
         RowBox[{"L2", " ", 
          RowBox[{"Sin", "[", 
           RowBox[{
            RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
            RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}], 
        RowBox[{
         RowBox[{"-", "L2"}], " ", 
         RowBox[{"Sin", "[", 
          RowBox[{
           RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
           RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}], "0"},
       {
        RowBox[{
         RowBox[{"L1", " ", 
          RowBox[{"Cos", "[", 
           RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
         RowBox[{"L2", " ", 
          RowBox[{"Cos", "[", 
           RowBox[{
            RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
            RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}], 
        RowBox[{"L2", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{
           RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
           RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}], "0"},
       {"0", "0", 
        RowBox[{"-", "1"}]}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ".", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", 
     TagBox[GridBox[{
        {
         RowBox[{
          SuperscriptBox["\[Theta]1", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}]},
        {
         RowBox[{
          SuperscriptBox["\[Theta]2", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}]},
        {
         RowBox[{
          SuperscriptBox["L", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}]}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.5599999999999999]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}],
      Column], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "\[Equal]", 
  TagBox[
   RowBox[{"(", "\[NoBreak]", 
    TagBox[GridBox[{
       {"VX"},
       {"VY"},
       {"VZ"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Column], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]]}]], "Output",
 CellChangeTimes->{
  3.970116479281932*^9, {3.970116525800379*^9, 3.970116541643787*^9}},
 CellLabel->
  "Out[228]=",ExpressionUUID->"d2aa11ac-0b9b-456c-a110-43ac102578e9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"jointVel", " ", "=", " ", 
   RowBox[{
    RowBox[{"Simplify", "[", 
     RowBox[{"Inverse", "[", "RotJac", "]"}], "]"}], ".", 
    RowBox[{"{", 
     RowBox[{"VX", ",", " ", "VY", ",", " ", "VZ"}], "}"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"jointVel", " ", "//", " ", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.970116565917395*^9, 3.970116592550147*^9}},
 CellLabel->
  "In[229]:=",ExpressionUUID->"91ffc620-5c59-4d6c-9b99-0290bd476ab2"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{
        FractionBox[
         RowBox[{"VX", " ", 
          RowBox[{"Cos", "[", 
           RowBox[{
            RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
            RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}], " ", 
          RowBox[{"Csc", "[", 
           RowBox[{"\[Theta]2", "[", "t", "]"}], "]"}]}], "L1"], "+", 
        FractionBox[
         RowBox[{"VY", " ", 
          RowBox[{"Csc", "[", 
           RowBox[{"\[Theta]2", "[", "t", "]"}], "]"}], " ", 
          RowBox[{"Sin", "[", 
           RowBox[{
            RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
            RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}], "L1"]}]},
      {
       RowBox[{
        RowBox[{"-", 
         FractionBox[
          RowBox[{"VX", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"L1", " ", 
              RowBox[{"Cos", "[", 
               RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
             RowBox[{"L2", " ", 
              RowBox[{"Cos", "[", 
               RowBox[{
                RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
                RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}], ")"}], " ", 
           RowBox[{"Csc", "[", 
            RowBox[{"\[Theta]2", "[", "t", "]"}], "]"}]}], 
          RowBox[{"L1", " ", "L2"}]]}], "-", 
        FractionBox[
         RowBox[{"VY", " ", 
          RowBox[{"Csc", "[", 
           RowBox[{"\[Theta]2", "[", "t", "]"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"L1", " ", 
             RowBox[{"Sin", "[", 
              RowBox[{"\[Theta]1", "[", "t", "]"}], "]"}]}], "+", 
            RowBox[{"L2", " ", 
             RowBox[{"Sin", "[", 
              RowBox[{
               RowBox[{"\[Theta]1", "[", "t", "]"}], "+", 
               RowBox[{"\[Theta]2", "[", "t", "]"}]}], "]"}]}]}], ")"}]}], 
         RowBox[{"L1", " ", "L2"}]]}]},
      {
       RowBox[{"-", "VZ"}]}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.970116594661623*^9},
 CellLabel->
  "Out[230]//MatrixForm=",ExpressionUUID->"d7b93c69-cd49-43c8-bdda-\
96ff02c22de3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"N", "[", "jointVel", "]"}], " ", "/.", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"VX", " ", "->", " ", "1"}], ",", " ", 
     RowBox[{"VY", " ", "->", " ", "1"}], ",", " ", 
     RowBox[{"VZ", " ", "->", " ", "1"}], ",", " ", 
     RowBox[{"L1", " ", "->", " ", "0.3"}], ",", " ", 
     RowBox[{"L2", " ", "->", " ", "0.3"}], ",", " ", 
     RowBox[{"h", " ", "->", " ", "1"}]}], "}"}]}], " ", "/.", " ", "KinSol", 
  " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "And", " ", "we", " ", "get", " ", "the", " ", "same", " ", "numbers", " ",
      "as", " ", 
     RowBox[{"before", ".", " ", "This"}], " ", "is", " ", "more", " ", 
     "generic"}], ",", " ", 
    RowBox[{"more", " ", "preferible"}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.970116631934801*^9, 
  3.970116691887568*^9}},ExpressionUUID->"b061e090-65f5-497d-821e-\
2d118bdab548"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "7.071067811865477`"}], ",", "14.142135623730951`", ",", 
   RowBox[{"-", "1.`"}]}], "}"}]], "Output",
 CellChangeTimes->{3.97011667308389*^9},
 CellLabel->
  "Out[231]=",ExpressionUUID->"af9c0ff4-c9b7-47bf-aba4-e801e9b084cf"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.969594112606496*^9, 
  3.969594113265275*^9}},ExpressionUUID->"52453327-cd75-4219-b157-\
b643a35aa234"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.969594067915214*^9, 
  3.969594067919856*^9}},ExpressionUUID->"6ddce878-423d-44a1-a78e-\
c0d0fec466eb"],

Cell[CellGroupData[{

Cell["", "Item",
 CellChangeTimes->{{3.9695940453161583`*^9, 
  3.969594074319807*^9}},ExpressionUUID->"5bb90e0d-55e1-4f14-959c-\
7efa2d111cd3"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.969594079107081*^9, 
  3.9695940824330063`*^9}},ExpressionUUID->"3dc4599e-bffd-4209-805a-\
fd11906cc502"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1425, 855},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"14.3 for Linux x86 (64-bit) (July 8, 2025)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"7244c25d-5d3c-4064-90da-3d01fe892799"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[554, 20, 226, 3, 69, "Input",ExpressionUUID->"544a8c10-3271-4427-bfb0-b2696f4edf6a"],
Cell[CellGroupData[{
Cell[805, 27, 3798, 93, 355, "Input",ExpressionUUID->"f0bd5b76-7c15-4d0d-806c-8c904a769ef9"],
Cell[4606, 122, 3949, 108, 80, "Output",ExpressionUUID->"154516aa-39c1-4a7f-840f-dade04c4fd45"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8592, 235, 351, 7, 30, "Input",ExpressionUUID->"402a845e-158c-4485-a93f-f0c9095e84b1"],
Cell[8946, 244, 2529, 69, 90, "Output",ExpressionUUID->"0bb76dab-8450-4d91-acf6-32f85237a4bb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11512, 318, 181, 3, 53, "Subsection",ExpressionUUID->"5e6713ca-24e9-4a9c-9483-f7d3b4158568"],
Cell[CellGroupData[{
Cell[11718, 325, 1457, 36, 53, "Input",ExpressionUUID->"9c70b724-7481-4008-9512-40910fa23253"],
Cell[13178, 363, 1007, 28, 94, "Output",ExpressionUUID->"048c5b22-2537-4656-8b2e-8e586ce0a243"]
}, Open  ]],
Cell[14200, 394, 223, 4, 33, "Text",ExpressionUUID->"259a6bfe-b4d7-4536-9595-89d068f2ce5b"],
Cell[CellGroupData[{
Cell[14448, 402, 582, 13, 51, "Input",ExpressionUUID->"4498d027-f247-4e72-ac19-a240134908e4"],
Cell[15033, 417, 1232, 35, 94, "Output",ExpressionUUID->"6f01841b-f370-4432-9221-4575fdec936a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16302, 457, 368, 7, 51, "Input",ExpressionUUID->"a19ce582-f1c8-4f8d-ae77-3ba5600fc9eb"],
Cell[16673, 466, 2056, 59, 103, "Output",ExpressionUUID->"983b228a-7aa8-4586-89d4-e6b0c7ad78e9"]
}, Open  ]],
Cell[18744, 528, 166, 2, 49, "Input",ExpressionUUID->"200056b6-67b2-4ffb-9198-4b1951fbf661"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18947, 535, 467278, 7667, 371, "Section",ExpressionUUID->"e08b5d3d-a923-419d-95af-e7ec52e2432e"],
Cell[CellGroupData[{
Cell[486250, 8206, 1214, 30, 73, "Input",ExpressionUUID->"3f8863f4-58bb-4628-b3c3-cadcce0f41a4"],
Cell[487467, 8238, 1377, 39, 103, "Output",ExpressionUUID->"05965ab5-a834-461a-8583-088b153562ea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[488881, 8282, 917, 23, 30, "Input",ExpressionUUID->"aa696b1d-fef6-4704-9360-b551b604a328"],
Cell[489801, 8307, 1348, 38, 103, "Output",ExpressionUUID->"2a1a7695-70e0-44f2-9792-6d2c30e87d65"]
}, Open  ]],
Cell[CellGroupData[{
Cell[491186, 8350, 865, 21, 71, "Input",ExpressionUUID->"37832828-d36c-4e4d-ba22-0cfbb82eff66"],
Cell[492054, 8373, 1461, 43, 103, "Output",ExpressionUUID->"f705d26a-6a45-4a9a-8d80-42e151ddf08e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[493552, 8421, 497, 11, 51, "Input",ExpressionUUID->"3b4d7e89-a2a4-4e78-94e8-f2f42074df3a"],
Cell[494052, 8434, 1346, 38, 103, "Output",ExpressionUUID->"94a4c7af-70dc-4851-bdd4-a63d1e82bc64"]
}, Open  ]],
Cell[CellGroupData[{
Cell[495435, 8477, 370, 8, 49, "Input",ExpressionUUID->"bcbffc94-fe0f-46cf-a2ee-05c3871577c5"],
Cell[495808, 8487, 2088, 58, 103, "Output",ExpressionUUID->"b37769f2-deeb-42dc-b385-239922c253e7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[497933, 8550, 978, 26, 73, "Input",ExpressionUUID->"e4348801-249a-4f95-869d-60f7e679e8c7"],
Cell[498914, 8578, 868, 25, 94, "Output",ExpressionUUID->"97919fad-4ee5-4a2b-8eb9-0c1312b5bcfd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[499819, 8608, 421, 9, 49, "Input",ExpressionUUID->"7f84268c-e4b7-48ce-bd8b-929b63912c31"],
Cell[500243, 8619, 2148, 60, 103, "Output",ExpressionUUID->"a939c333-0157-422f-ae44-fdea094fdb0f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[502428, 8684, 609, 15, 51, "Input",ExpressionUUID->"212a5d94-8cb2-4ef6-b626-2e2695bc76f2"],
Cell[503040, 8701, 1520, 45, 103, "Output",ExpressionUUID->"73ccffde-a5eb-448c-98a4-8dffd5690e42"]
}, Open  ]],
Cell[CellGroupData[{
Cell[504597, 8751, 602, 16, 51, "Input",ExpressionUUID->"823f7f30-57a0-4ad9-83dc-cff9a6eb6a63"],
Cell[505202, 8769, 1523, 45, 103, "Output",ExpressionUUID->"e86d6973-c785-431c-82b3-3af0aac3a091"]
}, Open  ]],
Cell[CellGroupData[{
Cell[506762, 8819, 1371, 36, 73, "Input",ExpressionUUID->"cb2643d8-b993-4755-b618-01db7e59aed7"],
Cell[508136, 8857, 1001, 25, 94, "Output",ExpressionUUID->"58957d70-eb9c-4650-80e3-b138642cf95d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[509174, 8887, 346, 8, 49, "Input",ExpressionUUID->"8d6b2eb5-06b1-4cb4-a7ba-0f2927e49bd7"],
Cell[509523, 8897, 388, 8, 33, "Output",ExpressionUUID->"84ba50fc-7c35-4c01-a353-1818a1389c44"]
}, Open  ]],
Cell[CellGroupData[{
Cell[509948, 8910, 179, 3, 43, "Subsubsection",ExpressionUUID->"f10ee13a-f518-4199-9835-768d369a4482"],
Cell[CellGroupData[{
Cell[510152, 8917, 1193, 28, 93, "Input",ExpressionUUID->"a28a7c54-e7c9-4820-950c-f2a14d59c3cd"],
Cell[511348, 8947, 1005, 28, 96, "Output",ExpressionUUID->"a131acee-4995-4b48-855a-02ebfa5c7c13"]
}, Open  ]],
Cell[CellGroupData[{
Cell[512390, 8980, 956, 23, 69, "Input",ExpressionUUID->"aa8be260-5a6d-4231-826c-130d564b1b8f"],
Cell[513349, 9005, 2149, 61, 103, "Output",ExpressionUUID->"e690d1aa-6bb2-4565-a232-2862714a7789"]
}, Open  ]],
Cell[CellGroupData[{
Cell[515535, 9071, 1537, 37, 113, "Input",ExpressionUUID->"cd40e434-95f7-4ee7-bc06-2250530234a2"],
Cell[517075, 9110, 1458, 40, 78, "Output",ExpressionUUID->"1633fe6a-3b34-4724-81ac-802ae465baec"],
Cell[518536, 9152, 1033, 28, 64, "Output",ExpressionUUID->"c4361486-a964-4863-8bc7-0b6e959db944"]
}, Open  ]],
Cell[CellGroupData[{
Cell[519606, 9185, 720, 19, 30, "Input",ExpressionUUID->"75d238e6-b0a6-44bf-ba07-35ec2b2226df"],
Cell[520329, 9206, 1250, 34, 34, "Output",ExpressionUUID->"b6e4b8e9-20ec-4ce1-ba07-ea38adcf2771"]
}, Open  ]],
Cell[CellGroupData[{
Cell[521616, 9245, 500, 11, 30, "Input",ExpressionUUID->"b0c72399-5afe-4acb-82c7-2d338637ac89"],
Cell[522119, 9258, 1055, 26, 43, "Output",ExpressionUUID->"4ae39c74-4912-42be-bfb2-a2a662e122ec"]
}, Open  ]],
Cell[CellGroupData[{
Cell[523211, 9289, 964, 25, 30, "Input",ExpressionUUID->"7e5aee59-bb9e-4080-b986-5d176a49c156"],
Cell[524178, 9316, 425, 9, 33, "Output",ExpressionUUID->"383ffaba-f4ac-43a8-a750-5e713fbc276c"]
}, Open  ]],
Cell[524618, 9328, 379, 9, 30, "Input",ExpressionUUID->"c964de62-a916-4977-b598-680f3854d979"],
Cell[525000, 9339, 3300, 77, 180, "Input",ExpressionUUID->"ea5729b2-323b-4b55-aad4-b1461aef30fa"],
Cell[528303, 9418, 171, 2, 29, "Input",ExpressionUUID->"a9997b8e-9352-4844-86ac-1e364b70967b"],
Cell[CellGroupData[{
Cell[528499, 9424, 540, 12, 30, "Input",ExpressionUUID->"a398ddd9-f43e-490d-b174-cebad7749dc1"],
Cell[529042, 9438, 35745, 806, 950, "Output",ExpressionUUID->"24718898-d07d-4d39-a6fa-0ea481b15968"]
}, Open  ]],
Cell[CellGroupData[{
Cell[564824, 10249, 1542, 37, 53, "Input",ExpressionUUID->"3395c8e8-b71e-466b-98cc-1424d42b8e42"],
Cell[566369, 10288, 638, 15, 26, "Message",ExpressionUUID->"0c7398af-ab8b-4c13-a9f8-4eca90f8f4f9"],
Cell[567010, 10305, 1025, 28, 33, "Output",ExpressionUUID->"22508177-e832-4475-a0b7-fa1190830059"]
}, Open  ]],
Cell[CellGroupData[{
Cell[568072, 10338, 318, 6, 29, "Input",ExpressionUUID->"274d2640-2b1e-40d4-b449-245c48179daf"],
Cell[568393, 10346, 615, 15, 33, "Output",ExpressionUUID->"2b55a18a-2b4e-407d-a82e-d37eb407dd67"]
}, Open  ]],
Cell[CellGroupData[{
Cell[569045, 10366, 2793, 79, 204, "Input",ExpressionUUID->"275e5f11-e315-4958-a0e6-b9785bc5bde8"],
Cell[571841, 10447, 8827, 215, 372, "Output",ExpressionUUID->"e64e6ee0-c4ae-4d6c-a338-3d92d7c1d66b"]
}, Open  ]],
Cell[580683, 10665, 317, 4, 29, "Input",ExpressionUUID->"de42a8db-4e3c-462c-8cb7-69f53173eb57"],
Cell[581003, 10671, 171, 2, 29, "Input",ExpressionUUID->"adf2a667-24ce-4a2e-820f-af2609f8e4f2"],
Cell[581177, 10675, 173, 2, 29, "Input",ExpressionUUID->"12163958-7d75-43de-bad2-f77fd6bc0b40"],
Cell[581353, 10679, 221, 3, 29, "Input",ExpressionUUID->"b06722e4-1b7a-4924-a6f6-dda1634666ef"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[581623, 10688, 222, 4, 65, "Section",ExpressionUUID->"d80482bf-3b6a-4d46-a37c-e46b5520c0f7"],
Cell[CellGroupData[{
Cell[581870, 10696, 989, 25, 51, "Input",ExpressionUUID->"0f8b4c41-db52-4530-86e6-600bced4a8cd"],
Cell[582862, 10723, 1141, 34, 69, "Output",ExpressionUUID->"a7bf4775-87f4-4a3b-85e9-581c079deff2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[584040, 10762, 725, 17, 51, "Input",ExpressionUUID->"292f6ded-b4dc-441c-99ca-362e98f0e2fd"],
Cell[584768, 10781, 1376, 40, 69, "Output",ExpressionUUID->"c4126ae9-fc8d-4c12-9a0a-04a7c830cfde"]
}, Open  ]],
Cell[CellGroupData[{
Cell[586181, 10826, 752, 17, 49, "Input",ExpressionUUID->"173f50e0-8d57-4160-8f27-db9951e413a8"],
Cell[586936, 10845, 270, 5, 33, "Output",ExpressionUUID->"189333bb-b21d-42a9-a1e0-d4818621cb99"]
}, Open  ]],
Cell[CellGroupData[{
Cell[587243, 10855, 978, 23, 53, "Input",ExpressionUUID->"3ea1a48c-b471-4c87-b821-708c0d60c6c5"],
Cell[588224, 10880, 264, 4, 33, "Output",ExpressionUUID->"85ad7b50-9d02-4bbc-b5d0-1efd665798f9"],
Cell[588491, 10886, 912, 24, 43, "Output",ExpressionUUID->"e6f5e8bb-aa68-46be-80b0-cf477511fcdd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[589440, 10915, 2267, 65, 162, "Input",ExpressionUUID->"0c6b4545-f738-4290-8110-2c2d91efdf02"],
Cell[591710, 10982, 8419, 206, 375, "Output",ExpressionUUID->"b2b8f2ff-8e9e-4197-adb7-0df04ca478a4"]
}, Open  ]],
Cell[600144, 11191, 171, 2, 29, "Input",ExpressionUUID->"6d716807-9afb-4474-b0f9-b0bd28ce9a5b"],
Cell[600318, 11195, 477, 9, 55, "Text",ExpressionUUID->"75a3fff9-4019-4b6a-981b-647bf28a9fd9"],
Cell[CellGroupData[{
Cell[600820, 11208, 536, 12, 71, "Input",ExpressionUUID->"1815f594-1825-4baf-a818-18c0438fa78c"],
Cell[601359, 11222, 2974, 89, 72, "Output",ExpressionUUID->"869f75b2-aaa9-454e-a249-326c21f463e5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[604370, 11316, 528, 13, 30, "Input",ExpressionUUID->"d63f32e1-5354-4c84-b218-da5dc19893e5"],
Cell[604901, 11331, 1934, 53, 56, "Output",ExpressionUUID->"0193f538-14c0-427b-af89-fd3afb9a2c6f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[606872, 11389, 869, 20, 51, "Input",ExpressionUUID->"676b532e-4737-4ee9-863a-0c88f2eb3502"],
Cell[607744, 11411, 771, 22, 60, "Output",ExpressionUUID->"45f0b8bb-db90-4847-9cd8-dbcd590da6bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[608552, 11438, 474, 8, 69, "Input",ExpressionUUID->"29afe6a4-2ca3-40f1-866d-9f8cbda06b14"],
Cell[609029, 11448, 830, 23, 60, "Output",ExpressionUUID->"be1c0365-1047-4b9b-b538-706381e389d6"],
Cell[609862, 11473, 308, 6, 33, "Output",ExpressionUUID->"4833de63-abab-43d8-99ce-1a80f4918df3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[610207, 11484, 559, 13, 89, "Input",ExpressionUUID->"588371df-dd5e-468c-b205-b1836cbed200"],
Cell[610769, 11499, 189, 2, 33, "Output",ExpressionUUID->"7fd16310-c736-4f65-8355-6d8092030950"],
Cell[610961, 11503, 173, 2, 33, "Output",ExpressionUUID->"00c7249b-6db4-466c-876e-9802047c62b2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[611171, 11510, 501, 11, 30, "Input",ExpressionUUID->"40eb8f98-5e5c-4926-b9e6-3ab7a238ff1c"],
Cell[611675, 11523, 587, 14, 34, "Output",ExpressionUUID->"4e253ffb-5281-4a34-9e48-d787b820c630"]
}, Open  ]],
Cell[CellGroupData[{
Cell[612299, 11542, 988, 25, 51, "Input",ExpressionUUID->"2f59f4e4-6d5e-4dd9-a47a-d6c6db395f87"],
Cell[613290, 11569, 9627, 182, 369, "Output",ExpressionUUID->"58c0db25-6516-4a80-b4c9-fc61c46a6840"]
}, Open  ]],
Cell[622932, 11754, 343, 7, 33, "Text",ExpressionUUID->"6f271f4d-f5ca-4a6d-89d6-556186c153ae"],
Cell[CellGroupData[{
Cell[623300, 11765, 1212, 33, 73, "Input",ExpressionUUID->"c449deb3-299b-4042-b583-035485b4827f"],
Cell[624515, 11800, 8430, 206, 253, "Output",ExpressionUUID->"e3a8f1b6-68b2-4eae-8ac8-cfa694cacbb7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[632982, 12011, 982, 27, 53, "Input",ExpressionUUID->"c1d4553b-b078-44d4-adf0-c05c6fa679eb"],
Cell[633967, 12040, 8407, 204, 234, "Output",ExpressionUUID->"e755ae7c-6da7-4e14-b2ff-9d62ea4fa37a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[642411, 12249, 603, 17, 30, "Input",ExpressionUUID->"d2abfe4f-ee41-4e18-86a1-d3448f9f94d1"],
Cell[643017, 12268, 19991, 410, 306, "Output",ExpressionUUID->"5d260964-bd0a-4ffa-a7a0-5b02e8ec4758"]
}, Open  ]],
Cell[663023, 12681, 385, 8, 33, "Text",ExpressionUUID->"786d26ff-2ac3-4b0a-8b0d-396fd43d047f"],
Cell[CellGroupData[{
Cell[663433, 12693, 1212, 33, 53, "Input",ExpressionUUID->"c7560d91-3ca1-4a77-9de8-7786429a4e89"],
Cell[664648, 12728, 300, 8, 49, "Output",ExpressionUUID->"6ea66c5b-d230-4791-989d-2988f5c9ad02"],
Cell[664951, 12738, 285, 7, 33, "Output",ExpressionUUID->"281ed654-3601-41dd-8c45-6aa61dc93759"]
}, Open  ]],
Cell[CellGroupData[{
Cell[665273, 12750, 2417, 64, 200, "Input",ExpressionUUID->"30eefa82-9263-467d-9730-df75fa9076a7"],
Cell[667693, 12816, 19938, 409, 369, "Output",ExpressionUUID->"98bf389b-a2c2-4873-a686-6b84be14ab61"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[687680, 13231, 163, 3, 65, "Section",ExpressionUUID->"3f6a24ef-6567-44ab-8c73-e8fcc01ec14e"],
Cell[CellGroupData[{
Cell[687868, 13238, 405, 9, 49, "Input",ExpressionUUID->"b6034421-7f63-462f-aad4-a6fa15805a7c"],
Cell[688276, 13249, 7714, 204, 92, "Output",ExpressionUUID->"3f706e94-ba31-48bc-9a15-77e81fb8665b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[696027, 13458, 534, 14, 53, "Input",ExpressionUUID->"bb19684e-d040-49d4-a1e4-0eac83150fbb"],
Cell[696564, 13474, 3434, 94, 98, "Output",ExpressionUUID->"f8495eb4-6db0-4b74-ab21-310bbaffa9a7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[700035, 13573, 825, 19, 111, "Input",ExpressionUUID->"fbdf5ed4-7c1b-4a86-89e6-24490ee20654"],
Cell[700863, 13594, 763, 21, 60, "Output",ExpressionUUID->"7d9b98d7-52be-41b6-acfe-2e67634cb0f3"],
Cell[701629, 13617, 281, 6, 33, "Output",ExpressionUUID->"23d75ce7-3d52-40e7-b86e-a8e10a7c546d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[701947, 13628, 3372, 99, 202, "Input",ExpressionUUID->"d89a96db-e72b-4673-a112-2bd20b65ab4f"],
Cell[705322, 13729, 18764, 395, 366, "Output",ExpressionUUID->"aa7bc0f6-354b-47d7-87d6-43be4aa87bca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[724123, 14129, 1192, 30, 51, "Input",ExpressionUUID->"744ad9aa-be1c-4530-9310-a534222d875c"],
Cell[725318, 14161, 37511, 771, 375, "Output",ExpressionUUID->"2cc1b312-3200-44de-b63a-da4d6ef85969"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[762878, 14938, 192, 3, 65, "Section",ExpressionUUID->"69303267-727f-49aa-bdc0-f941a4a12eac"],
Cell[763073, 14943, 376, 8, 33, "Text",ExpressionUUID->"4993232e-7360-4fa6-b014-680145160d34"],
Cell[CellGroupData[{
Cell[763474, 14955, 469, 11, 51, "Input",ExpressionUUID->"dd535659-dd57-467c-9e6d-fe44f2244643"],
Cell[763946, 14968, 962, 28, 95, "Output",ExpressionUUID->"d1e9ae65-911b-472f-9ec0-3f0bd504a5cc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[764945, 15001, 1160, 32, 73, "Input",ExpressionUUID->"422bdf06-45f8-4a0a-82c3-c776a6ffd1e0"],
Cell[766108, 15035, 938, 28, 95, "Output",ExpressionUUID->"58117c27-1a5d-4085-b259-9f002f7c448b"]
}, Open  ]],
Cell[767061, 15066, 270, 6, 33, "Text",ExpressionUUID->"1b9d3344-95d1-4f6f-b6c0-d2b487d7ddc2"],
Cell[CellGroupData[{
Cell[767356, 15076, 343, 7, 69, "Input",ExpressionUUID->"1c1ae249-d571-4642-bf23-a22518f47e81"],
Cell[767702, 15085, 903, 29, 103, "Output",ExpressionUUID->"5e3b9e8c-0a53-4678-aba0-e5459ec6d381"],
Cell[768608, 15116, 1177, 36, 103, "Output",ExpressionUUID->"7c20b2c9-c260-474c-8f25-6ef9a989adb6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[769822, 15157, 789, 20, 51, "Input",ExpressionUUID->"ed733822-3ebf-4b9d-b982-fafcc903d2d7"],
Cell[770614, 15179, 938, 28, 95, "Output",ExpressionUUID->"f3f65e3a-dc35-41af-b5c7-0805dfb917b8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[771589, 15212, 706, 16, 29, "Input",ExpressionUUID->"5522c651-cfbd-431f-915f-3296c5b807b0"],
Cell[772298, 15230, 1177, 36, 103, "Output",ExpressionUUID->"e06322a6-ddf8-4813-ba94-e5d51e1d9e9e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[773512, 15271, 854, 19, 69, "Input",ExpressionUUID->"6cffe8db-5197-48fa-90fc-04fffc96e2bf"],
Cell[774369, 15292, 1414, 41, 103, "Output",ExpressionUUID->"31d8159d-539e-4fc8-9156-fac914a8c95a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[775820, 15338, 1174, 28, 131, "Input",ExpressionUUID->"4dfc7fbd-6f28-4ac0-835c-055050a0fcf6"],
Cell[776997, 15368, 1013, 30, 95, "Output",ExpressionUUID->"f3379d90-bb8a-43f2-836f-b4ad2265b9d6"],
Cell[778013, 15400, 1492, 43, 103, "Output",ExpressionUUID->"47ca7274-51a8-4b6f-959c-80a2db9cfb93"]
}, Open  ]],
Cell[CellGroupData[{
Cell[779542, 15448, 1037, 25, 91, "Input",ExpressionUUID->"ffbd5c4d-333d-4423-8a63-23cf586d2565"],
Cell[780582, 15475, 1722, 49, 103, "Output",ExpressionUUID->"e6a2a5cf-bd07-49b3-a6dc-b602f4e986ad"],
Cell[782307, 15526, 3524, 97, 106, "Output",ExpressionUUID->"f0a1e78a-9f8e-470b-bfdb-9764abebe66a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[785868, 15628, 656, 15, 91, "Input",ExpressionUUID->"e0a2b308-8423-4562-a768-8204d60c941a"],
Cell[786527, 15645, 894, 26, 94, "Output",ExpressionUUID->"e551574d-1a3a-4c27-b249-6c2248cc522c"],
Cell[787424, 15673, 894, 26, 94, "Output",ExpressionUUID->"a8e7e028-6d05-4ba1-99d5-0106f262dc43"]
}, Open  ]],
Cell[CellGroupData[{
Cell[788355, 15704, 1919, 47, 153, "Input",ExpressionUUID->"51368442-c70a-483c-8466-ddcec446f6a4"],
Cell[790277, 15753, 695, 21, 94, "Output",ExpressionUUID->"e8d0d9ff-b62f-495d-b85b-4a845e57ccbf"],
Cell[790975, 15776, 821, 25, 94, "Output",ExpressionUUID->"af50e392-8658-4c13-8022-bd360f386136"],
Cell[791799, 15803, 1826, 53, 103, "Output",ExpressionUUID->"f8b59082-c222-4671-ae4c-f7506ebc2e45"]
}, Open  ]],
Cell[CellGroupData[{
Cell[793662, 15861, 366, 8, 49, "Input",ExpressionUUID->"9465b75b-9d49-4a55-bf77-4bf84820ea00"],
Cell[794031, 15871, 2649, 75, 106, "Output",ExpressionUUID->"40b40f12-45c0-4ad1-bd23-42f39a142257"]
}, Open  ]],
Cell[796695, 15949, 152, 3, 29, "Input",ExpressionUUID->"86765755-7abd-4853-b50d-b1981439fa0a"],
Cell[CellGroupData[{
Cell[796872, 15956, 1349, 39, 73, "Input",ExpressionUUID->"1d5547dd-e759-42e5-b367-041a792795a2"],
Cell[798224, 15997, 316, 7, 33, "Output",ExpressionUUID->"13f6bce4-9a6d-4261-ab26-2e07b9837142"]
}, Open  ]],
Cell[CellGroupData[{
Cell[798577, 16009, 187, 3, 53, "Subsection",ExpressionUUID->"896f6a50-8fd6-4dde-9b99-420229300c83"],
Cell[CellGroupData[{
Cell[798789, 16016, 1525, 39, 113, "Input",ExpressionUUID->"0f4ed346-912d-418f-adb3-7ed15979f66b"],
Cell[800317, 16057, 2651, 75, 106, "Output",ExpressionUUID->"dc0fd1e1-86d5-49a2-8ac3-a6aabaed3b8c"],
Cell[802971, 16134, 1002, 31, 78, "Output",ExpressionUUID->"aecbb5e8-b48d-4272-b407-0a041845f21a"],
Cell[803976, 16167, 2659, 72, 58, "Output",ExpressionUUID->"f8fba10d-b7c2-4c01-9f06-18e571f0cf78"]
}, Open  ]],
Cell[CellGroupData[{
Cell[806672, 16244, 1495, 40, 75, "Input",ExpressionUUID->"602e980a-2149-4718-9b5e-6ecb53487569"],
Cell[808170, 16286, 339, 8, 33, "Output",ExpressionUUID->"dd6acde3-d1fb-4cec-bf4f-a67f3776086b"],
Cell[808512, 16296, 323, 8, 33, "Output",ExpressionUUID->"a14920d4-197f-46ef-8def-f5b4503ef1db"],
Cell[808838, 16306, 312, 8, 33, "Output",ExpressionUUID->"d95fa7d5-bbaf-47c0-8706-a52a2d5e2c38"]
}, Open  ]],
Cell[CellGroupData[{
Cell[809187, 16319, 967, 25, 51, "Input",ExpressionUUID->"25f0d253-82bc-4386-b9e4-508255cfca7e"],
Cell[810157, 16346, 2943, 83, 107, "Output",ExpressionUUID->"4911d205-99e8-49cb-ad47-f70da657ccfe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[813137, 16434, 1043, 23, 71, "Input",ExpressionUUID->"a627fbb4-169a-4021-8c80-d70d0a678edd"],
Cell[814183, 16459, 1780, 54, 103, "Output",ExpressionUUID->"fa8e2440-4962-45c3-a65e-48d603d25bdc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[816000, 16518, 352, 8, 30, "Input",ExpressionUUID->"35d9dcdc-58b5-4f8a-ab25-27e8747c71c1"],
Cell[816355, 16528, 929, 31, 94, "Output",ExpressionUUID->"d029d4ae-22cd-4b3b-934a-c24196d5a0df"]
}, Open  ]],
Cell[CellGroupData[{
Cell[817321, 16564, 978, 22, 51, "Input",ExpressionUUID->"9c17902c-ad50-4654-9381-4db8dc54d167"],
Cell[818302, 16588, 3381, 101, 88, "Output",ExpressionUUID->"fb4aaf58-a791-4707-86fa-4b9d6b61c7ae"]
}, Open  ]],
Cell[CellGroupData[{
Cell[821720, 16694, 891, 23, 73, "Input",ExpressionUUID->"baadeb17-f9da-480e-a56b-e4ab5f201e77"],
Cell[822614, 16719, 3312, 98, 71, "Output",ExpressionUUID->"d2aa11ac-0b9b-456c-a110-43ac102578e9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[825963, 16822, 489, 11, 51, "Input",ExpressionUUID->"91ffc620-5c59-4d6c-9b99-0290bd476ab2"],
Cell[826455, 16835, 2575, 72, 104, "Output",ExpressionUUID->"d7b93c69-cd49-43c8-bdda-96ff02c22de3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[829067, 16912, 908, 23, 30, "Input",ExpressionUUID->"b061e090-65f5-497d-821e-2d118bdab548"],
Cell[829978, 16937, 282, 7, 33, "Output",ExpressionUUID->"af9c0ff4-c9b7-47bf-aba4-e801e9b084cf"]
}, Open  ]],
Cell[830275, 16947, 152, 3, 29, "Input",ExpressionUUID->"52453327-cd75-4219-b157-b643a35aa234"],
Cell[830430, 16952, 152, 3, 29, "Input",ExpressionUUID->"6ddce878-423d-44a1-a78e-c0d0fec466eb"],
Cell[CellGroupData[{
Cell[830607, 16959, 144, 3, 30, "Item",ExpressionUUID->"5bb90e0d-55e1-4f14-959c-7efa2d111cd3"],
Cell[830754, 16964, 154, 3, 29, "Input",ExpressionUUID->"3dc4599e-bffd-4209-805a-fd11906cc502"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

